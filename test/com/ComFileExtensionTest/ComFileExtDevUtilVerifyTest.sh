#! /bin/bash

# This script provides a simple sanity test to ensure that the
# utilities most commonly used during the AAF file development will
# correctly open any file regardless of its file extension. It is
# meant simply to verify that file extension limitations that should
# not exist in the SDK itself do not creep into any of the commonly
# used development utilities. The test simply verifies that the
# utilities will open the files without error. It does not test any
# other aspect of the utilities' operation. It uses the files
# generated by ComFileExtensionTest and is considered an adjunct to
# that test that should be run manually.
#
# The script is configured to run on unix platforms only. It is
# executed as part of a "make check" however the dependency on each
# utility under that is tested is not declared explicity. For this
# reason make check should be executed from the top level directory,
# or from the source directory only after all the utilities have
# already been built.
#
# The utilities that tested are those that are commonly used for AAF
# software development. They are:
#
# aaf2dot, aafmeta2dot - Convert aaf to GraphVis .dot format. Part of
# the aafviewer utiltity.
#
# InfoDumper - AAF data structure dumper
#
# aaffmtconv - convert AAF files from structured storage to xml and
# vice versa.
#
# aafembed - embedd essence in aaf structured storage files
#
# aafdump - low level AAF structured storage dump utility. Note, that
# aafdump is only built if libgsf is available LIBGSF_PATH is set (see
# AAF/build/common.mk). If it is not present a warning is printed.
#
# MXFDump - low level KLV dump utility

# Exist on any error (non zero command exit status)
set -e

# This will capture errors that are indicated by nonzero return
# values.  It saves the script from the need to test each return value
# explicity.
function errorTrap() {
    echo "$0 unexpected error"
    echo "FAILED"
}
trap errorTrap ERR

export LD_LIBRARY_PATH=.

# The script runs utilities that it expects to find in the same
# directory in which the script resides. We must cd to that directory
# so that the relative paths used by this script work as
# expected. (This is necessary for "make check" to work).
cd $(dirname $0)

# Sanity test of the aafdump utility (low level structured storage dumper)
# See not above regarding possible absence of aafdump.
if [ -x ./aafdump ];
then
    AAFDUMP=./aafdump
else
    AAFDUMP=echo
    echo "warning: aafdump not present (perhaps libgsf wasn't available at build time?)"
fi

function SanityTestFile_StructuredStorageOnly() {
    FILE=$1
 
    echo "  structured storage only test: $f"
    
    $AAFDUMP $1 > /dev/null

    # Sanity test of the convert utilty (structured storage to/from
    # xml conversion utility)
    ./aaffmtconv -xml $1 $1.xml
    rm $1.xml

    # Sanity test of the aafembed utility (essence embedder).
    ./aafembed -n $1
}

function SanityTestFile_KlvOnly() {
    FILE=$1
 
    echo "  klv only test: $f"

    # Low level klv dumpper
    ./MXFDump $f > /dev/null
}

function SanityTestFile_AllFormats() {
    FILE=$1
 
    echo "  all format test: $f"

    # Sanity test of InfoDumper (aaf data structure dumper)
    ./InfoDumper $1 > /dev/null
   
    # Sanity test of the convert utilty (structured storage to/from
    # xml conversion utility)
    ./aaffmtconv -ss $1 $1.ss
    rm $1.ss

    # Sanity test of aafviewer "2dot" utilities (part of aafviewer,
    # convert data structure into GraphViz .dot format).
    ./aaf2dot -aafin $1 -dotout $1.dot
    ./aafmeta2dot -aafin $1 -dotout $1.meta.dot
    rm $1.dot $1.meta.dot
}

CFET=./ComFileExtensionTest
CFET_OUT=./ComFileExtensionTest.out

# Use the ComFileExtensionTest to generate a list of test files and
# capture the output so that we can use these files for further
# testing.
echo generate test files...
$CFET -d > $CFET_OUT

echo Running $CFET to generate test files
ALL_TEST_FILES=$(cut -d, -f3 < $CFET_OUT)
SS_TEST_FILES=$(grep SS < $CFET_OUT | cut -d, -f3)
KLV_TEST_FILES=$(grep KLV < $CFET_OUT | cut -d, -f3)

echo "all format tests..."
for f in $ALL_TEST_FILES;
do
  SanityTestFile_AllFormats $f
done

echo "structured storage only tests..."
for f in $SS_TEST_FILES;
do
  SanityTestFile_StructuredStorageOnly $f
done

echo "klv only tests..."
for f in $KLV_TEST_FILES;
do
  SanityTestFile_KlvOnly $f
done

# Cleanup
rm $CFET_OUT

echo "PASSED"
