#!/usr/bin/perl -w
# $Id: check_aafsdk_headertext.pl,v 1.2 2009/06/02 07:45:56 stuart_hc Exp $ $Name: V116 $
#
# Tool to check licence text for consistency or to update licence text.
#
# Copyright (C) 2004-2009 Stuart Cunningham <stuart_hc@users.sourceforge.net>
#
use strict;
use Getopt::Long;

# Classes of files which can contain licence text
#	C/C++ sources		.h .c .cpp
#	Def files			.def .DEF
#	dod files			.dod
#	Makefiles			GNUmakefile .mk .mak makefile
#	Shell/awk scripts	.sh .ksh .bash .awk
#	Perl scripts		.pl
#	XSL files			.xsl
#	build/tools			<no extension> (sh or perl script)
#
# Files which may or may not have $Id but which must not be processed
# for licence text since they do not contain any AMWA code.
#	ref-impl/libjpeg/
#	ref-impl/expat/
#	ref-impl/src/OM/OMSSSStorageRWInputSource.cpp		# SchemaSoft & MetaGlue
#	ref-impl/include/com-api/AAF*_i.c					# generated by scripts in dodo/, but broken?
#	ss-impl/ref/h/
#	sss-impl/include/
#	Utilities/aafviewer/ (including .java, .bat, README)
#	Utilities/eli2aaf/
#	Utilities/aafembed/
#
# Generated files can be edited but check they are identical with
# output from generation programs in meta/, meta/headergen/ and dodo/.
#
# Files which generate code need to be treated specially since they
# have two or three copies of the licence text in their body, often
# using code-specific ways of escaping special characters:
#	dodo/macros/base.mac
#	meta/headergen/headerGenUtils.cpp
#	meta/mkdict.awk
#
# Range of prefixes on each line of licence text are:
#	'  '		(two spaces) *.xsl
#	'# '		Shell/Makefile/Perl/Awk
#	'#c '		dodo
#	'// '		C++
#	'; '		.def files
#	'rem   '	.cmd files

my $opt_filelist;
my $opt_help = 0;
my $opt_check_any = 0;
my $opt_update_licence = 0;
GetOptions(
		'f=s', \$opt_filelist,		# Read in filelist from text file containing filenames
		'a', \$opt_check_any,
		'u', \$opt_update_licence,
		'h', \$opt_help,
		);
if ($opt_help || (scalar @ARGV < 1 && ! defined $opt_filelist)) {
	print "Usage:  check_aafsdk_headertext.pl [filenames]\n";
	print "\n";
	print "By default, check licence text is consistent in specified files.\n";
	print "\n";
	print "Options:\n";
	print "  -f filelist   text filename containing list of filenames to process\n";
	print "  -a            run consisteny checks for any file types (not just files with licence text)\n";
	print "                includes checks for CRLF line endings, and script executable mode\n";
	print "  -u            update files with new licence text\n";
	exit 0;
}

my @filelist;
if (defined $opt_filelist) {
	# Read in filelist from file containing filenames
	# E.g. find . -wholename './AAF*SDK' -prune -o -name '*.[ch]' -o -name '*.cpp' > filelist.txt
	open(IN, $opt_filelist) || die "$opt_filelist: $!";
	while (<IN>)
		{ next if /^#/; chop; push @filelist, $_ }
	close(IN);
}
else {
	@filelist = @ARGV;
}

if ($opt_check_any) {
	my $r = check_any_file();
	exit (! $r);
}

if ($opt_update_licence) {
	my $r = update_licence();
	exit (! $r);
}

my $r = check_licence();
exit (! $r);

sub check_licence
{
	my $result = 1;

	# Read in current licence text from dodo/CopyrightMessage.txt
	my $lic_file = "dodo/CopyrightMessage.txt";
	if (! open(LIC, $lic_file)) {
		print "Could not open $lic_file\n";
		print "To check licenes run script in SDK top-level directory\n";
		return 0;
	}
	my $dodo_licence;
	read(LIC, $dodo_licence, -s $lic_file);
	close(LIC);

	# Remove "The Initial Developer" paragraph since it is optional
	my $cur_licence = $dodo_licence;
	$cur_licence =~ s/\nThe Initial Developer.*//s;

	my %dates;

	# Process file list
	for my $file (@filelist)
	{
		# Read in file
		open(IN, $file) || die "$file: $!";
		read(IN, $_, -s $file);
		close(IN);

		if (! /subject to the\b/) {
			# Skip files without any licence text
			next;
		}

		my $bad_line = 0;
		for my $line (split /\n/, $cur_licence) {
			next if $line eq '';
			next if $line =~ /Copyright \d\d\d\d/;			# Copyright dates are tested below
			if (! /\Q$line\E/) {
				print "$file: missing $line\n";
				$bad_line = 1;
				$result = 0;
			}
		}

		# Skip following tests if licence is bad so far
		next if $bad_line;

		if (! /Copyright \d\d\d\d-(\d\d\d\d)\b/)
			{ print "$file: missing Copyright date-date\n"; $result = 0 }
		else {
			$dates{$1}++;
		}

		#if (! /The Initial Developer/)
		#	{ print "$file: missing The Initial Developer\n" }

		next if $file =~ m,dodo/CopyrightMessage.txt,;		# Tests below not suitable for this file
		next if $file =~ m,LEGAL/AAFSDKPSL.TXT,;			# Tests below not suitable for this file

		# Get the string starting from the start of file up to 'subject to the'
		my ($start_of_file) = /(.*?\n.*?)subject to the/ms;
		if (!defined $start_of_file)
			{ print "$file: no licence text found"; $result = 0; }

		if ($start_of_file !~ /\$Id/) {
			print "$file: No \$Id\n";
			$result = 0;
		}
		if ($start_of_file !~ /\$Name/) {
			print "$file: No \$Name\n";
			$result = 0;
		}

		# Use the prefix to prepare $tmp_licence to match in the file
		my ($prefix) = /^(.*)The contents of this file are subject to the/m;
		my $tmp_licence = $cur_licence;
		$tmp_licence =~ s/^/$prefix/mgs;	# put prefix on every line
		$tmp_licence =~ s/ +$//mgs;			# strip trailing spaces

		$tmp_licence = quotemeta($tmp_licence);		# Escape metacharaters

		# Replace actual Copyright dates with pattern to match dates
		$tmp_licence =~ s/\b\d\d\d\d\\-\d\d\d\d\b/\\d\\d\\d\\d-\\d\\d\\d\\d/;

		if (! /$tmp_licence/s) {
			print "$file: complete and intact licence not found\n";
			$result = 0;
			next;			# Skip Initial Developer check below
		}

		# Check Initial Developer paragraph for consistency if present
		if (/The Initial Developer of the Original Code/) {
			my $tmp_licence = $dodo_licence;
			$tmp_licence =~ s/.*\n(The Initial Developer.*)/$1/s;
			$tmp_licence =~ s/^/$prefix/mgs;	# put prefix on every line
			$tmp_licence =~ s/ +$//mgs;			# strip trailing spaces
			$tmp_licence =~ s/Avid Technology\./[\\S ]+\\./s;		# Replace Avid name with pattern

			if (! /$tmp_licence/s) {
				print "$file: \"The Initial Developer\" paragraph inconsistent\n$tmp_licence";
				$result = 0;
			}
		}
	}

	# Check for same end date in copyright dates
	if (scalar(keys %dates) > 1) {
		print "Multiple copyright YYYY-YYYY end dates:\n";
		print join(' ', sort keys %dates), "\n";
		$result = 0;
	}

	return $result;
}

sub check_any_file
{
	my $result = 1;
	for my $file (@filelist)
	{
		# Ignore these binary files
		next if $file =~ /\.(pdf|xls|doc|ppt)$/;
		next if $file =~ /\.vcproj$/;
		next if $file =~ /\.swp$/;
		next if $file =~ /\.(jar|dnx|aaf|wav|dv|gz|mdzip)$/;

		# Check execute permission on well-known need-to-execute scripts
		if ($file =~ /\bupdate.cmd$/ || $file =~ /\bupdate.ksh$/) {
			if (! -x $file) {
				print "$file: expected executable but not executable\n";
				$result = 0;
			}
		}

		# Read in file
		open(IN, $file) || die "$file: $!";
		read(IN, $_, -s $file);
		close(IN);

		# check for CRLF endings
		if (/\r\n/)
		{
			next if $file =~ /\.bat$/;
			print "$file: CRLF line endings\n";
			$result = 0;
		}
	}
	return $result;
}

sub update_licence
{

	# Perhaps the easiest way is to edit the old and new licence texts
	# directly in this script as below.

my $old_licence = q{The contents of this file are subject to the AAF SDK Public
Source License Agreement (the "License"); You may not use this file
except in compliance with the License.  The License is available in
AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
Association or its successor.

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.

};

my $new_licence = q{The contents of this file are subject to the AAF SDK Public Source
License Agreement Version 2.0 (the "License"); You may not use this
file except in compliance with the License.  The License is available
in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
Advanced Media Workflow Association, Inc., or its successor.

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
the License for the specific language governing rights and limitations
under the License.  Refer to Section 3.3 of the License for proper use
of this Exhibit.

WARNING:  Please contact the Advanced Media Workflow Association,
Inc., for more information about any additional licenses to
intellectual property covering the AAF Standard that may be required
to create and distribute AAF compliant products.
(http://www.amwa.tv/policies).

Copyright Notices:
};

	my @old_licence = split(/\n/, $old_licence);
	my @new_licence = split(/\n/, $new_licence);

	for my $file (@filelist)
	{
		# Read in file
		open(IN, $file) || die "$file: $!";
		read(IN, $_, -s $file);
		close(IN);

		if (! /subject to the/) {
			print "$file: No licence text found\n";
			next;
		}

		next if $file =~ /dodo\/CopyrightMessage.txt/;

		my ($prefix) = /^(.*)The contents of this file are subject to the/m;

		# Use the prefix to prepare $old_licence to match in the file
		my $t_old = $old_licence;
		$t_old =~ s/^/$prefix/mgs;
		$t_old =~ s/ +$//mgs;		# strip trailing spaces

		# Use the prefix to prepare $new_licence to be a suitable replacement
		my $t_new = $new_licence;
		$t_new =~ s/^/$prefix/mgs;
		$t_new =~ s/ +$//mgs;		# strip trailing spaces

		if (! /\Q$t_old\E/s) {
			die "$file: normalized old licence not found:\n$t_old\n";
		}

		# substitute old licence for new
		if (! s/\Q$t_old\E/$t_new/s) {
			die "$file: licence substitution failed\n";
		}

		# substitute Original Code line
		if (! s/Licensor of the\n${prefix}AAF Association\./licensor of the\n${prefix}Advanced Media Workflow Association.  All rights reserved./s) {
			die "$file: Original Code line substitution failed\n";
		}

		# substitute Initial Developer line if present
		if (/The Initial Developer of the Original Code/) {
			if (! s/The Initial Developer of the Original Code of this file and the\n${prefix}Licensor of the AAF Association is/The Initial Developer of the Original Code of this file and the\n${prefix}licensor of the Advanced Media Workflow Association is/s) {
				die "$file: Initial Developer line substitution failed\n";
			}
		}

		# Create new temp file and write out new licence
		my $tmp_name = "$file._tmp_licence";
		open(OUT, ">$tmp_name") || die "$tmp_name: $!";
		print OUT $_;
		close(OUT);

		# Move tmp file over existing files to effectively update them
		rename($tmp_name, $file) || die "rename: $tmp_name, $file";
	}
	return 1;
}
