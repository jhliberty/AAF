###############################################################################
#
# $Id: mkchangelogs,v 1.51 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#
# The contents of this file are subject to the AAF SDK Public Source
# License Agreement Version 2.0 (the "License"); You may not use this
# file except in compliance with the License.  The License is available
# in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
# Advanced Media Workflow Association, Inc., or its successor.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.  Refer to Section 3.3 of the License for proper use
# of this Exhibit.
#
# WARNING:  Please contact the Advanced Media Workflow Association,
# Inc., for more information about any additional licenses to
# intellectual property covering the AAF Standard that may be required
# to create and distribute AAF compliant products.
# (http://www.amwa.tv/policies).
#
# Copyright Notices:
# The Original Code of this file is Copyright 1998-2009, licensor of the
# Advanced Media Workflow Association.  All rights reserved.
#
# The Initial Developer of the Original Code of this file and the
# licensor of the Advanced Media Workflow Association is
# Avid Technology.
# All rights reserved.
#
###############################################################################

# Generate html tables containing change logs.
#
# Each table
#   - contains a log of the changes between two repository tags.
#   - is placed in its own file.
#
# Notes :
#
# File dependencies -
#
# "cvs log"    -> Changes-$t1-$t2.log  ->
# "cvs2cl.pl"  -> Changes-$t1-$t2.clog ->
# "cl2html.awk -> Changes-$t1-$t2.html
#
#
# Author : Tim Bingham " Tim_Bingham@avid.com
#

writeHeader ()
{
  echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"
  echo "<!-- -->"
  echo "<!-- This file was generated on ${date} by user ${user} -->"
  echo "<!-- on system ${computer} using ${TOOLNAME} -->"
  echo "<!-- If you edit this file your changes may be lost. -->"
  echo "<!-- -->"

  echo "<html>"
  echo "<head>"
  echo "<meta http-equiv=\"Content-Type\""
  echo "      content=\"text/html; charset=ISO-8859-1\">"
  echo "<title>$1</title>"
  echo "</head>"
  echo "<body>"
  echo "<h1 align=center>$1</h1>"
}

startList ()
{
  echo "<ul>"
}

endList ()
{
  echo "</ul>"
}

writeValidatesIcon ()
{
  echo "<p>"
  echo "  <a href=\"http://validator.w3.org/check?uri=referer\">"
  echo "    <img border=\"0\""
  echo "         src=\"http://www.w3.org/Icons/valid-html401\""
  echo "         alt=\"Valid HTML 4.01!\""
  echo "         height=\"31\""
  echo "         width=\"88\">"
  echo "  </a>"
  echo "</p>"
}

writeFooter ()
{
  writeValidatesIcon

  echo "</body>"
  echo "</html>"
}

usage ()
{
  echo "$TOOLNAME : Usage : $TOOLNAME [-v -f -n -h] <tagdates> <colormap>"
  echo "    -v = output messages indicating progress"
  echo "    -f = modify the working copy without asking permission"
  echo "    -n = include changes made since the last tag"
}

verbosePrint ()
{
  if [ $VERBOSE = 1 ]
  then
    echo "$*"
  fi
}

TOOLNAME=${0##*/}
TOOLPATH=${0%/${TOOLNAME}}

VERBOSE=0
FORCE=0
NOW=0

while getopts ":vfnh" opt
do
  case $opt in
  v)
    VERBOSE=1
    ;;
  f)
    FORCE=1
    ;;
  n)
    NOW=1
    ;;
  h)
    usage
    exit 0
    ;;
  \?)
    echo "$TOOLNAME : Error Illegal option (-${OPTARG})."
    exit
    ;;
  esac
done
shift $(($OPTIND - 1))

if [[ ${#} != 2 ]]
then
  echo "$TOOLNAME : Error wrong number of arguments (${#})."
  usage
  exit 1
fi

tagstufffile=${1}

if [[ ! -s $tagstufffile ]]
then
  echo "$TOOLNAME : Can't find tag dates \"${tagstufffile}\"."
  exit 1
fi

cmfile=${2}

if [[ ! -s $cmfile ]]
then
  echo "$TOOLNAME : Can't find color map \"${cmfile}\"."
  exit 1
fi

if [[ ! -f ${TOOLPATH}/cvs2cl.pl ]]
then
  echo "$TOOLNAME : Can't find \"${TOOLPATH}/cvs2cl.pl\"."
  exit 1
fi

if [[ ! -f ${TOOLPATH}/cl2html.awk ]]
then
  echo "$TOOLNAME : Can't find \"${TOOLPATH}/cl2html.awk\"."
  exit 1
fi

if [ $0 -ef ./build/history/mkchangelogs ]
then
  echo "$TOOLNAME : Can't use this script to get its own change log."
  exit 1
fi

if [ ${FORCE} != 1 ]
then
  CONT=0
  echo "$TOOLNAME : This script will modify the current working copy (including removal of modified files)."
  echo -n "Continue (Y/N) ? "
  read ANSWER
  case "$ANSWER" in
  yes|YES|Yes|y|Y)
    CONT=1
    ;;
  esac
  if [ $CONT != 1 ]
  then
    echo "$TOOLNAME : Exiting without modifying the current working copy."
    exit 1
  fi
fi

declare -a tagstuff
let i=0;
while read tag date time
do
  if [[ $tag != "#" ]]
  then
    tagstuff[i]=$tag
    tagstuff[i+1]=$date
    tagstuff[i+2]=$time
    let i=$i+3;
  fi
done < $tagstufffile

if [ $NOW == 1 ]
then
  tagstuff[i]="head"
  tagstuff[i+1]=""
  tagstuff[i+2]=""
fi

let n=${#tagstuff[@]}/3

let i=0
while [[ i -lt n ]]
do
  tagnames[i]=${tagstuff[i * 3]}
  tagdates[i]=${tagstuff[(i * 3) + 1]}" "${tagstuff[(i * 3) + 2]}
  let i=$i+1
done

#let i=0
#while [[ i -lt n ]]
#do
#  echo ${tagnames[i]} ${tagdates[i]}
#  let i=$i+1
#done

let i=1
while [[ i -lt n ]]
do
  ptag=${tagnames[i - 1]}
  tag=${tagnames[i]}
  pdate=${tagdates[i - 1]}
  date=${tagdates[i]}
  #echo $ptag $tag
  log=Changes-$ptag-$tag.log
  clog=Changes-$ptag-$tag.clog
  html=Changes-$ptag-$tag.html
  #echo $log
  #echo $clog
  #echo $html
  #
  verbosePrint "Finding changes made between $ptag and $tag."
  title="Log of changes made between $ptag and $tag"
  #
  if [[ ! -f $html ]]
  then
    if [[ ! -f $clog ]]
    then
      if [[ ! -f $log ]]
      then
        # get the raw "cvs log" output, after first making a working copy
        # corresponging to $tag/$date
        #
        if [[ "${tag}" != "head" ]]
        then
          DFLAG="-D \"${date}\""
        else
          DFLAG=""
        fi
        verbosePrint "  cvs update to ${tag}."
        eval cvs update -C -P -A -d ${DFLAG} > /dev/null 2>&1
        verbosePrint "  Create cvs log ($log)."
        cvs -q log -d"${pdate}<${date}" > $log
      fi
      #
      # make the change log
      #
      verbosePrint "  Convert cvs log to change log ($clog)."
      cat $log | ${TOOLPATH}/cvs2cl.pl --stdin --stdout > $clog
    fi
    #
    # convert the change log to html
    # 
    verbosePrint "  Convert change log to html ($html)."
    cat $clog | awk -v TITLE="$title" -f ${TOOLPATH}/cl2html.awk ${cmfile} > $html
  fi
  #
  # next tag
  #
  let i=$i+1
done

date=$(date)
user=$(echo $USER)
computer=$(hostname)

index=Changes-index.html

verbosePrint "Create index ($index)."
writeHeader "Index of cvs change logs" > $index
startList >> $index

let i=$n-1
while [[ i -gt 0 ]]
do
  ptag=${tagnames[i - 1]}
  tag=${tagnames[i]}
  file=Changes-${ptag}-${tag}
  echo "<li><a href=\"${file}.html\">${ptag} -&gt; ${tag}</a>"
  let i=$i-1
done >> $index

endList >> $index
writeFooter >> $index

validate=Changes-validate.html

writeHeader "Validation of cvs change logs" > $validate
startList >> $validate

files="Changes-index.html"

let i=$n-1
while [[ i -gt 0 ]]
do
  ptag=${tagnames[i - 1]}
  tag=${tagnames[i]}
  file=Changes-${ptag}-${tag}
  files="$files ${file}.html"
  let i=$i-1
done

DEST=http://aaf.sourceforge.net/build
VALID=http://validator.w3.org/check

for f in $files
do
  echo "<li>$f <a href=\"$VALID?uri=$DEST/$f\"> Validate</a>"
done >> $validate

endList >> $validate
writeFooter >> $validate
