#c *********************************************************************
#c
#c $Id: AAFTypeDefString.dod,v 1.21 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefString\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define variably-sized Array types whose
/// length is determined by a special terminator element value.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(307e9e67, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(307e9e68, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			type of each element to be contained in this array,

			[in],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,

			Initializes this type def to contain elements of the given type.
  /// Note that it is only possible to use certain types as the element
  /// type.  Those permissible types include:
  ///
  /// - AAFTypeDefInt
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pID is a valid pointer.
  /// - pTypeDef is a valid pointer.
  /// - pTypeName is a valid pointer.
  /// - element type is permissible for use in a String.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pTypeDef or pTypeName\))


AD_XMETHOD1(GetType,
			[out],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			type of elements in this array,

     Returns the type of elements in this string.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - ppTypeDef is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppTypeDef\))


AD_XMETHOD2(GetCount,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value of array,

			[out],
			objPass,
			aafUInt32 *,
			pCount,
			count of elements in the specified string property value,

     Returns number of elements contained in the referenced property
  /// value.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pPropVal is a valid pointer.
  /// - pCount is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pPropVal or pCount\))


AD_XMETHOD3(CreateValueFromCString,
			[in\, size_is\(initDataSize\)],
			objPass,
			aafMemPtr_t,
			pInitData,
			pointer to compile-time C string containing data to use,

			[in],
			objPass,
			aafUInt32,
			initDataSize,
			size of data in pInitData\, in bytes,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			newly created property value,

     Creates a property value which contains a string type.  The
  /// string in the property value are initialized from data in a C
  /// string which is pointed to by pInitData.  Returns the
  /// newly-created property value in ppPropVal.  The size of the
  /// newly-created string property value will be determined by the
  /// size of the initialization C array\, as communicated by
  /// initDataSize.
  ///
  /// Succeeds if all of the following are true:
  /// - the pInitData pointer is valid.
  /// - the ppPropVal pointer is valid.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInitData or ppPropVal\))


AD_XMETHOD3(SetCString,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to write,

			[in\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer from which C string data should be read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			size of pData buffer in bytes,

     Copies all the string data contained in the C array pointed to by
  /// pData into the given property value\, interpreting the data as a
  /// string of this type.  If dataSize indicates an array size
  /// different from the size currently in the indicated array property
  /// value\, that array property value will be resized.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPropVal pointer is valid.
  /// - the pData pointer is valid.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pData\))


AD_XMETHOD2(AppendElements,

			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
       property value corresponding to string to which elements are to
  /// be appended,

			[in],
			objPass,
			aafMemPtr_t,
			pElements,
			Null-terminated array of elements to be appended,

     Appends elements to the end of the array\, setting them to the
  /// values given in the pElements array.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pInPropVal pointer is valid.
  /// - pElements pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInPropVal or pElements\))


AD_XMETHOD3(GetElements,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value to read,

			[out],
			objPass,
			aafMemPtr_t,
			pBuffer,
			array of values that are read,

			[in],
			objPass,
			aafUInt32,
			bufferSize,
			size of pBuffer\, in bytes,

     Gets the value of this property as a string and places it into
  /// pBuffer.  bufferSize indicates the size of the buffer\, in bytes.
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - The pInPropVal pointer is valid.
  /// - bufferSize indicates that pBuffer is large enough to hold the
  ///   data.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pInPropVal\)
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufferSize indicates that pBuffer is too small to hold the
  ///     data.)


AD_OVERRIDE(.method-GetTypeCategory)
AD_XCLASS_END(Concrete, StoredObject)
