#c *********************************************************************
#c
#c $Id: AAFObject.dod,v 1.34 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFObject\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is implemented for all AAF persistent classes.  In
/// addition to methods which all clients can use\, it provides methods
/// for direct property access which should not be used unless the
/// client programmer is aware of the liabilities.
AD_STD_COMMENT_IFC_HEADER
AD_STD_COMMENT_IFC_INIT)

AD_FORWARD_DECLARATION(AAFClassDef)
AD_FORWARD_DECLARATION(AAFDictionary)
AD_FORWARD_DECLARATION(AAFIdentification)
AD_FORWARD_DECLARATION(AAFPropertyDef)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_FORWARD_DECLARATION(EnumAAFProperties)

AD_CLASS_UUID(B1A213AC, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A213AB, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Abstract, StoredObjectBase)
AD_XMETHOD1(GetGeneration,
			[out],
			objOut,
			AAFIdentification,
			ppGeneration,
       AAFIdentification object corresponding to this object's
  /// Generation ID, 

     Gets the generation of this object\, which is represented by an
  /// AAFIdentification object.  This is used to detect when an object
  /// has been modified.
  ///
  /// This method will succeed if generation tracking is enabled for
  /// this object.  Call EnableGenerationTrackint\(\) and
  /// DisableGenerationTrackint\(\) to control generation tracking for
  /// this object.  Call IsGenerationTracked\(\) to determine if
  /// generation tracking is currently enabled for this object.
  ///
  /// Succeeds if all of the following are true:
  /// - the given pGeneration pointer is valid.
  /// - generation tracking is enabled for this object.
  /// - this object is attached to a file.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppGeneration\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - Generation tracking is not enabled for this object.
  ///
  /// AAFRESULT_OBJECT_NOT_ATTACHED
  ///   - This object is not attached to a file from which generation
  ///     information can be obtained..)


AD_XMETHOD1(GetGenerationAUID,
			[out],
			objPass,
			aafUID_t *,
			pResult,
       AUID corresponding to this object's Generation ID, 

     Shortcut to get the AUID representing the Identification
  /// representing this object's generation.  \(Can also be obtained by
  /// calling this->GetGeneration\(&pIdent\)\, and using its result to
  /// call pIdent->GetAuid\(\)\).
  ///
  /// This method will succeed if generation tracking is enabled for
  /// this object.  Call EnableGenerationTrackint\(\) and
  /// DisableGenerationTrackint\(\) to control generation tracking for
  /// this object.  Call IsGenerationTracked\(\) to determine if
  /// generation tracking is currently enabled for this object.
  ///
  /// Succeeds if all of the following are true:
  /// - the given pResult pointer is valid.
  /// - generation tracking is enabled for this object.
  /// - this object is attached to a file.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - Generation tracking is not enabled for this object.
  ///
  /// AAFRESULT_OBJECT_NOT_ATTACHED
  ///   - This object is not attached to a file from which generation
  ///     information can be obtained..)


AD_XMETHOD1(GetDefinition,
            [out],
			objOut,
			AAFClassDef,
			ppClassDef,
			class definition of which this object is an instance.,
            Returns the class definition which describes this object
  /// instance.
  ///
  /// Succeeds if all of the following are true:
  /// - the given ppClassDef pointer is valid.
  ///
  /// Note! Use care when dealing with the object class.  Among the
  /// pitfalls to be avoided is that tests for equality will not
  /// reflect inheritance.  This becomes important if an unknown
  /// non-builtin \(that is\, user defined\) object class ID is obtained.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppClassDef\))


AD_XMETHOD1(GetProperties,
			[out\, retval],
			objOut,
			EnumAAFProperties,
			ppEnum,
			Property Enumeration,
            Returns an enumerator across all properties actually contained in
  /// this object.  Each property is represented by an IAAFProperty
  /// interface.
  /// 
  AD_STD_COMMENT_METH_ADDREF\(ppEnum\)
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountProperties,
            [out],
            objPass,
            aafUInt32 *,
            pCount,
            count of properties present in this object,
            Returns the number of properties currently present in this
  /// object.  This is the same number as will be accessed through
  /// GetProperties\(\).
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))


AD_XMETHOD2(GetPropertyValue,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			returned AAFPropertyValue,

     Returns the requested Property Value.  The desired property data
  /// is identified by the given property definition.
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropDef or ppPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_PROPERTY
  ///   - named property illegal for this object's class.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - named property is optional\, but not present in this class.)


AD_XMETHOD2(SetPropertyValue,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			value to set.,

     Sets the value of the given property to the given value.  If the
  /// selected property is optional but not yet present\, will make the
  /// property present before setting its value.
  ///
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropDef or ppPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_PROPERTY
  ///   - named property illegal for this object's class.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - named property is optional\, but not present in this class.)


AD_XMETHOD2(IsPropertyPresent,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,
			
			[out],
			objPass,
			aafBoolean_t*,
			pResult,
			true if present; false if not present,

     Sets *pResultReturns true in if named property is legal and is
  /// present; sets it to false if it is legal and is absent.
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\)
  ///
  /// AAFRESULT_ILLEGAL_PROPERTY
  ///   - named property illegal for this object's class.)


AD_XMETHOD1(RemoveOptionalProperty,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

     Removes the property if named property is legal and is
  /// optional and present.
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\)
  ///
  /// AAFRESULT_ILLEGAL_PROPERTY
  ///   - named property illegal for this object's class.)


AD_XMETHOD2(CreateOptionalPropertyValue,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			returned AAFPropertyValue,

     Returns the requested Property Value.  The desired property data
  /// is identified by the given optional property definition.
  /// 
  /// Note! This is a low-level method which allows direct access to
  /// properties.  If such access is done\, any semantic checking \(such
  /// as that which is performed in all other named property Get/Set
  /// methods\) is not done here.  Users must use this method at their
  /// own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropDef or ppPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_PROPERTY
  ///   - named property illegal for this object's class.
  ///
  /// AAFRESULT_PROP_ALREADY_PRESENT
  ///   - named property is optional\, but already present in this class.)


AD_XMETHOD1(GetDictionary,
            [out\, retval],
		objOut,
		AAFDictionary,
		ppDictionary,
		A pointer to an Dictionary pointer,
            Returns the dictionary for this object instance.
  ///
  /// Succeeds if all of the following are true:
  /// - the given ppDictionary pointer is valid.
  ///
  /// Note! Use care when dealing with the object class.  Among the
  /// pitfalls to be avoided is that tests for equality will not
  /// reflect inheritance.  This becomes important if an unknown
  /// non-builtin \(that is\, user defined\) object class ID is obtained.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppClassDef\))


AD_METHOD0(EnableGenerationTracking,
     Calling this method will cause generation tracking to be enabled
  /// for this object.  Generation information will then be available
  /// through the GetGeneration\(\) and GetGenerationAUID\(\) methods.
  /// 
  /// Calling the DisableGenerationTracking\(\) method will disable
  /// generation tracking for this object.
  /// 
  /// Generation tracking is disabled by default.
  ///
  /// This method always succeeds\, even if generation tracking is
  /// already enabled.
  /// 
  /// This method will return the following result:
  ///  - AAFRESULT_SUCCESS)


AD_METHOD0(DisableGenerationTracking,
     Calling this method will cause generation tracking to be disabled
  /// for this object.  Generation information will then not be
  /// available through the GetGeneration\(\) and GetGenerationAUID\(\)
  /// methods.
  /// 
  /// Calling the EnableGenerationTracking\(\) method will enable
  /// generation tracking for this object.
  /// 
  /// Generation tracking is disabled by default.
  ///
  /// This method always succeeds\, even if generation tracking is
  /// already disbled.
  /// 
  /// This method will return the following result:
  ///  - AAFRESULT_SUCCESS)


AD_XMETHOD1(IsGenerationTracked,
			[out],
			objPass,
			aafBoolean_t *,
			pResult,
			set to true if generations are tracked; false otherwise,

     This method will set *pResult to AAFTrue if generations are
  /// being tracked for this object.  A result of AAFTrue indicates
  /// that generation information will be available through the
  /// GetGeneration\(\) and GetGenerationAUID\(\) methods.
  /// 
  /// Calling the EnableGenerationTracking\(\) method will enable
  /// generation tracking for this object; calling the
  /// DisableGenerationTracking\(\) method will disable generation
  /// tracking for this object.
  /// 
  /// Generation tracking is disabled by default.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\))
AD_XCLASS_END(Abstract, StoredObjectBase)
