#c *********************************************************************
#c
#c $Id: AAFPluginManager.dod,v 1.14 2009/06/15 10:08:11 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFPluginManager\
#endm
#c
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used with an object representing an AAF class
/// definition.  The operations on a class definition include managing
/// the position of the class within the class heirarchy\, and
/// accessing property definitions associated with the class.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(EnumAAFLoadedPlugins)
AD_FORWARD_DECLARATION(AAFDictionary)
AD_CLASS_UUID(AD1BB85B, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AD1BB85C, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_METHOD0(RegisterSharedPlugins,

     Attempts to load and register all of the AAF plugin files found
  /// in shared installation directory.)


AD_XMETHOD1(RegisterPluginDirectory,
			[in],
			objPass,
			aafCharacter_constptr,
			directoryName,
			Pointer to the name of directory to look for plugins.,

     Attempts to load and register all of the AAF plugin files found
  /// in the given directory.)


AD_XMETHOD1(RegisterPluginFile,
			[in],
			objPass,
			aafCharacter_constptr,
			fileName,
			Pointer to the name of plugin file to register.,

     Attempts to load and register all of the AAF plugins found
  /// in the given file.)


AD_XMETHOD2(EnumLoadedPlugins,
			[in\, ref],
			  objPass,
			  aafUID_constref,
			  categoryID,
			  Which category ID do we want to enumerate,
			[out\,retval],
			  objOut,
			  EnumAAFLoadedPlugins,
			  ppEnum,
			  Loaded Plugin Enumeration,
     Returns an enumerator which enumerates over all of the loaded
  /// plugin choices through the *ppEnum argument.  The returned
  /// enumerator is AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - if ppEnum is null.)


AD_XMETHOD3(CreatePluginDefinition,
			[in\, ref],
			  objPass,
			  aafUID_constref,
			  pluginDefID,
			  Which plugin definition do you want to create,
			[in],
			objIn,
			AAFDictionary,
			pDictionary,
			The dictionary of the file where the descriptor is to be created,
			[out],
			objPass,
			IAAFDefObject**,
			ppPluginDef,
			The interface of the returned definition,
     Given a plugin definition ID\, find a plugin and manufactures a
  /// plugin descriptor of the correct class for this plugin\, filling
  /// in the values\, and returning the definition through the
  /// *pPluginDesc argument.  The returned definition is AddRef\(\)ed
  /// before it is returned.  You must call QueryInterface on the
  /// result in order to find the correct interface\, and are
  /// responsible for adding the definition to the correct place in the
  /// dictionary\, as well as preventing duplicates. The resulting
  /// definiton has the plugin descriptor already attached.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pPluginDesc pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - if pPluginDesc is null.)


AD_XMETHOD4(CreateInstance,
	[in], objPass, REFCLSID, rclsid,
		The class id of the plugin object do you want to create,
	[in], objPass, IUnknown *, pUnkOuter,
		The controlling unknown of the new instance,
	[in], objPass, REFIID, riid,
		The IID of the initialial interface for the new plugin instance,
	[out\,iid_is\(riid\)], objPass, void **, ppPlugin,
		The IID of the initialial interface for the new plugin instance,
     Create an object contained within one of the loaded plugin
  /// files.
  /// 
  /// Succeeds if all of the following are true:
  /// - the rclsid was found by the plugin manager
  /// - the interface corresponding to riid is supported by the plugin
  /// - if pUnkOuter is not NULL and given plugin supports aggregation
  ///   and riid must be a reference to IID_IUnknown.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// E_INVALIDARG
  ///   - if ppPlugin is null.
  ///   - pUnkOuter is not NULL and riid is not IID_IUnknown.
  ///
  /// AAFRESULT_EXTENSION_NOT_FOUND
  ///   - The given rclsid could not be found by the Plugin Manager.
  ///
  /// E_NOINTERFACE
  ///   - if initial interface given by riid is not supported by the
  ///     plugin.)
AD_XCLASS_END(Concrete, Transient)
