#c *********************************************************************
#c
#c $Id: AAFPlugin.dod,v 1.15 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFPlugin\
#endm
#c
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD

AD_FORWARD_DECLARATION(AAFEssenceStream)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFEssenceDescriptor)

AD_IDL(///
/// The AAFPlugin interface describes the calls of a plugin.
///
/// The AAFPluginManager keeps a copy of each plugin in a table\, along
/// with cached copies of pertinant metadata about the plugin\, and
/// instantiates a copy of the plugin.
///
///)
AD_CLASS_UUID(3631F7A3, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)

AD_DEFAULT_UUID(3631F7A4, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)
AD_XCLASS_BEGIN(Abstract, Transient)

AD_XMETHOD1(CountDefinitions,
			[out],
			objPass,
			aafUInt32 *,
			pDefCount,
			The number of definitions associated with this plugin,

			This method returns the number of subclasses of AAFDefObject associated with this plugin\,
	/// and will be called once at startup by the plugin manager.
	/// A non-zero index is used when a single piece of code implements more than one definition\, which
	/// is not to be confused with multiple plugin interfaces existing in a single plugin file.
	/// An example where an index other than one would be useful is an interpolator which implements
	/// multiple types of interpolation \(ex. linear\, constant\, etc...\)\, but has one entry point
	/// for all types.  Codecs will have only one definition per interface\, but may have many interfaces
	/// clumped together into a single file.
  ///
  /// If this method fails nothing will be written to *pDefCount.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pDefCount arg is NULL.)

AD_XMETHOD2(GetIndexedDefinitionID,
			[in],
			objPass,
			aafUInt32,
			index,
			An index from 0 to the number of definitions - 1,
			[out],
			objPass,
			aafUID_t *,
			pPluginID,
			The unique media object id,

			This method returns the unique ID of the AAFDefObject associated with this Plugin. 
 	/// This range of indices will be from 0 to one less than the total number of codecs\,
	/// operation groups\, classes\, types\, containers\, etc.. implemented by this plugin.
	/// A non-zero index is used when a single piece of code implements more than one definition\, which
	/// is not to be confused with multiple plugin interfaces existing in a single plugin file.
	/// An example where an index other than one would be useful is an interpolator which implements
	/// multiple types of interpolation \(ex. linear\, constant\, etc...\)\, but has one entry point
	/// for all types.  Codecs will have only one definition per interface\, but may have many interfaces
	/// clumped together into a single file.
 ///
  /// Succeeds if all of the following are true:
  /// - the pPluginID pointer is valid.
  /// - Index is within range.
  /// 
  /// If this method fails nothing will be written to *pPluginID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPluginID arg is NULL.
  ///
  /// AAFRESULT_INDEX_RANGE
  ///   - The index value is out of range)

AD_XMETHOD1(GetPluginDescriptorID,
			[out],
			objPass,
			aafUID_t *,
			pPluginID,
			The unique media object id,

			This method returns the unique ID of the AAFPluginDescriptor associated with this Plugin.
  /// This method is called by the plugin manager to determine if a particular plugin descriptor
  /// \(indicating a particular plugin\) is already in the current file\, so that the full create
  /// function does not need to be called.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPluginID pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pPluginID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPluginID arg is NULL.)

AD_XMETHOD3(GetIndexedDefinitionObject,
			[in],
			objPass,
			aafUInt32,
			index,
			An index from 0 to the number of definitions - 1,
			[in],
			objIn,
			AAFDictionary,
			pDictionary,
			The dictionary to use when creating the definition,
			[out],
			objOut,
			AAFDefObject,
			pDefObject,
			The interface of the pluggable definition,

			This method manufactures a definition object of the correct
  /// class for this plugin\, and fills in the values.  You must call QueryInterface
  /// on the result in order to find the correct interface.  The dictionary supplied
  /// should be for the file where the definition will go\, but the definition will not
  /// be added to the file by this function.  The supplied dictionary also needs no
  /// former knowledge of the new definition.  This function will be called by the plugin
  /// manager in order to add the correct definition objects to a file.
	/// A non-zero index is used when a single piece of code implements more than one definition\, which
	/// is not to be confused with multiple plugin interfaces existing in a single plugin file.
	/// An example where an index other than one would be useful is an interpolator which implements
	/// multiple types of interpolation \(ex. linear\, constant\, etc...\)\, but has one entry point
	/// for all types.  Codecs will have only one definition per interface\, but may have many interfaces
	/// clumped together into a single file.
  ///
  /// Succeeds if all of the following are true:
  /// - the pDefObject pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pDefObject.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pDefObject arg is NULL.)

AD_XMETHOD2(CreateDescriptor,
			[in],
			objIn,
			AAFDictionary,
			pDictionary,
			The dictionary to use when creating the descriptor,
			[out],
			objOut,
			AAFPluginDef,
			pPluginDef,
			The interface of the pluggable definition,

			This method manufactures a plugin descriptor of the correct
  /// class for this plugin\, and fills in the values.  You must call QueryInterface
  /// on the result in order to find the corret interface.  The dictionary supplied
  /// should be for the file where the descriptor will go\, but the descriptor will not
  /// be added to the file by this function.  The supplied dictionary also needs no
  /// former knowledge of the new descriptor.  This function will be called by the plugin
  /// manager in order to add the correct plugin descriptors to a file.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPluginDef pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pPluginDef.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPluginDef arg is NULL.)

AD_XCLASS_END(Abstract, Transient)
