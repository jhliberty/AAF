#c *********************************************************************
#c
#c $Id: AAFTIFFDescriptor.dod,v 1.13 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTIFFDescriptor\
#endm
#c
#startm .parent-module 0
AAFFileDescriptor\
#endm
#c
#c #import ./AAFDigitalImageDescriptor.exp
AD_HEAD
AD_INCLUDE(AAFTypes)

AD_IDL(///
/// The IAAFTIFFDescriptor interface is implemented by objects which
/// describe TIFF format media.  A TIFFDescriptor object
/// shall be the EssenceDescription of a  physical Source Mob.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)  
AD_CLASS_UUID(e684d76b, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d76c, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(SetIsUniform,
			[in],
			enumIn,
			aafBoolean_t,
			IsUniform,
			Sets the IsUniform flag value,
     Set to TRUE if essence data has the same number of rows per strip
  /// throughout.
  ///
  /// Always succeeds.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetIsUniform,
			[out],
			objPass,
			aafBoolean_t *,
			pIsUniform,
			Gets the IsUniform flag value,
     Places TRUE into *pIsUniform if the data has the same number of
  /// rows per strip throughout.
  ///
  /// Succeeds if all of the following are true:
  /// - the pIsUniform pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsUniform.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIsUniform arg is NULL.)


AD_XMETHOD1(SetIsContiguous,
			[in],
			enumIn,
			aafBoolean_t,
			IsContiguous,
			is data stores in contiguous bytes,
     Set to TRUE if essence data is stored in contiguous bytes.
  /// 
  /// Always succeeds.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetIsContiguous,
			[out],
			objPass,
			aafBoolean_t *,
			pIsContiguous,
			is this data stored in contiguous bytes,
     Places TRUE into *pIsContiguous if essence data is stored in
  /// contiguous bytes.
  ///
  /// Succeeds if all of the following are true:
  /// - the pIsContiguous pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsContiguous.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIsContiguous arg is NULL.)


AD_XMETHOD1(SetLeadingLines,
			[in],
			objPass,
			aafInt32,
			LeadingLines,
			Number of leading lines to be thrown away Optional,
     Sets the number of leading lines in the TIFF image file.
  /// 
  /// This method succeeds if all of the following are true:
  /// - LeadingLines is  equal or greater than 0\(zero\).
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetLeadingLines,
			[out],
			objPass,
			aafInt32 *,
			pLeadingLines,
			Address to store the number of leading lines,
			Gets the leading lines of the TIFF image.
  ///
  /// This method succeeds if all of the following are true:
  /// - the pLeadingLines pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pLeadingLines.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLeadingLines arg is NULL.)


AD_XMETHOD1(SetTrailingLines,
			[in],
			objPass,
			aafInt32,
			TrailingLines,
			Number of trailing lines to be thrown away Optional.,
			Sets the number of trailing lines in the TIFF image file
  /// 
  /// This method succeeds if all of the following are true:
  /// - TrailingLines is  equal or greater than 0\(zero\).
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetTrailingLines,
			[out],
			objPass,
			aafInt32 *,
			pTrailingLines,
			Address to store the number of trailing lines.,
			Gets the trailing lines of the TIFF image.
  ///
  /// This method succeeds if all of the following are true:
  /// - the pTrailingLines pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pTrailingLines.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTrailingLines arg is NULL.)


AD_XMETHOD1(SetJPEGTableID,
			[in],
			objPass,
			aafJPEGTableID_t,
			JPEGTableID,
			Registered JPEG table code or JT_NULL.,
			Sets the JPEG table code for  the TIFF image file
  /// 
  /// This method always succeeds .
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetJPEGTableID,
			[out],
			objPass,
			aafJPEGTableID_t *,
			pJPEGTableID,
			Address to store the nJPEG table code,
			Gets the JPEG table code of the TIFF image.
  ///
  /// This method succeeds if all of the following are true:
  /// - the pJPEGTableID pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pJPEGTableID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pJPEGTableID arg is NULL.)


AD_XMETHOD2(GetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[out\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				Preallocated buffer to hold the TIFF IFD file information,
     Gets a copy of the TIFF IFD file information without the media.
  /// 
  /// Succeeds if all of the following are true:
  /// - pSummary is a valid pointer.
  /// - The size of the buffer is large enough to hold the TIFF IFD
  ///   file information. 
  /// 
  /// If this method fails pSummary will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSummary arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - The buffer is too small to hold the WAVE file information.)


AD_XMETHOD1(GetSummaryBufferSize,
			[out],
			objPass,
			aafUInt32 *,
			pSize,
			required buffer size,
			Returns the size of the buffer required for the GetSummary\(\)
  /// method.  The value is placed into the location specified by pSize.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSize pointer is valid.
  ///
  /// If this method fails nothing will be written to *pSize.
  ///
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSize arg is NULL.)


AD_XMETHOD2(SetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[in\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				buffer containing value,
			Sets the TIFF IFD file information.
  /// 
  /// Succeeds if all of the following are true:
  /// - pSummary is a valid pointer
  /// 
  /// If this method fails the summary property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSummary arg is NULL.)
AD_XCLASS_END(Concrete, StoredObject)
