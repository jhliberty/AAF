#c *********************************************************************
#c
#c $Id: AAFSegment.dod,v 1.24 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSegment\
#endm
#c
#startm .parent-module 0
AAFComponent\
#endm
#c
#c #import ./AAFComponent.exp
AD_HEAD
AD_IDL(///
/// The IAAFSegment interface is implemented by objects which represent
/// a component that is independent of any other components which may
/// surround it in a sequence.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFSegment is a
///     primary interface for an abstract class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_CLASS_UUID(7a2f0571, 1ba3, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(7a2f0570, 1ba3, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_XMETHOD2(SegmentOffsetToTC,				  

			[in],
			objPass,
			aafPosition_t *, 
			pOffset,
			Pointer to a Segment Offset to be convert to Timecode,

			[out],
			objPass,
			aafTimecode_t *,					   
			pTimecode,
			The converted timecode to be returned,

			Converts the given Segment offset to timecode.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pOffset pointer is valid.
  /// - the pTimeCode pointer is valid.
  /// 
  /// If this method fails the value of pTimecode is left unchanged.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any arg is NULL.
  ///
  /// AAFRESULT_TIMECODE_NOT_FOUND
  ///   - the given offset is not available in this segment.)


AD_XMETHOD3(SegmentTCToOffset,

			   [in],
			   objPass,
			   aafTimecode_t *,
			   pTimecode,
			   Pointer to a timecode to be converted to Offset,

			   [in],
			   objPass,
			   aafRational_t *,
			   pEditRate,
			   The edit rate for the given timecode ,

			   [out],
			   objPass,
			   aafFrameOffset_t *,
			   pOffset,
			   Frame Offset to be returned if found,

		   Converts the given Timecode to an Offset.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pTimeCode pointer is valid.
  /// - the pEditRate pointer is valid
  /// - the pFrameOffset pointer is valid.
  /// 
  /// If this method fails the value of pOffset is left unchanged.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any arg is NULL.
  ///
  /// AAFRESULT_TIMECODE_NOT_FOUND
  ///   - the given timecode is not available in this segment.)
AD_XCLASS_END(Abstract, StoredObject)
