#c *********************************************************************
#c
#c $Id: AAFSelector.dod,v 1.11 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSelector\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#c #import ./AAFSegment.exp
AD_HEAD
AD_IDL(///
/// The IAAFSelector interface is implemented by objects that specify a
/// single segment while preserving references to unused alternatives.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface. 
///)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(EnumAAFSegments)
AD_CLASS_UUID(e684d787, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d788, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(GetSelectedSegment,
			[out],
			objOut,
			AAFSegment,
			ppSelSegment,
			Returned the selected Segment object,
			Places the Selected Segment object in this Selector into the
  /// *ppSelSegment argument.  If none exists yet\, NULL is placed into
  /// the *ppSelSegment argument.
  ///
  /// The returned essence descriptor object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppSelSegment pointer is valid.
  /// - A valid segment exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppSelSegment is null.)


AD_XMETHOD1(SetSelectedSegment,
			[in],
			objIn,
			AAFSegment,
			pSelSegment,
			A Segment object,
			Sets the Selected segment.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSelSegment pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSelSegment is null.)


AD_XMETHOD1(AppendAlternateSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to append to the Alternate list of segments,
			This function appends the input segment to the alternate segment
  /// list\, the alternate list of segments represents unused
  /// alternative segments. 
  ///
  /// This method will AddRef\(\) the segment if it succeeds.
  ///
  /// If the segment is successfully appended to the set of
  /// alternates\, the reference count of the segment is incremented.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pSegment pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment is null.)


AD_XMETHOD1(GetNumAlternateSegments,
			[out],
			objPass,
			aafInt32 *,
			pNumSegments,
			Number of Alternate Segments,
			This function returns the number of segments in the set.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pNumSegments pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumSegments is null.)


AD_XMETHOD1(EnumAlternateSegments,
			[out\, retval],
			objOut,
			EnumAAFSegments,
			ppEnum,
			Segment Enumeration,
			Places an IEnumAAFSegments enumerator for the alterante segments
  /// contained in the selector into the *ppEnum argument.
  /// 
  /// The returned enumerator is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.
  ///
  /// E_FAIL
  ///   - Failed to create the enumerator.)

AD_XMETHOD1(RemoveAlternateSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to remove,
			Removes the given Segment from the selector.
  ///
  /// Succeeds if all of the following are true:
  /// - the v pointer is valid.
  /// - the given segment is currently in the collection.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceData is null.
  ///
  /// AAFRESULT_SEGMENT_NOT_FOUND
  ///   - the given segment is not already contained.)

AD_XCLASS_END(Concrete, StoredObject)
