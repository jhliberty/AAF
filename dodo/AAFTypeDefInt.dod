#c *********************************************************************
#c
#c $Id: AAFTypeDefInt.dod,v 1.17 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefInt\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define Integer types used in AAF persistent
/// objects.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(809c8ca1, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(809c8ca2, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD4(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,

			[in],
			objPass,
			aafUInt8,
			intSize,
			the size of this integer type in bytes,

			[in],
			enumIn,
			aafBoolean_t,
			isSigned,
			true if this integer type is signed; false for unsigned,

			[in\, string],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,

     Initializes this type def to be identified by the given guid\, to
  /// have the given size in bytes\, and to be signed or unsigned.
  ///
  /// The implementation of this method may only allow certain values
  /// for intSize.  It *will* allow at least 1\, 2\, 4\, and 8-byte
  /// integers; some implementations may allow more than that.
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - intSize is a valid value.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  ///
  /// AAFRESULT_BAD_SIZE
  ///  - intSize is not a valid value.)


AD_XMETHOD3(CreateValue,
			[in\, size_is\(valSize\)],
			objPass,
			aafMemPtr_t,
			pVal,
			pointer to integer initialization value,

			[in],
			objPass,
			aafUInt32,
			valSize,
			size of integer\, in bytes\, in pVal,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			newly created property value,

     Creates a property value which contains an integer.  Initializes
  /// it to contain the given integer value.  The initialization value
  /// is passed through pVal; the size of the initialzation value is
  /// given in valSize.
  ///
  /// valSize may be smaller than GetSize\(\) for this typedef; if so\,
  /// the value is lsb-justified and sign-extended \(for signed\) or
  /// zero-filled \(for unsigned\).
  ///
  /// The implementation of this method may only allow certain values
  /// for valSize.  It *will* allow at least 1\, 2\, 4\, and 8-byte
  /// integers; some implementations may allow more than that.
  ///
  /// Succeeds if:
  /// - The pVal pointer is valid.
  /// - The ppPropVal pointer is valid.
  /// - valSize is no larger than GetSize\(\) for this typedef.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pVal or ppPropVal\)
  ///
  /// AAFRESULT_BAD_SIZE
  ///   - valSize is larger than GetSize\(\) for this typedef\, or
  ///     valSize is not a supported value.)


AD_XMETHOD3(GetInteger,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value from which value is to be read,

			[out\, size_is\(valSize\)],
			objPass,
			aafMemPtr_t,
			pVal,
			buffer into which value is written,

			[in],
			objPass,
			aafUInt32,
			valSize,
			size of pVal buffer in bytes,

     Returns the integer value of this property.  The value
  /// to set is passed through pVal.  The size of the pVal buffer is
  /// given in valSize.  valSize may be larger than GetSize\(\); if so\,
  /// the value is lsb-justified and sign-extended \(for signed\) or
  /// zero-filled \(for unsigned\).
  ///
  /// valSize may be smaller than GetSize\(\) for this typedef; if so\,
  /// the value is lsb-justified and sign-extended \(for signed\) or
  /// zero-filled \(for unsigned\).
  ///
  /// The implementation of this method may only allow certain values
  /// for valSize.  It *will* allow at least 1\, 2\, 4\, and 8-byte
  /// integers; some implementations may allow more than that.
  ///
  /// Succeeds if:
  /// - The pPropVal pointer is valid.
  /// - The pVal pointer is valid.
  /// - valSize indicates that pVal is large enough to hold the value.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pVal\)
  ///
  /// AAFRESULT_BAD_SIZE
  ///   - valSize is smaller than GetSize\(\) for this typedef\, or
  ///     valSize is not a supported value.
  ///
  /// AAFRESULT_BAD_TYPE
  ///   - The type associated with pPropVal cannot be read as an
  ///     integral type\, or the int size of pPropVal is larger than the
  ///     int size of this type.)


AD_XMETHOD3(SetInteger,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value from which value is to be read,

			[in\, size_is\(valSize\)],
			objPass,
			aafMemPtr_t,
			pVal,
			buffer from which value is read,

			[in],
			objPass,
			aafUInt32,
			valSize,
			size of pVal buffer in bytes,

     Sets this property value to the given integer value.  The value
  /// to set is passed in pVal\, and the size of the value in pVal is
  /// given in valSize.  valSize may be smaller than GetSize\(\); if so\,
  /// the value is lsb-justified and sign-extended \(for signed\) or
  /// zero-filled \(for unsigned\).
  ///
  /// Succeeds if:
  /// - The pPropVal pointer is valid.
  /// - The pVal pointer is valid.
  /// - valSize indicates that pVal is large enough to hold the value.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pVal\)
  ///
  /// AAFRESULT_BAD_SIZE
  ///   - valSize is larger than GetSize\(\) for this typedef.)


AD_XMETHOD1(GetSize,
			[out],
			objPass,
			aafUInt32 *,
			pSize,
			the returned size of this integral value\, in bytes,

			Returns the size of the integral value defined by this type
  /// definition. 
  ///
  /// Succeeds if:
  /// - The pSize pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pSize\))


AD_XMETHOD1(IsSigned,
			[out],
			objPass,
			aafBoolean_t *,
			pSigned,
			set to true if this integer type is signed; set to false for
  /// unsigned,
			Puts true in *pSigned if property values defined with this type
  /// def are signed; puts false there for unsigned property values.
  ///
  /// Succeeds if:
  /// - The pSigned pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pSigned\))


AD_OVERRIDE(.method-GetTypeCategory)
AD_XCLASS_END(Concrete, StoredObject)
