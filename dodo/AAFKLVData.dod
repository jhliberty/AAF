#c *********************************************************************
#c
#c $Id: AAFKLVData.dod,v 1.7 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFKLVData\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(///
/// The IAAFKLVData interface is implemented by objects that
/// specify an User defined tag and value.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFTypeDef)
AD_CLASS_UUID(46114413, 0676, 11d4, A3, 56, 00, 90, 27, DF, CA, 6A)

AD_DEFAULT_UUID(46114414, 0676, 11d4, A3, 56, 00, 90, 27, DF, CA, 6A)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,
			[in],
			objPass,
			aafUID_t,
			key,
			Key of the following value data,

			[in], 
			objPass,
			aafUInt32, 
			length, 
			Length of preallocated buffer,

			[in\, size_is\(length\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

     Initializes a new KLVData object to be interpreted using the
  /// given given key.  The key must have been registered using dictionary\-\>RegisterKLVDataKey\(\)
  /// in order to use the byte swapping functionality of the type model.
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pName is a valid pointer.
  /// - pTypeDef is a valid pointer and registered
  /// - pValue is a valid pointer
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pTypeDef or pValue\)
  ///
  /// AAFRESULT_NOT_VALID_KEY
  ///   - The  given key must not resolve to a builtin type.  For most purposes\, use
  ///     IAAFTypeDefRename to rename an existing type.
  ///
  /// )

AD_XMETHOD1(GetKey,
            [out],
            objPass,
            aafUID_t*,
            pKey,
            The key of this object,

		   Returns the type definition for this invocation.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pKey pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pKey.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - This property does not exist in the file.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pKey arg is NULL.)


AD_METHOD3(GetValue,

			[in],
            aafUInt32,
            valueSize,
            Size of preallocated buffer,

			[out\\\, size_is\\\(valueSize\\\)\\\, length_is\\\(*bytesRead\\\)],
            aafDataBuffer_t,
            pValue,
            Preallocated buffer to hold value,

			[out],
            aafUInt32 *,
            bytesRead,
            Number of actual bytes read,

     Writes the value into the pValue buffer.  The buffer is allocated
  /// by the caller\\\, and the size of the buffer is given by
  /// valueSize.
  /// 
  /// Caller may call GetValueBufLen\\\(\\\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - valueSize indicates the buffer is large enough to hold the name.
  /// 
  /// If this method fails nothing will be written to *pValue.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - valueSize indicates the buffer is too small to hold the value.)


AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

			Returns the length of buffer required for the GetValue\(\) method.
  /// The value is placed into the location specified by pLen.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  ///
  /// If this method fails nothing will be written to *pLen.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLen arg is NULL.)

AD_XMETHOD2(SetValue,
			[in], 
			objPass,
			aafUInt32, 
			valueSize, 
			Size of preallocated buffer,

			[in\, size_is\(valueSize\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

			The data value is set from a buffer of size valueSize and type.
  ///
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue is null.)

AD_XCLASS_END(Concrete, StoredObject)
