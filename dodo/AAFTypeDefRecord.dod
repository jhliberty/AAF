#c *********************************************************************
#c
#c $Id: AAFTypeDefRecord.dod,v 1.21 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefRecord\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used to define C-like structured types used in
/// AAF persistent objects.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_FORWARD_DECLARATION(EnumAAFPropertyValues)
AD_CLASS_UUID(809c8ca5, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(809c8ca6, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_X2METHOD5(Initialize,
			 [in\, ref],
			 objPass,
			 aafUID_constref,
			 id,
			 auid to be used to identify this type,
			 xxx1,
			 xxx2,

			 [in\, size_is\(numMembers\)],
			 objInArray,
			 AAFTypeDef,
			 ppMemberTypes,
       array of member types to be represented in this record
  /// type,
			 numMembers,
			 xxx4,

			 [in\, size_is\(numMembers\)],
			 objPass,
			 aafString_t *,
			 pMemberNames,
       array of member names to be represented in this enumerated
  /// type,
			 xxx5,
			 xxx6,

			 [in],
			 objPass,
			 aafUInt32,
			 numMembers,
			 number of members in pMemberInfo array,
			 xxx7,
			 xxx8,

			 [in],
			 objPass,
			 aafCharacter_constptr,
			 pTypeName,
			 friendly name of this type definition,
			 xxx9,
			 xxx10,

     Initializes this type def to be identified by the given guid\, and
  /// to contain the given members \(types and names\).  It is considered
  /// an error if multiple members have the same name.  Note that it is
  /// only possible to use certain types as member types.  Those
  /// permissible types include:
  /// - AAFTypeDefInt
  /// - AAFTypeDefRecord
  /// - AAFTypeDefEnum
  /// - AAFTypeDefExtEnum
  /// - AAFTypeDefFixedArray
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pID is a valid pointer.
  /// - pMemberTypes is a valid pointer.
  /// - pMemberNames is a valid pointer.
  /// - pTypeName is a valid pointer.
  /// - all specified member types are permissible for use in a Record.
  /// - all member names are unique.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pMemberTypes\\\, pMemberNames\\\, or pTypeName\)
  ///
  /// AAFRESULT_BAD_TYPE
  ///   - an illegal member type was given.
  ///
  /// AAFRESULT_DUPLICATE
  ///   - a duplicate member name was given.)


AD_XMETHOD2(GetMemberType,
			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this record type,

			[out],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			type definition of indexed member,

     Returns the type definition of the indexed member in this
  /// record type.  Index is zero-based\, and must be less than the
  /// value returned by GetCount\(\).
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - the index exists in this record type def.
  /// - The ppTypeDef pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppTypeDef\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - The given index is out of range for this record type def.)


AD_XMETHOD3(GetMemberName,
			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this record type,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			buffer into which the member name is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			The size of the pName buffer\, in bytes,

     Writes the human-legible tag associated with the indexed member
  /// in this record type.  Index is zero-based\, and must be less
  /// than the value returned by GetCount\(\).  The name is written\,
  /// with a trailing null character\, into the pName buffer.  The
  /// buffer is allocated by the caller.  The size of the buffer is
  /// given by bufSize.
  /// 
  /// Caller may call GetMemberNameBufLen\(\) to determine the required
  /// buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pName pointer is valid.
  /// - bufSize indicates the buffer is large enough to hold the name.
  /// 
  /// If this method fails nothing will be written to
  /// *pName.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pName\)
  /// 
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates the buffer is too small to hold the string.
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - the given integer value is not associated with a member of
  ///     this type.)


AD_XMETHOD2(GetMemberNameBufLen,
			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this record type,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetMemberName\(\)
  /// method.  Index is zero-based\, and must be less than the value
  /// returned by GetCount\(\).  The value is placed into the location
  /// specified by pLen. The value will include space required for the
  /// trailing null character.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  /// - the integer value is associated with a member of this
  ///   enumerated type.
  ///
  /// If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pLen\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - the given integer value is not associated with a member of
  ///     this type.)


AD_X2METHOD3(CreateValueFromValues,

			 [in\, size_is\(numMembers\)],
			 objInArray,
			 AAFPropertyValue,
			 pMemberValues,
       array of property values for members of record value which
  /// is to be created.,
			 numMembers,
			 ,

			 [in],
			 objPass,
			 aafUInt32,
			 numMembers,
			 size of pMemberValues array.,
			 ,
			 ,

			 [out],
			 objOut,
			 AAFPropertyValue,
			 ppPropVal,
			 newly-created property value,
			 ,
			 ,

     Creates a property value which contains a record type.  The
  /// record members in the property value are initialized to
  /// contain the given values\, passed in the pMemberValues array.
  /// numMembers\, which indicates the size of the pMemberValues array\,
  /// must match the value returned by GetCount\(\).  Returns the
  /// newly-created property value in ppPropVal.
  ///
  /// Succeeds if all of the following are true:
  /// - the pMemberValues pointer is valid.
  /// - the ppPropVal pointer is valid.
  /// - numMembers matches the number of members in this record.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pMemberValues or ppPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - numMembers does not match GetCount\(\).)


AD_XMETHOD3(CreateValueFromStruct,
			[in\, size_is\(initDataSize\)],
			objPass,
			aafMemPtr_t,
			pInitData,
			pointer to compile-time struct containing data to use,

			[in],
			objPass,
			aafUInt32,
			initDataSize,
			size of data in pInitData,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			newly created property value,

     Creates a property value which contains a record type.  The
  /// record members in the property value are initialized from data
  /// in a struct which is pointed to by pInitData.  Requires that the
  /// structure pointed to by pInitData has had its offsets registered
  /// with this type.  Returns the newly-created property value in
  /// ppPropVal.
  ///
  /// Succeeds if all of the following are true:
  /// - the pInitData pointer is valid.
  /// - the ppPropVal pointer is valid.
  /// - initDataSize indicates pInitData is the correct size.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInitData or ppPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - initDataSize indicates pInitData is of the wrong size.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for this typedef.)


AD_XMETHOD3(GetValue,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value to read,

			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this record type,

			[out],
			objOut,
			AAFPropertyValue,
			ppOutPropVal,
			value that is read,

     Gets a single property value corresponding to the indicated
  /// record member.  Places a property value representing the
  /// record member identified by the index into ppOutPropval.
  /// Index is zero-based\, and must be less than the value returned by
  /// GetCount\(\).
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - the index exists in this record type def.
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInPropVal or ppOutPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - The given index is out of range for this record type def.)


AD_XMETHOD3(GetStruct,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to read,
			
			[out\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which struct data should be written,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			size of pData buffer in bytes,

     Copies all the member data contained in the given property value\,
  /// interpreted as a record of this type\, into the struct pointed
  /// to by pData.  Requires that the struct pointed to by pData has
  /// had its offsets registered with this type.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPropVal pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData is large enough to hold the data.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pData\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - dataSize indicates pData is too small.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for this typedef.)


AD_XMETHOD3(SetValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to write,

			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this record type,

			[in],
			objIn,
			AAFPropertyValue,
			pMemberPropVal,
			value to be placed into this record,

     Sets the value of the single\, indicated record member of the
  /// record contained in pPropVal\, to the value contained in
  /// pMemberPropVal.  Index is zero-based\, and must be less than the
  /// value returned by GetCount\(\).
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - the index exists in this record type def.
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInPropVal or ppOutPropVal\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - The given index is out of range for this record type def.)


AD_XMETHOD3(SetStruct,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to write,

			[in\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer from which struct data should be read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			size of pData buffer in bytes,

     Copies all the member data contained in the struct pointed to by
  /// pData into the given property value\, interpreting the data as a record of
  /// this type.  Requires that the struct pointed to by pData has had
  /// its offsets registered with this type.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPropVal pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData contains the correct amount of data.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pData\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - dataSize indicates pData is not the correct size.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for this typedef.)


AD_XMETHOD1(GetCount,
			[out],
			objPass,
			aafUInt32 *,
			pCount,
			count of members in this record type,

     Returns number of members in this record type.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pCount is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))


AD_XMETHOD3(RegisterMembers,
			[in],
			objPass,
			aafUInt32 *,
			pOffsets,
			array containing offset for each record member,

			[in],
			objPass,
			aafUInt32,
			numMembers,
			number of members in pOffsets,

			[in],
			objPass,
			aafUInt32,
			structSize,
			size of this struct,

     Allows client to register to the reference implementation a
  /// runtime C struct to represent objects of this TypeDef.  Offsets
  /// for each member in the struct are passed in as an array of
  /// integers; size indicates the number of members in the array.
  /// The offset is given in bytes from the start address of the
  /// struct.  This allows the reference implementation to write
  /// property values into compile-time-defined C structs intelligible
  /// by the local machine and compiler.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pOffsets is a valid pointer.
  /// - numMembers matches the number of members defined for this
  ///   record type.
  /// - all types of the fields in this record already have their
  ///   offsets registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pOffsets\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - numMembers does not match number of members in this record
  ///     type.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///   - The type of any field in this record has not yet had its
  ///     offsets registered.
  ///
  /// AAFRESULT_DEFAULT_ALREADY_USED
  ///   - The default registration for this type has already been used
  ///     to persist or unpersist a property containing this type.)
AD_XCLASS_END(Concrete, StoredObject)
