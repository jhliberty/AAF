#c *********************************************************************
#c
#c $Id: AAFPluginDef.dod,v 1.21 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFPluginDef\
#endm
#c
#startm .parent-module 0
AAFDefObject\
#endm
#c
AD_HEAD
AD_IDL(///
/// An object which describes a particular implementation of a plug-in
/// interface.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFNetworkLocator)
AD_FORWARD_DECLARATION(AAFLocator)
AD_FORWARD_DECLARATION(EnumAAFPluginLocators)
AD_CLASS_UUID(AD1BB853, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AD1BB854, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,

			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			AUID for new DefObject,

			[in],
			objPass,
			aafCharacter_constptr,
			pName,
			Name for new DefObject,

			[in],
			objPass,
			aafCharacter_constptr,
			pDescription,
			Description for new DefObject,

			Init all fields of a definition object.)

AD_XMETHOD1(GetCategoryClass,
			[out],
			objPass,
			aafUID_t *,
			pCategoryClass,
			The CategoryClass,
     Obtains the Category Class\, which is identifies the stored
  /// classID of the subclass of AAFPluggableDefinition which
  /// references this plugin descriptor.  This ID is written into the
  /// caller-allocated aafUID_t specified by the pCategoryClass
  /// argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCategoryClass pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pCategoryClass.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCategoryClass arg is NULL.)


AD_XMETHOD1(SetCategoryClass,
			[in\, ref],
			objPass,
			aafUID_constref,
			categoryClass,
			The Category Class,
     Sets the Category Class\, which is identifies the stored classID
  /// of the subclass of AAFPluggableDefinition which references this
  /// plugin descriptor.
  /// 
  /// If this method fails the Category Class property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetPluginVersion,
			[out],
			objPass,
			aafVersionType_t *,
			pVersion,
			The Plugin Version,
     Gets the Plugin Version property associated with this plugin
  /// descriptor and places it into *pVersion. 
  ///
  /// Succeeds if all of the following are true:
  /// - the pVersion pointer is valid.
  /// 
  /// If this method fails\, nothing will be written to *pVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVersion arg is NULL.)


AD_XMETHOD1(SetPluginVersion,
			[in],
			objPass,
			aafVersionType_t *,
			pVersion,
			The plugin Version,
     Sets the plugin version property of this plugin descriptor.
  ///
  /// Succeeds if all of the following are true:
  /// - pVersion pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVersion arg is NULL.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(PluginVersionString,
     the Plugin Version String property.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(PluginManufacturerName,
     the Plugin Manufacturer Name string property.)


AD_XMETHOD1(GetManufacturerInfo,
			[out\, retval],
			objOut,
			AAFNetworkLocator,
			ppResult,
			ManufacturerInfo property value,

     This method will get an AAFNetworkLocator pointing to
  /// ManufacturerInfo for this plugin and place an interface for the
  /// locator into the **ppResult argument.  If a ManufacturerInfo
  /// locator exists\, the result will be AddRef\(\)ed. If not\, the
  /// result will be NULL.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppResult arg is NULL.)


AD_XMETHOD1(SetManufacturerInfo,
			[in],
			objIn,
			AAFNetworkLocator,
			pManufacturerInfo,
			ManufacturerInfo property value,
     This method will set a locator pointing to the location of
  /// ManufacturerInfo for this plugin.  If a ManufacturerInfo
  /// already exists for this mob slot\, it will be discarded.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetManufacturerID,
			[out],
			objPass,
			aafUID_t *,
			pManufacturerID,
			The ManufacturerID,
     Obtains the manufacturer ID\, which is identifies the manfacturer
  /// of this plugin.  This ID is written into the caller-allocated
  /// aafUID_t specified by the pManufacturerID argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pManufacturerID pointer is valid.
  /// 
  /// If this method fails nothing will be written to
  /// *pManufacturerID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pManufacturerID arg is NULL.)


AD_XMETHOD1(SetManufacturerID,
			[in\, ref],
			objPass,
			aafUID_constref,
			manufacturerID,
			The Category Class,
     Sets the manufacturer ID\, which is identifies the manufacturer
  /// of this plugin.
  /// 
  /// If this method fails the ManufacturerID property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetHardwarePlatform,
			[out],
			objPass,
			aafHardwarePlatform_t *,
			pHardwarePlatform,
			The HardwarePlatform,
     Obtains the hardware platform ID\, which identifies the hardware
  /// platform which is required to use this plugin.  This ID is
  /// written into the caller-allocated variable specified by the
  /// pHardwarePlatform argument. The type aafHardwarePlatform_t is an
  /// extensible enumerated type\, and the value given must be either
  /// standard or in the type dictionary.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pHardwarePlatform pointer is valid.
  /// 
  /// If this method fails nothing will be written to
  /// *pHardwarePlatform.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pHardwarePlatform arg is NULL.)


AD_XMETHOD1(SetHardwarePlatform,
			[in],
			objPass,
			aafHardwarePlatform_constref,
			hardwarePlatform,
			The Category Class,
     Sets the hardware platform ID\, which identifies the hardware
  /// platform which is required to use this plugin.  The type
  /// aafHardwarePlatform_t is an extensible enumerated type\, and the
  /// value given must be either standard or in the type dictionary.
  /// 
  /// If this method fails the HardwarePlatform property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD2(GetPlatformVersionRange,
			[out],
			objPass,
			aafVersionType_t *,
			pMinVersion,
			The Minimum Platform Version,

			[out],
			objPass,
			aafVersionType_t *,
			pMaxVersion,
			The Maximum Platform Version,

	 Gets the minimum and maximum platform Version properties
  /// associated with this plugin descriptor and places it into
  /// *pMinVersion\, and *pMaxVersion.  These are the minimum and
  /// maximum versions of the platform for which this plugin will
  /// function.
  ///
  /// Succeeds if all of the following are true:
  /// - both pMinVersion and pMaxVersion pointers are valid.
  /// 
  /// If this method fails\, nothing will be written to *pMinVersion or
  /// *pMaxVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMinVersion or pMaxVersion arg is NULL.)


AD_XMETHOD1(SetPlatformMinimumVersion,
			[in],
			objPass,
			aafVersionType_constref,
			minVersion,
			The Minimum Platform Version,
     Sets the maximum platform Version property of this plugin
  /// descriptor.  This is the minimum version of the platform for
  /// which this plugin will function.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(SetPlatformMaximumVersion,
			[in],
			objPass,
			aafVersionType_constref,
			maxVersion,
			The Maximum Platform Version,
     Sets the maximum platform Version properties associated with this
  /// plugin descriptor.  This is the maximum version of the platform
  /// for which this plugin will function.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetEngine,
			[out],
			objPass,
			aafEngine_t *,
			pEngine,
			The software engine,
     Obtains the software engine ID\, which identifies the software
  /// subsystem used for essence management and playback used by the
  /// plugin.  This ID is written into the caller-allocated variable
  /// specified by the pHardwarePlatform argument.  The type
  /// aafEngine_t is an extensible\, enumerated type\, and the value
  /// given must be either standard or in the type dictionary.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pHardwarePlatform pointer is valid.
  /// 
  /// If this method fails nothing will be written to
  /// *pHardwarePlatform.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEngine arg is NULL.)


AD_XMETHOD1(SetEngine,
			[in],
			objPass,
			aafEngine_constref,
			engine,
			The software engine,
     Sets the software engine ID\, which identifies the software
  /// subsystem used for essence management and playback used by the
  /// plugin.  The type aafEngine_t is an extensible enumerated type\,
  /// and the value given must be either standard or in the type
  /// dictionary.
  /// 
  /// If this method fails the engine property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD2(GetEngineVersionRange,
			[out],
			objPass,
			aafVersionType_t *,
			pMinVersion,
			The Minimum Engine Version,

			[out],
			objPass,
			aafVersionType_t *,
			pMaxVersion,
			The Maximum Engine Version,

	 Gets the minimum and maximum engine Version properties of the
  /// engine which is associated with this plugin and places it into
  /// *pMinVersion\, and *pMaxVersion.  These are the minimum and
  /// maximum versions of the engine for which this plugin will
  /// function.
  ///
  /// Succeeds if all of the following are true:
  /// - both pMinVersion and pMaxVersion pointers are valid.
  /// 
  /// If this method fails\, nothing will be written to *pMinVersion or
  /// *pMaxVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMinVersion or pMaxVersion arg is NULL.)


AD_XMETHOD1(SetEngineMinimumVersion,
			[in],
			objPass,
			aafVersionType_constref,
			minVersion,
			The Minimum Engine Version,

	 Sets the minimum engine Version property to the minimum useful
  /// version of the engine which is associated with this plugin.  This
  /// is the minimum version of the engine for which this plugin will
  /// function.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(SetEngineMaximumVersion,
			[in],
			objPass,
			aafVersionType_constref,
			pMaxVersion,
			The Minimum Engine Version,

	 Sets the minimum engine Version property to the maximum useful
  /// version of the engine which is associated with this plugin.  This
  /// is the maximum version of the engine for which this plugin will
  /// function.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetPluginAPI,
			[out],
			objPass,
			aafPluginAPI_t *,
			pPluginAPI,
			The PluginAPI,
     Obtains the manufacturer ID Class\, which identifies the plugin
  /// interface supported by the plugin.  This ID is written into the
  /// caller-allocated variable specified by the pPluginAPI argument.
  /// The type aafPluginAPI_t is an extensible enumerated type\, and
  /// the value given must be either standard or in the type
  /// dictionary.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pPluginAPI pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pPluginAPI.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPluginAPI arg is NULL.)


AD_XMETHOD1(SetPluginAPI,
			[in],
			objPass,
			aafPluginAPI_constref,
			pluginAPI,
			The Category Class,

	 Obtains the manufacturer ID\, which identifies the plugin
  /// interface supported by the plugin.
  /// 
  /// The type aafPluginAPI_t is an extensible enumerated type\, and
  /// the value given must be either standard or in the type dictionary.
  /// 
  /// If this method fails the PluginAPI property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD2(GetPluginAPIVersionRange,
			[out],
			objPass,
			aafVersionType_t *,
			pMinVersion,
			The Minimum Plugin API Version,

			[out],
			objPass,
			aafVersionType_t *,
			pMaxVersion,
			The Maximum Plugin API Version,

	 Gets the minimum and maximum plugin API Version properties of the
  /// plugin API which is associated with this plugin descriptor and
  /// places it into *pMinVersion\, and *pMaxVersion.  These are the
  /// minimum and maximum versions of the PluginAPI for which this
  /// plugin will function.
  ///
  /// Succeeds if all of the following are true:
  /// - both pMinVersion and pMaxVersion pointers are valid.
  /// 
  /// If this method fails\, nothing will be written to *pMinVersion or
  /// *pMaxVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMinVersion or pMaxVersion arg is NULL.)


AD_XMETHOD1(SetPluginAPIMinimumVersion,
			[out],
			objPass,
			aafVersionType_constref,
			minVersion,
			The Minimum Plugin API Version,

	 Sets the minimum plugin API Version property to the minimum
  /// useful version of the plugin API which is associated with this
  /// plugin.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(SetPluginAPIMaximumVersion,
			[in],
			objPass,
			aafVersionType_constref,
			maxVersion,
			The Maximum Plugin API Version,

	 Sets the maximum engine Version property to the maximum useful
  /// version of the plugin API which is associated with this plugin.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(IsSoftwareOnly,
			[out],
			objPass,
			aafBoolean_t *,
			pIsSoftwareOnly,
			The IsSoftwareOnly,

	 Tells whether the given plugin is capable of running in a
  /// software-only environment.  A value of AAFTrue indicates that no
  /// additional hardware is required.  If the result is AAFTrue\, then
  /// this plugin may also support hardware acceleration\, as long as
  /// it also contains a software method of processing the data.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pIsSoftwareOnly pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsSoftwareOnly.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIsSoftwareOnly arg is NULL.)


AD_XMETHOD1(SetIsSoftwareOnly,
			[in],
			enumIn,
			aafBoolean_t,
			isSoftwareOnly,
			The isSoftwareOnly flag,

	 Sets whether the given plugin is capable of running in a
  /// software-only environment\, and returns AAFFalse if any hardware
  /// is required.  If isSoftwareOnly is AAFTrue\, then this plugin may
  /// also support hardware acceleration\, as long as it also contains
  /// a software method of processing the data.  If this method fails
  /// the isSoftwareOnly property will not be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(IsAccelerated,
			[out],
			objPass,
			aafBoolean_t *,
			pIsAccelerated,
			The IsAccelerated,

	 Tells whether the given plugin is capable of running with a
  /// hardware accelerator.  If the result is AAFTrue\, then this
  /// plugin may also support software decompression.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pIsAccelerated pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsAccelerated.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIsAccelerated arg is NULL.)


AD_XMETHOD1(SetIsAccelerated,

			[in],
			enumIn,
			aafBoolean_t,
			isAccelerated,
			The isAccelerated flag,

	 Tells whether the given plugin is capable of running with a
  /// hardware accelerator.  If the result is AAFTrue\, then this
  /// plugin may also support software decompression.
  ///
  /// If this method fails the IsAccelerated property will not be
  /// changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(SupportsAuthentication,
			[out],
			objPass,
			aafBoolean_t *,
			pSupportsAuthentication,
			The SupportsAuthentication,

	 Tells whether the given plugin is capable of supporting
  /// authentication.  The methods for authenticating a plugin are
  /// still <tbd>.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSupportsAuthentication pointer is valid.
  /// 
  /// If this method fails nothing will be written to
  /// *pSupportsAuthentication.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSupportsAuthentication arg is NULL.)


AD_XMETHOD1(SetSupportsAuthentication,
			[in],
			enumIn,
			aafBoolean_t,
			SupportsAuthentication,
			The SupportsAuthentication flag,

	 Tells whether the given plugin is capable of supporting
  /// authentication.  The methods for authenticating a plugin are
  /// still <tbd>.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)



AD_XMETHOD1(CountLocators,

			[out],
			objPass,
			aafUInt32 *,
			pResult,
			Returns the number of locators,

     Return the number of locators attached to this plugin descriptor.
  /// The number of locators may be zero if the plugin is in the
  /// current file.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCount pointer is valid.
  /// 
  /// If this method fails nothing is written to *pCount.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD1(AppendLocator,
			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to append,

     Append another locator to this plugin descriptor.  Use this
  /// function to add a locator to be scanned last when searching for
  /// the plugin \(a secondary location for the plugin\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.)


AD_XMETHOD1(PrependLocator,
			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to append,

     Append another locator to this plugin descriptor.  Use this
  /// function to add a locator to be scanned first when searching for
  /// the plugin \(a new primary location for the plugin\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.)


AD_XMETHOD2(InsertLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index to insert locator,

			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to insert,

     Insert another locator to this plugin descriptor at the given
  /// index.  Locators already existing at the named and higher indices
  /// will be moved up to the next higher index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than or equal to the value returned by
  ///   CountLocators\(\).
  /// - the pLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountLocators\(\).)


AD_XMETHOD2(GetLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index to insert locator,

			[out],
			objOut,
			AAFLocator,
			ppLocator,
			returned Locator,

     Gets the locator which exists in this plugin descriptor at the
  /// given index.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountLocators\(\).
  /// - the ppLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppLocator is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountLocators\(\).)


AD_XMETHOD1(RemoveLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index to insert locator,

     Removes the locator which exists in this plugin descriptor at the
  /// given index.  Locators already existing at indices higher than
  /// the named index will be moved down to the next higher index to
  /// accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountLocators\(\).
  /// - the ppLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppLocator is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountLocators\(\).)



AD_XMETHOD1(GetLocators,
			[out\, retval],
			objOut,
			EnumAAFPluginLocators,
			ppEnum,
			Plugin Locator Enumeration,
     Places an IEnumAAFPluginLocators enumerator for the plugin
  /// locators contained in the AAFPluginDescriptor into the *ppEnum
  /// argument.
  /// 
  /// The returned enumerator is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.
  ///
  /// E_FAIL
  ///   - Failed to create the enumerator.)

  AD_XMETHOD1(SetDefinitionObjectID,
		   [in],
		   objPass,
		   aafUID_t,
		   pDef,
		   AUID of an AAFDefinitionObject,
		   Sets the definition object handled by this plugin.)

  AD_XMETHOD1(GetDefinitionObjectID,
		   [retval\,out],
		   objPass,
		   aafUID_t*,
		   ppDef,
		   AUID of an AAFDefinitionObject,
		   Gets the definition object handled by this plugin.)

AD_XCLASS_END(Concrete, StoredObject)

