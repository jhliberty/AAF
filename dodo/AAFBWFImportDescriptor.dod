#c *********************************************************************
#c
#c $Id: AAFBWFImportDescriptor.dod,v 1.7 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFBWFImportDescriptor\
#endm
#c
#startm .parent-module 0
AAFImportDescriptor\
#endm
#c
#c #import ./AAFImportDescriptor.exp
AD_HEAD
AD_IDL(///
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - Insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it.
///)

AD_CLASS_UUID(dc86b358, 86a6, 4d2d, 8b, 09, ef, f3, ce, 3e, 66, db)

AD_DEFAULT_UUID(480b4328, da10, 44d4, bb, 50, 1b, af, bf, ba, f8, 6a)

AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  /// IAAFBWFImportDescriptor-supporting object.  This method must be
  /// called after allocation\, and before any other method can be
  /// called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(SetFileSecurityReport,
			[in],
				objPass,
				aafUInt32,
				fileSecurityReport,
				value to assign to the FileSecurityReport property,
				Sets the fileSecurityReport property. This is an optional property.
  /// 
  /// If this method fails\, the FileSecurityReport property will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///)


AD_XMETHOD1(GetFileSecurityReport,
                        [out],
                                objPass,
                                aafUInt32 *,
                                pFileSecurityReport,
                                value of the FileSecurityReport property,
                        Gets the FileSecurityReport property.
  ///
  /// Succeeds if all of the following are true:
  /// - pFileSecurityReport is a valid pointer
  /// - the property is present.
  ///
  /// If this method fails\, pFileSecurityReport will not be changed.
  ///
  /// This method will return the following codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileSecurityReport is NULL.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - the property is not present.)


AD_XMETHOD1(SetFileSecurityWave,
			[in],
				objPass,
				aafUInt32,
				fileSecurityWave,
				value to assign to the FileSecurityWave property,
				Sets the FileSecurityWave property. This is an optional property.
  /// 
  /// If this method fails\, the FileSecurityWave property will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///)


AD_XMETHOD1(GetFileSecurityWave,
                        [out],
                                objPass,
                                aafUInt32 *,
                                pFileSecurityWave,
                                value of the FileSecurityWave property,
                        Gets the FileSecurityWave property.
  ///
  /// Succeeds if all of the following are true:
  /// - pFileSecurityWave is a valid pointer
  /// - the property is present.
  ///
  /// If this method fails\, pFileSecurityWave will not be changed.
  ///
  /// This method will return the following codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileSecurityWave is NULL.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - the property is not present.)


AD_XMETHOD1(CountUnknownBWFChunks,
			[out],
			objPass,
			aafUInt32 *,
			pNumData,
			Number  of RIFFChunk objects,
			Return total number of RIFFChunk objects attached to this component.
  ///
  /// Succeeds if all of the following are true:
  /// - the pNumData pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pNumComments.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumData arg is NULL.)

AD_XMETHOD1(AppendUnknownBWFChunk,
			[in],
			objIn,
			AAFRIFFChunk,
			pData,
			RIFFChunk object to append,
			Appends a pre-existing RIFFChunk object to end of this
  /// BWFImportDescriptor\'s list of UnknownBWFChunks.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pData pointer is valid.
  /// - the pData pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - the pData arg is NULL.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pData is already owned by this
  ///      or another object.)
  

AD_XMETHOD1(PrependUnknownBWFChunk,
			[in],
			objIn,
			AAFRIFFChunk,
			pData,
			RIFFChunk object to prepend,
			Prepends a pre-existing RIFFChunk object to the
  /// beginning of this BWFImportDescriptor\'s list of UnknownBWFChunks.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pData pointer is valid.
  /// - the pData pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pData is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pData is already owned by this
  ///      or another object.)



AD_XMETHOD2(InsertUnknownBWFChunkAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index at which chunk is to be inserted,

			[in],
			objIn,
			AAFRIFFChunk,
			pData,
			RIFFChunk to append,

     Inserts the given RIFFChunk at the given index in this 
  /// BWFImportDescriptor\'s list of UnknownBWFChunks.  Chunks already
  /// existing at the given and higher indices will be moved to the
  /// next higher index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pData pointer is valid.
  /// - the pData pointer indicates an object which is not already
  ///   owned by any object
  /// - index is less than or equal to the value returned by
  ///   CountUnknownBWFChunks\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pData is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pData is already owned by this
  ///      or another object.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountUnknownBWFChunks\(\).)


AD_XMETHOD2(GetUnknownBWFChunkAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of chunk to retrieve,

			[out\, retval],
			objOut,
			AAFRIFFChunk,
			ppData,
			returned RIFFChunk,

     Retrieves the RIFFChunk at the given index in this BWFImportDescriptor\'s
  /// list of UnknownBWFChunks.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pData pointer is valid.
  /// - index is less than the value returned by CountUnknownBWFChunks\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppData is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountUnknownBWFChunks\(\).)


AD_XMETHOD1(RemoveUnknownBWFChunkAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of chunk to remove,

     Removes the RIFFChunk at the given index in this BWFImportDescriptor\'s
  /// list of UnknownBWFChunks.  Chunks already
  /// existing at indices higher than the given index will be moved to
  /// the next lower index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountUnknownBWFChunks\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountUnknownBWFChunks\(\).)


AD_XMETHOD1(GetUnknownBWFChunks,
			[out],
			objOut,
			EnumAAFRIFFChunks,
			ppEnum,
			RIFFChunk objects,
			Return the enumeration for all RIFFChunk objects on this component.  The returned
  /// enumerator is AddRef\(\)ed before it is returned.  The enumerator
  /// is implemented as an EnumAAFRIFFChunks.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(CodingHistory,
     the CodingHistory string property.)
     
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(BasicData,
     the BasicData string property.)

AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(StartOfModulation,
     the StartOfModulation string property.)
     
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(QualityEvent,
     the QualityEvent string property.)

AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(EndOfModulation,
     the EndOfModulation string property.)
     
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(QualityParameter,
     the QualityParameter string property.)
     
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(OperatorComment,
     the OperatorComment string property.)
     
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(CueSheet,
     the CueSheet string property.)

AD_XCLASS_END(Concrete, StoredObject)
