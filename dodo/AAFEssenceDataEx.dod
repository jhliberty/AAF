#c *********************************************************************
#c
#c $Id: AAFEssenceDataEx.dod,v 1.5 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceDataEx\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
AD_HEAD

AD_IDL(///
///
/// This interface is DEPRECATED\, please use IAAFEssenceData2.
///
/// The IAAFEssenceData interface is used to modify AAFEssenceData
/// objects\, which contain the actual essence data \(ex. WAVE\) when
/// it is contained within an AAF file.  Normally the client
/// application would access the essence through the IAAFEssenceAccess
/// interface\, which handles the work of finding and \(de\)compressing
/// the data.  However\, in rare cases direct access to the data is
/// required\, so this interface is exposed.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
///
/// AAFRESULT_NULL_PARAM
///   - One of the passed in pointers is NULL.
///
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_CLASS_UUID(47C2B646, 9A9, 4B36, 8A, F6, 60, 9F, 5E, 85, 2, 84)

AD_DEFAULT_UUID(d919d41f, 979b, 4aba, 97, 85, 8e, c3, 19, db, a4, 48)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD1(Initialize,
[in],
objIn,
AAFSourceMob,
pFileMob,
reference to a file mob,
     Associates a weak reference to the given file mob with the
  /// essence data.
  ///
  /// Succeeds if all of the following are true:
  /// - the pFileMob pointer is valid and points to 
  /// a file mob \(contains a file descriptor\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileMob is null.)

AD_METHOD3(Write,
[in],aafUInt32, bytes, write this many bytes to the data stream,
[out\\\, size_is\\\(bytes\\\)],aafDataBuffer_t,buffer, here is the buffer,
[out\\\,ref],aafUInt32 *,bytesWritten,,
Write pre-interleaved data to a essence stream.)


AD_METHOD3(Read,
[in],aafUInt32, bytes, read this many bytes from the data stream,
[out\\\, size_is\\\(bytes\\\)\\\, length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer, here is the buffer,
[out\\\,ref],aafUInt32 *,bytesRead,,
Read pre-interleaved data from a essence stream.)


AD_METHOD1(SetPosition,
[in], aafPosition_t, offset, offset from beginning of essence,
Seek to absolute position within the essence data.)


AD_METHOD1(GetPosition,
[out], aafPosition_t*, pOffset, offset from beginning of essence,
Get the absolute position within the essence data.)


AD_METHOD1(GetSize,
[out], aafLength_t *, pSize , size of essence data,
Return the total size of the essence data.)

AD_METHOD3(WriteSampleIndex,
[in],aafUInt32, bytes, write this many bytes to the sample index stream,
[out\\\, size_is\\\(bytes\\\)],aafDataBuffer_t,buffer, here is the buffer,
[out\\\,ref],aafUInt32 *,bytesWritten,,
Write pre-interleaved data to a sample index stream.)


AD_METHOD3(ReadSampleIndex,
[in],aafUInt32, bytes, read this many bytes from the sample index stream,
[out\\\, size_is\\\(bytes\\\)\\\, length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer, here is the buffer,
[out\\\,ref],aafUInt32 *,bytesRead,,
Read pre-interleaved data from a sample index stream.)


AD_METHOD1(SetSampleIndexPosition,
[in], aafPosition_t, offset, offset from beginning of sample index,
Seek to absolute position within the sample index data.)


AD_METHOD1(GetSampleIndexPosition,
[out], aafPosition_t*, pOffset, offset from beginning of sample index,
Get the absolute position within the sample index data.)


AD_METHOD1(GetSampleIndexSize,
[out], aafLength_t *, pSize , size of sample index data,
Return the total size of the sample index data.)


AD_XMETHOD1(SetFileMob,
[in],
objIn,
AAFSourceMob,
pFileMob,
reference to a file mob,
     Associates a weak reference to the given file mob with the
  /// essence data.
  ///
  /// Succeeds if all of the following are true:
  /// - the pFileMob pointer is valid and points to 
  /// a file mob \(contains a file descriptor\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileMob is null.)


AD_XMETHOD1(GetFileMob,
[in],
objOut,
AAFSourceMob,
ppFileMob,
reference to a file mob,
     Associates a weak reference to the given file mob with the
  /// essence data.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppFileMob pointer is valid and a weak
  /// reference to the associated file mob can be
  /// resolved.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppFileMob is null.)


AD_METHOD1(GetFileMobID,
[out], aafMobID_t *, pFileMobID, the file mob id associated with essence,
     Return the mob id used to find the file mob associated with this
  /// essence.  The file mob must exist in the same file as this
  /// essence data.)

AD_XCLASS_END(Abstract, Transient)
