#c *********************************************************************
#c
#c $Id: AAFTypeDefStream.dod,v 1.20 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefStream\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#c #import ./AAFTypeDef.exp
#import ./AAFTypeDefStreamEx.exp
#import ./AAFTypeDefStream3.exp
AD_HEAD
AD_IDL(///
/// AAFTypeDefStream is DEPRECATED\, please use AAFTypeDefStream3
///
/// This interface is used to define Stream types used in AAF
/// persistent objects.  Streams are conceptually similar to
/// variably-sized arrays except that they are intended to be used for
/// very large pieces of data \(such as essence\).
/// Note: All reads/and writes advance the current position.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPlainStreamData)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(307e9e6d, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(307e9e6e, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)
#c AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_COM_EXT2_CLASS_BEGIN(public IAAFTypeDefStreamEx, public IAAFTypeDefStream3)

AD_XMETHOD2(GetSize,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[out],
			objPass,
			aafInt64 *,
			pSize,
			count of bytes in the specified stream property value,

     Returns number of bytes contained in the referenced property
  /// value.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - pSize is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pStreamPropertyValue or pSize\))

AD_XMETHOD2(SetSize,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[in],
			objPass,
			aafInt64,
			newSize,
			new count of bytes in the specified stream property value,

     Set the number of bytes contained in the give stream property value
  /// to newElementCount
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(If pStreamPropertyValue\))

AD_XMETHOD2(GetPosition,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[out],
			objPass,
			aafInt64 *,
			pPosition,
			current byte position in the specified stream property value,

     Returns the byte position of the current element in the stream. 
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - pPosition is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pStreamPropertyValue or pPosition\))

AD_XMETHOD2(SetPosition,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[in],
			objPass,
			aafInt64,
			newPosition,
			the new position in the specified stream property value,

     Make the current byte position to the one at newPosition in the stream 
  /// property value. 
  ///
  /// Succeeds if:
  /// - pStreamPropertyValue is a valid pointer.
  /// - the new position is valid
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(If pStreamPropertyValue\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - newPosition is outside the bounds of the stream.)


AD_XMETHOD4(Read,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to read,

			[out\, size_is\(dataSize\)\, length_is\(*bytesRead\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which one element from the stream should be written,

			[out\,ref],
			objPass,
			aafUInt32 *,
			bytesRead,
			number of bytes actually read \(will be either dataSize or 0 if there 
  /// is in error\),

     Sequential access.
  /// Copies the data at the position of the stream to the given
  /// buffer.
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pData pointer is valid.
  /// - the indicated bytes exist in the stream.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pStreamPropertyValue or pData\))

AD_XMETHOD3(Write,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to modify,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to write,

			[in\, ref\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which should contain one element to be written to the stream,

     Sequential access.
  /// Copies the data in the given buffer into the stream at the 
  /// current position of the stream..
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pData pointer is valid.
  /// - the indicated bytes could be written to the stream.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pStreamPropertyValue or pData\))

AD_XMETHOD3(Append,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to modify,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to write \(must be equal to the element type length\),

			[in\, ref\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which should contain one element to be written to the stream,

     Extending the stream.
  /// Copies the data in the given buffer into the stream at the 
  /// end of the stream.
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pData pointer is valid.
  /// - the indicated bytes could be appended to the stream.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pStreamPropertyValue or pData\))


AD_XMETHOD2(HasStoredByteOrder,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[out],
			objPass,
			aafBoolean_t *,
			pHasByteOrder,
			kAAFTrue if this stream has a stored byte order,

     Returns kAAFTrue if the stream has a stored byte order or 
  /// kAAFFalse otherwise.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - pHasByteOrder is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pStreamPropertyValue or pHasByteOrder\))

AD_XMETHOD2(GetStoredByteOrder,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[out],
			objPass,
			eAAFByteOrder_t *,
			pByteOrder,
			Pointer to variable where byte order is to be copied,

     Access byte order of the stream.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - pByteOrder is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pStreamPropertyValue or pByteOrder\))

AD_XMETHOD2(SetStoredByteOrder,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

			[in],
			enumIn,
			eAAFByteOrder_t,
			byteOrder,
			byte order is to be stored with the stream,

     Sets the byte order to be associated with this stream. Note: the stream
  /// must be empty.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - stream is empty.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(If pStreamPropertyValue\))

AD_XMETHOD1(ClearStoredByteOrder,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value,

     Clears the byte order to be associated with this stream. Note: the stream
  /// must be empty.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pStreamPropertyValue is a valid pointer.
  /// - stream is empty.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(If pStreamPropertyValue\))

AD_XMETHOD5(ReadElements,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to read,

			[in],
			objIn,
			AAFTypeDef,
			pElementType,
			the type definition of the elements to read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to read \(must be evenly divisible by the element 
  /// type length\),

			[out\, size_is\(dataSize\)\, length_is\(*pBytesRead\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which elements from the stream should be written,

			[out\,ref],
			objPass,
			aafUInt32 *,
			pBytesRead,
			number of bytes actually read \(will be either dataSize or 0 if 
  /// there is in error\),

     Access in typed chunks of Elements.
  /// Copies the data at the current position of the stream to the given
  /// buffer. Requires that any structures declared within element 
  /// typedef have had their offsets registered with that type.
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pElementType pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData is large enough to hold the data.
  /// - compile-time struct has had its member offests registered.
  /// - the indicated elements exist in this stream type def.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pStreamPropertyValue or pElementType or pBytesRead or pData\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - dataSize indicates pData is too small.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for element typedef.
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - there are not dataSize bytes left in the stream.)

AD_XMETHOD4(WriteElements,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to modify,

			[in],
			objIn,
			AAFTypeDef,
			pElementType,
			the type definition of the elements to read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to write \(must be evenly divisible by the element type 
  /// length\),

			[in\, ref\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which elements from the stream should be written,

     Access in typed chunks of Elements.
  /// Copies the data in the given buffer into the stream at the  
  /// current position of the stream. Requires that any structures 
  /// declared within element 
  /// typedef have had their offsets registered with that type..
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pElementType pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData is large enough to hold the data.
  /// - compile-time struct has had its member offests registered.
  /// - the indicated elements exist in this stream type def.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pStreamPropertyValue or pElementType or pData\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - dataSize indicates pData is an even multiple of the given 
  ///     element type size.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for the element typedef.)


AD_CPP_QUOTE(\  /// Extend in chunks of typed Elements)

AD_XMETHOD4(AppendElements,
			[in],
			objIn,
			AAFPropertyValue,
			pStreamPropertyValue,
			stream property value to modify,

			[in],
			objIn,
			AAFTypeDef,
			pElementType,
			the type definition of the elements to read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			number of bytes to write \(must be evenly divisible by the element type 
  /// length\),

			[in\, ref\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which elements from the stream should be written,

     Access in typed chunks of Elements.
  /// Copies the data in the given buffer onto the end of the stream. 
  /// Requires that any structures declared within element 
  /// typedef have had their offsets registered with that type..
  ///
  /// Succeeds if all of the following are true:
  /// - the pStreamPropertyValue pointer is valid.
  /// - the pElementType pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData is large enough to hold the data.
  /// - compile-time struct has had its member offests registered.
  /// - the indicated elements exist in this stream type def.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pStreamPropertyValue or pElementType or pData\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - dataSize indicates pData is an even multiple of the given 
  ///     element type size.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for the element typedef.)
AD_OVERRIDE(.method-GetTypeCategory)
AD_COM_METH(.method-SetCallback)
AD_COM_METH(.method-GetPlainStreamData)

#c AD_XCLASS_END(Concrete, StoredObject)
AD_COM_EXT2_CLASS_END(AAFTypeDefStreamEx, AAFTypeDefStream3)
