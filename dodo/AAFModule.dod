#c *********************************************************************
#c
#c $Id: AAFModule.dod,v 1.34 2012/06/26 20:51:50 jptrainor Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFModule\
#endm
AD_IDL(\  ///***********************************************************
  ///
  /// Global functions for AAF files:
  /// 
  /// In addition to the specific error results listed for each function\,
  /// all factory functions may also return one of the following
  /// values:
  /// 
  /// AAFRESULT_NOMEMORY
  ///   - insufficient system memory is available to perform the
  ///     operation.
  ///)

AD_MODULE_BEGIN(AAF, API)

AD_CPP_QUOTE(\  ///***********************************************************)
AD_CPP_QUOTE(\  /// Functions used to dynamically load and unload the AAF dll)
AD_CPP_QUOTE(\  /// without statically linking to the dll's export library.)
AD_CPP_QUOTE(\  /// To use these functions link to the stub library aaf.lib)
AD_CPP_QUOTE(\  /// \(or aafd.lib for the debugging version\). )
AD_CPP_QUOTE(\  /// If the client is statically linking to the AAF dll's export)
AD_CPP_QUOTE(\  /// library then the following functions will always succeed:)
AD_CPP_QUOTE(\  ///***********************************************************)

AD_XFUNCTION1(AAFLoad,
			[in],
			  objPass,
			  const char *,
			  dllname,
			  Pointer to the name of AAF dll to load.
  /// If this pointer is NULL the function will attempt to load the
  /// default AAF dll.,
			Attempts to load the given implementation of AAF into
  /// the processes address space. Only one implementation
  /// of AAF can be active. Note: once AAFUnload has been
  /// called all subsequent access to AAF interfaces will fail
  ///
  /// To use this function link to the stub library aaf.lib
  /// \(or aafd.lib for the debugging version\). 
  /// If the client is statically linking to the AAF dll's export
  /// library then the function will always succeed.)


AD_FUNCTION0(AAFUnload,
			Attempts to unload the current AAF dll loaded with a
  /// previous call to AAFLoad.)


AD_CPP_QUOTE(\  ///***********************************************************)
AD_CPP_QUOTE(\  /// Factory functions for AAF files:.)
AD_CPP_QUOTE(\  ///***********************************************************)

AD_XFUNCTION3(AAFFileOpenExistingRead,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file to be
  /// opened for reading. The file name has no restrictions other than those imposed by
  /// the underlying file system. AAF files that use structured storage encoding typically
  /// use the extension .aaf or .isr. AAF files that use XML encoding typically use the .xml
  /// extension. AAF files that use KLV encoding typically use use the extension .mxf or .klv.,
			[in],
			  objPass,
			  aafUInt32,
			  modeFlags,
			  File open mode flags.  May be any of the following ORed
  /// together.  All other bits must be set to zero.
  ///
  ///  - kAAFFileModeUnbuffered - to indicate buffered mode.  Default
  ///    is buffered.,

			[out],
			  objOut,
			  AAFFile,
			  ppFile,
			  Pointer to buffer to receive pointer to new file.,
			Creates an object associated with with an existing filesystem
  /// file that contains data which is only to be read.
  /// Does the following:
  ///
  /// - Opens the existing named file in the filesystem for reading.
  /// - Associates an object with that filesystem file.
  /// - Places the object into the Open-read-only state.
  /// - This AAFFile object then can be used as the root of the
  ///   containment tree representing all AAF objects contained within the file.
  ///
  /// Succeeds if:
  /// - The pFileName argument is valid.
  /// - Only valid flags have been specified.
  /// - A valid combination of flags has been specified.
  /// - The named file exists in the filesystem.
  /// - The named filesystem file is readable.
  /// - The named file represents itself as a valid AAF file.  Even if
  ///   this succeeds\, it is not guaranteed that the named file is in fact a valid AAF file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - the pFileName pointer arg is NULL.
  ///
  /// AAFRESULT_BAD_FLAGS
  ///   - one or more illegal flags were specified.
  ///
  /// AAFRESULT_BAD_FLAG_COMBINATION
  ///   - illegal combination of otherwise valid flags was specified.
  ///
  /// AAFRESULT_FILE_NOT_FOUND
  ///   - The named file does not exist in the filesystem.
  ///
  /// AAFRESULT_NOT_READABLE
  ///   - The named file cannot be read.
  ///
  /// AAFRESULT_NOT_AAF_FILE
  ///   - The named file does not claim to be a valid AAF file.)


AD_XFUNCTION4(AAFFileOpenExistingModify,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file to be
  /// opened for modification. The file name has no restrictions other than those imposed by
  /// the underlying file system. AAF files that use structured storage encoding typically
  /// use the extension .aaf or .isr. AAF files that use XML encoding typically use the .xml
  /// extension. AAF files that use KLV encoding typically use use the extension .mxf or .klv.,
			[in],
			  objPass,
			  aafUInt32,
			  modeFlags,
			  File open mode flags.  May be any of the following ORed together.
  /// All other bits must be set to zero.
  ///
  ///  - kAAFFileModeUnbuffered
  ///    to indicate unbuffered mode. Default is buffered.
  ///  - kAAFFileModeRevertable
  ///    to indicate that Revert is possible on this file \(for all changes except those to essence\).,

			[in],
			  objPass,
			  aafProductIdentification_t *,
			  pIdent,
			  Identification of the application which is modifying this file.,
			[out],
			  objOut,
			  AAFFile,
			  ppFile,
			  Pointer to buffer to receive pointer to new file.,
			Creates an object associated with with an existing
  /// filesystem file that contains data which is to be read and
  /// written.  Associates the given identification with it.
  /// Does the following:
  ///
  /// - Opens the existing named file in the filesystem for reading and
  ///   writing.
  /// - Associates an object with that filesystem file.
  /// - Places the object into the Open-read-write  state.
  /// - This AAFFile object then can be used as the root of the
  ///   containment tree representing all AAF objects contained within the file.
  ///
  /// Succeeds if:
  /// - This object is currently Closed.
  /// - The pFileName argument is valid.
  /// - The pIdent argument is valid.
  /// - Only valid flags have been specified.
  /// - A valid combination of flags has been specified.
  /// - The named file exists in the filesystem.
  /// - The named filesystem file is readable.
  /// - The named filesystem file is writable.
  /// - The named file represents itself as a valid AAF file.  Even if
  ///   this succeeds\, it is not guaranteed that the named file is in fact a valid AAF file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pFileName or pIdent pointer argument is NULL.
  ///
  /// AAFRESULT_BAD_FLAGS
  ///   - one or more illegal flags were specified.
  ///
  /// AAFRESULT_BAD_FLAG_COMBINATION
  ///   - illegal combination of otherwise valid flags was specified.
  ///
  /// AAFRESULT_FILE_NOT_FOUND
  ///   - The named file does not exist in the filesystem.
  ///
  /// AAFRESULT_NOT_READABLE
  ///   - The named file cannot be read.
  ///
  /// AAFRESULT_NOT_WRITEABLE
  ///   - The named file cannot be written.
  ///
  /// AAFRESULT_NOTAAFFILE
  ///   - The named file is not a valid AAF file.)


AD_XFUNCTION4(AAFFileOpenNewModify,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file to be
  /// opened for modification. The file name has no restrictions other than those imposed by
  /// the underlying file system. AAF files that use structured storage encoding typically
  /// use the extension .aaf or .isr. AAF files that use XML encoding typically use the .xml
  /// extension. AAF files that use KLV encoding typically use use the extension .mxf or .klv.,
			[in],
			  objPass,
			  aafUInt32,
			  modeFlags,
			  File open mode flags.  May be any of the following ORed together.
  /// All other bits must be set to zero.
  ///
  ///  - kAAFFileModeUnbuffered
  ///    to indicate unbuffered mode. Default is buffered.
  ///  - kAAFFileModeRevertable
  ///    to indicate that Revert is possible on this file \(for all changes except those to essence\).,
			[in],
			  objPass,
			  aafProductIdentification_t *,
			  pIdent,
			  Identification of the application which is creating this file.,
			[out],
			  objOut,
			  AAFFile,
			  ppFile,
			  Pointer to buffer to receive pointer to new file.,
			Creates an object associated with with a new
  /// filesystem file that contains data which is to be read and
  /// written.  Associates the given identification with it.
  /// Does the following:
  ///
  /// - Creates a new file in the filesystem with the given name.
  /// - Opens the filesystem file for reading and writing.
  /// - Associates this object with that filesystem file.
  /// - Places this object into the Open state.
  /// - This AAFFile object then can be used as the root of the
  ///   containment tree representing all AAF objects contained within the file.
  ///
  /// Succeeds if:
  /// - The pFileName argument is valid.
  /// - The pIdent argument is valid.
  /// - Only valid flags have been specified.
  /// - A valid combination of flags has been specified.
  /// - The named file does not exists in the filesystem.
  /// - There is sufficient space in the filesystem to create the file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pFileName or pIdent pointer argument is NULL.
  ///
  /// AAFRESULT_BAD_FLAGS
  ///   - one or more illegal flags were specified.
  ///
  /// AAFRESULT_BAD_FLAG_COMBINATION
  ///   - illegal combination of otherwise valid flags was specified.
  ///
  /// AAFRESULT_FILE_EXISTS
  ///   - The named file already exists in the filesystem.
  ///
  /// AAFRESULT_INSUFFICIENT_SPACE
  ///   - There is insufficient space in the filesystem to create this
  ///     file.)


AD_XFUNCTION5(AAFFileOpenNewModifyEx,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file to be
  /// opened for modification. The file name has no restrictions other than those imposed by
  /// the underlying file system. AAF files that use structured storage encoding typically
  /// use the extension .aaf or .isr. AAF files that use XML encoding typically use the .xml
  /// extension. AAF files that use KLV encoding typically use use the extension .mxf or .klv.,
			[in],
			  objPass,
			  aafUID_constptr,
			  pFileKind,
			  kind of file to be created,
			[in],
			  objPass,
			  aafUInt32,
			  modeFlags,
			  File open mode flags,
			[in],
			  objPass,
			  aafProductIdentification_t *,
			  pIdent,
			  Identification of the application which is creating this file.,
			[out],
			  objOut,
			  AAFFile,
			  ppFile,
			  Pointer to buffer to receive pointer to new file.,
			Creates an object associated with with a new
  /// filesystem file that contains data which is to be read and
  /// written.  Associates the given identification with it.
  /// Does the following:
  ///
  /// - Creates a new file in the filesystem with the given name.
  /// - Opens the filesystem file for reading and writing.
  /// - Associates this object with that filesystem file.
  /// - Places this object into the Open state.
  /// - This AAFFile object then can be used as the root of the
  ///   containment tree representing all AAF objects contained within the file.
  ///
  /// Succeeds if:
  /// - The pFileName argument is valid.
  /// - The pFileKind argument is valid.
  /// - The pIdent argument is valid.
  /// - Only valid flags have been specified.
  /// - A valid combination of flags has been specified.
  /// - The named file does not exists in the filesystem.
  /// - There is sufficient space in the filesystem to create the file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pFileName or pIdent pointer argument is NULL.
  ///
  /// AAFRESULT_BAD_FLAGS
  ///   - one or more illegal flags were specified.
  ///
  /// AAFRESULT_BAD_FLAG_COMBINATION
  ///   - illegal combination of otherwise valid flags was specified.
  ///
  /// AAFRESULT_FILE_EXISTS
  ///   - The named file already exists in the filesystem.
  ///
  /// AAFRESULT_INSUFFICIENT_SPACE
  ///   - There is insufficient space in the filesystem to create this
  ///     file.)


AD_XFUNCTION2(AAFFileOpenTransient,
			[in],
			  objPass,
			  aafProductIdentification_t *,
			  pIdent,
			  Identification which is to be associated with this file.,
			[out],
			  objOut,
			  AAFFile,
			  ppFile,
			  Pointer to buffer to receive pointer to new file.,
			Creates an object associated with with a transient file\,
  /// meaning that it is not associated with any filesystem file but
  /// may still be used to contain AAF objects as if it was associated
  /// with a filesystem file.  Associates the given identification with
  /// this file.
  ///
  /// Transient files are never considered Revertable.
  ///
  /// Succeeds if:
  /// - This object has already been Initialize\(\)d.
  /// - The pIdent argument is valid.
  /// - This object is currently closed.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_ALREADY_OPEN
  ///   - This object is already open.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - the pIdent pointer argument is NULL.)


AD_XFUNCTION3(AAFFileIsAAFFile,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file.,
			[out],
			  objPass,
			  aafUID_t *,
			  pAAFFileKind,
			  Pointer to an AUID indicating the file kind,
			[out\,retval],
			  objPass,
			  aafBool *,
			  pFileIsAAFFile,
			  Returns AAFTrue if the given file is an AAF file\, returns AAFFalse otherwise.,
			Is the named file an AAF file ?
  ///
  /// Note that the function result is returned via the pFileIsAAFFile argument.
  /// If this function succeeds it returns AAFRESULT_SUCCESS even if the named
  /// file is not an AAF file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - at least one of the pointer arguments is NULL.
  ///
  /// AAFRESULT_FILE_NOT_FOUND
  ///   - the file named by pFileName cannot be found.)

AD_XFUNCTION3(AAFRawStorageIsAAFFile,
			[in],
			  objPass,
			  IAAFRawStorage *,
			  pRawStorage,
			  storage containing the purported file,
			[out],
			  objPass,
			  aafUID_t *,
			  pAAFFileKind,
			  Pointer to an AUID indicating the file kind,
			[out\,retval],
			  objPass,
			  aafBool *,
			  pRawStorageIsAAFFile,
			  Returns AAFTrue if the given storage contains an AAF file\, returns AAFFalse otherwise.,
			Does the storage contain an AAF file ?
  ///
  /// Note that the function result is returned via the pRawStorageIsAAFFile argument.
  /// If this function succeeds it returns AAFRESULT_SUCCESS even if the storage
  /// is not an AAF file.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - at least one of the pointer arguments is NULL.)


AD_XFUNCTION3(AAFFileIsAAFFileKind,
			[in\, string],
			  objPass,
			  aafCharacter_constptr,
			  pFileName,
			  Null-terminated string containing name of filesystem file.,
			[in],
			  objPass,
			  aafUID_constptr,
			  pAAFFileKind,
			  Pointer to an AUID indicating the file kind to check for,
			[out\,retval],
			  objPass,
			  aafBool *,
			  pFileIsAAFFile,
			  Returns AAFTrue if the given file is an AAF file of the specified kind\,
  /// returns AAFFalse otherwise.,
			Is the named file an AAF file ?
  ///
  /// Note that the function result is returned via the pFileIsAAFFile argument.
  /// If this function succeeds it returns AAFRESULT_SUCCESS even if the named
  /// file is not an AAF file of the specified kind.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - at least one of the pointer arguments is NULL.
  ///
  /// AAFRESULT_FILEKIND_NOT_REGISTERED
  ///   - the specified file kind is not supported by the toolkit.)


AD_XFUNCTION3(AAFRawStorageIsAAFFileKind,
			[in],
			  objPass,
			  IAAFRawStorage *,
			  pRawStorage,
			  storage containing the purported file,
			[in],
			  objPass,
			  aafUID_constptr,
			  pAAFFileKind,
			  Pointer to an AUID indicating the file kind to check for,
			[out\,retval],
			  objPass,
			  aafBool *,
			  pRawStorageIsAAFFile,
			  Returns AAFTrue if the given storage contains an AAF file of the
  /// specified kind\, returns AAFFalse otherwise.,
			Does the storage contain an AAF file ?
  ///
  /// Note that the function result is returned via the pRawStorageIsAAFFile argument.
  /// If this function succeeds it returns AAFRESULT_SUCCESS even if the storage
  /// is not an AAF file of the specified kind.
  ///
  /// This function will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - at least one of the pointer arguments is NULL.
  ///
  /// AAFRESULT_FILEKIND_NOT_REGISTERED
  ///   - the specified file kind is not supported by the toolkit.)


AD_XFUNCTION1(AAFGetPluginManager,
			[out],
			  objOut,
			  AAFPluginManager,
			  ppPluginManager,
			  Pointer to the interface of the plugin manager.,
			Returns an interface of the plugin manager\, which is used to
  /// select plugins for exporting.)


AD_XFUNCTION2(AAFCreateRawStorageMemory,
			[in],
			  objPass,
			  aafFileAccess_t,
			  access,
			  Governs whether stream may be read from and/or written
  /// to.,
			[out],
			  objOut,
			  AAFRawStorage,
			  ppNewRawStorage,
			  Newly created storage,
			Create a raw storage providing a built-in implementation of
  /// IAAFRawStorage on memory.
  ///
  /// This is considered a value-added function since clients could
  /// actually create their own.
  ///
  /// Succeeds if:
  /// - The ppNewRawStorage pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppNewRawStorage\))


AD_XFUNCTION4(AAFCreateRawStorageDisk,
			[in],
			  objPass,
			  aafCharacter_constptr,
			  pFilename,
			  Name of file to be associated with this storage,
			[in],
			  objPass,
			  aafFileExistence_t,
			  existence,
			  Governs whether storage is on pre-existing data\, or is
  ///  newly created.,
			[in],
			  objPass,
			  aafFileAccess_t,
			  access,
			  Governs whether stream may be read from and/or written
  ///  to.,
			[out],
			  objOut,
			  AAFRawStorage,
			  ppNewRawStorage,
			  Newly created storage,
			Create a raw storage providing a built-in implementation of
  /// IAAFRawStorage on a file on disk.
  ///
  /// Note that it is illegal to specify existence and access as "New"
  /// "Read".
  ///
  /// This is considered a value-added function since clients could
  /// actually create their own.
  ///
  /// Succeeds if:
  /// - The pFilename pointer is valid.
  /// - The ppNewRawStorage pointer is valid.
  /// - If the open mode is one of read\, write\, or modify.
  /// - If the file existence is one of new or existing.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pFilename or ppNewRawStorage\)
  ///
  /// AAFRESULT_WRONG_OPENMODE
  /// - If none of read\, modify\, or write are specified as open
  ///   mode\, or if neither new or existing is specified for the
  ///   existence.)


AD_XFUNCTION6(AAFCreateRawStorageCachedDisk,
			[in],
			  objPass,
			  aafCharacter_constptr,
			  pFilename,
			  Name of file to be associated with this storage,
			[in],
			  objPass,
			  aafFileExistence_t,
			  existence,
			  Governs whether storage is on pre-existing data\, or is
  ///  newly created.,
			[in],
			  objPass,
			  aafFileAccess_t,
			  access,
			  Governs whether stream may be read from and/or written
  ///  to.,
			[in],
			  objPass,
			  aafUInt32,
			  pageCount,
			  Count of cache pages,
			[in],
			  objPass,
			  aafUInt32,
			  pageSize,
			  Cache page size in bytes,
			[out],
			  objOut,
			  AAFRawStorage,
			  ppNewRawStorage,
			  Newly created storage,
			Create a raw storage providing a built-in implementation of
  /// IAAFRawStorage on a file on disk with caching.
  ///
  /// Note that it is illegal to specify existence and access as "New"
  /// "Read".
  ///
  /// This is considered a value-added function since clients could
  /// actually create their own.
  ///
  /// Succeeds if:
  /// - The pFilename pointer is valid.
  /// - The ppNewRawStorage pointer is valid.
  /// - If the open mode is one of read\, write\, or modify.
  /// - If the file existence is one of new or existing.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pFilename or ppNewRawStorage\)
  ///
  /// AAFRESULT_WRONG_OPENMODE
  /// - If none of read\, modify\, or write are specified as open
  ///   mode\, or if neither new or existing is specified for the
  ///   existence.)

AD_XFUNCTION4(AAFCreateRawStorageCached,
			[in],
			  objPass,
			  IAAFRawStorage *,
			  pRawStorage,
			  Existing raw storage,
			[in],
			  objPass,
			  aafUInt32,
			  pageCount,
			  Count of cache pages,
			[in],
			  objPass,
			  aafUInt32,
			  pageSize,
			  Cache page size in bytes,
			[out],
			  objOut,
			  AAFRawStorage,
			  ppNewRawStorage,
			  Newly created cached storage,
			Create a new cached raw storage from an
  /// existing raw storage.
  ///
  /// Succeeds if:
  /// - The pRawStorage pointer is valid.
  /// - The ppNewRawStorage pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pRawStorage or ppNewRawStorage\)
  ///
  ///   )

AD_XFUNCTION5(AAFCreateRawStorageCached2,
			[in],
			  objPass,
			  IAAFRawStorage *,
			  pRawStorage,
			  Existing raw storage,
			[in],
			  objPass,
			  aafUInt32,
			  pageCount,
			  Count of cache pages,
			[in],
			  objPass,
			  aafUInt32,
			  pageSize,
			  Cache page size in bytes,
			[in],
			  objPass,
			  IAAFCachePageAllocator*,
			  pCachePageAllocator,
			  Cache page memory allocator,
			[out],
			  objOut,
			  AAFRawStorage,
			  ppNewRawStorage,
			  Newly created cached storage,
			Create a new cached raw storage from an
  /// existing raw storage with control over how the cache pages are allocated.
  ///
  /// Note that pages are allocated as needed so that the toolkit calls
  /// Allocate\(\) a maximum of pageCount times \(fewer than pageCount calls
  /// will be made if the data fits entirely within the cache\).
  /// 
  /// Succeeds if:
  /// - The pRawStorage pointer is valid.
  /// - The pCachePageAllocator pointer is valid.
  /// - The ppNewRawStorage pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pRawStorage\\\, pCachePageAllocator or ppNewRawStorage\)
  ///
  ///)

AD_XFUNCTION7(AAFCreateAAFFileOnRawStorage,
			[in],
			  objPass,
			  IAAFRawStorage *,
			  pRawStorage,
			  storage to be associated with this file,
			[in],
			  objPass,
			  aafFileExistence_t,
			  existence,
			  Governs whether storage is on pre-existing data\, or is
  ///  newly created.,
			[in],
			  objPass,
			  aafFileAccess_t,
			  access,
			  Governs whether stream may be read from and/or written
  ///  to.,
			[in],
			  objPass,
			  aafUID_constptr,
			  pFileKind,
			  kind of file to be created; only used for new files,
			[in],
			  objPass,
			  aafUInt32,
			  modeFlags,
			  File mode flags,
			[in],
			  objPass,
			  aafProductIdentification_constptr,
			  pIdent,
			  Identification to be associated with this file; only
  ///  used for new files,
			[out],
			  objOut,
			  AAFFile,
			  ppNewFile,
			  newly-created file,
			Given an IAAFRawStorage\, create an IAAFFile.  If pRawStorage is
  /// actually an IAAFRandomRawStorage\, the created file will be an
  /// IAAFRandomFile.
  ///
  /// Note that AAF files based on Binary Structured Storage will
  /// require the underlying IAAFRawStorage to be at least readable\,
  /// even in the case of write-only AAF files.
  ///
  /// Note also that only the following combinations of access and
  /// existence are legal:
  ///
  ///          existence   access   Legal?
  ///          ---------   ------   ------
  ///          existing    read     yes
  ///          existing    write    no
  ///          existing    modify   yes
  ///            new       read     no
  ///            new       write    yes
  ///            new       modify   yes
  ///
  /// This method will succeed if the following are true:
  /// - The pRawStorage pointer is valid.
  /// - The ppNewFile pointer is valid.
  /// - The accessibility of the specified raw storage matches that of the desired AAF File; additionally\, if the file kind is
  ///   Structured Storage Binary\, the raw storage is also required to be at least readable. 
  /// - A legal combination of existence and access flags is given.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pRawStorage or ppNewFile\)
  ///
  /// AAFRESULT_NOT_READABLE
  /// - The access parameter specifies readability or if this file is
  ///   Binary Structured Storage\, but the specified raw storage is
  ///   not readable.
  ///
  /// AAFRESULT_NOT_WRITEABLE
  /// - The access parameter specifies writeability but the specified
  ///   raw storage is not writeable.
  ///
  /// AAFRESULT_NULL_PARAM
  /// - existence is new\, and pFileKind is NULL.
  ///
  /// AAFRESULT_INVALID_PARAM
  /// - The access or existence parameters are not set to a legal
  ///   combination of values.)

AD_XFUNCTION1(AAFSetProgressCallback,
			[in],
			  objPass,
			  IAAFProgress*,
			  pProgress,
			  Pointer to the interface of the progress interface callback.,
			Sets a progress callback\, called back during load and save.)

AD_XFUNCTION1(AAFGetFileEncodings,
			[out],
			  objOut,
			  EnumAAFFileEncodings,
			  ppFileEncodings,
			  Available file encodings.,
			Returns an enumeration of file encodings supported by this version
  /// of the library.
  ///
  /// This method will succeed if the following are true:
  /// - The ppFileEncodings pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppFileEncodings\))

AD_XFUNCTION1(AAFSetDiagnosticOutput,
			[in],
			  objPass,
			  IAAFDiagnosticOutput*,
			  pOutput,
			  New diagnostic output.,
			Make the specified diagnostic output stream the AAF Toolkit's diagnostic output stream.
  /// By default the diagnostic output goes to stderr. The passed in pointer is AddRefed.
  /// The pointer will be Released the next time AAFSetDiagnosticOutput is called or when
  /// the AAF DLL is unloaded.
  /// 
  ///
  /// This method will succeed if the following are true:
  /// - The pOutput pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pStream\))

AD_XFUNCTION1(AAFGetLibraryVersion,
			[out\, retval],
			  objPass,
			  aafProductVersion_t *,
			  pVersion,
			  The library version,
			Return the version of the AAF library currently
  /// running on this machine\, which implements these interfaces.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pVersion pointer is valid.
  /// 
  /// If this method fails nothing is written to *pVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVersion is null.)

AD_XFUNCTION1(AAFGetStaticLibraryVersion,
			[out\, retval],
			  objPass,
			  aafProductVersion_t *,
			  pVersion,
			  The static library version,
			Return the version of the static \(aaflib\) library
  /// linked against the calling appplication. This version may be the same as
  /// or different from the version of the \(dynamically linked\) AAF Library
  /// containing the implementation of the various interfaces.  The version
  /// of the AAF Library may be obtained by calling AAFGetLibraryVersion\(\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pVersion pointer is valid.
  /// 
  /// If this method fails nothing is written to *pVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVersion is null.)

AD_XFUNCTION1(AAFGetLibraryPathNameBufLen,
			[out],
			  objPass,
			  aafUInt32 *,
			  pBufSize,
			  size of required buffer\, in bytes,
			Returns size of buffer \(in bytes\) required for AAFGetLibraryPathName\(\).
  /// 
  /// Succeeds if:
  /// - The pBufSize pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pBufSize\))

AD_XFUNCTION2(AAFGetLibraryPathName,
  			[out\, string\, size_is\(bufSize\)],
    			  objPass,
    			  aafCharacter *,
    			  pLibraryPathName,
   			  buffer into which LibraryPathName is to be written,
    			[in],
    			  objPass,
    			  aafUInt32,
    			  bufSize,
			  size of *pLibraryPathName buffer in bytes,
			Get the pathname of the AAF library.
  /// 
  /// Writes the LibraryPathName\, with a trailing null
  /// character\, into the pLibraryPathName buffer.  The
  /// buffer is allocated by the caller.  The size of the buffer is
  /// given by bufSize.
  /// 
  /// Caller may call AAFGetLibraryPathNameBufLen\(\) to determine the
  /// required buffer size.
  /// 
  /// If this method fails nothing will be written to
  /// *pLibraryPathName.
  /// 
  /// Succeeds if:
  /// - The pLibraryPathName pointer is valid.
  /// - bufSize indicates that the buffer is large enough to hold
  ///   LibraryPathName.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLibraryPathName arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates that the allocated buffer is not large
  ///     enough to hold LibraryPathName.)

AD_XFUNCTION2(AAFResultToTextBufLen,
    [in],
    objPass,
    AAFRESULT,
    result,
    The result,
    [out],
    objPass,
    aafUInt32 * ,
    pResultTextSize,
    The size of the required buffer\, in bytes.,
  Returns the size of the buffer\, in bytes\, required for the AAFResultToText\(\) function.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResultTextSize pointer is valid.
  /// - the result is an AAFRESULT.
  /// - the result is a recognized AAFRESULT.
  ///
  /// If this method fails nothing will be written to *pResultTextSize.
  ///
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResultTextSize arg is NULL.
  ///
  /// AAFRESULT_RESULT_NOT_AAF
  ///   - result is not an AAFRESULT.
  ///
  /// AAFRESULT_RESULT_NOT_RECOGNIZED
  ///   - result is not a recognized AAFRESULT.)


AD_XFUNCTION3(AAFResultToText,
    [in],
    objPass,
    AAFRESULT,
    result,
    The result,
    [out\, string\, size_is\(resultTextSize\)],
    objPass,
    aafCharacter *,
    pResultText,
    The text representation of the result,
    [in],
    objPass,
    aafUInt32,
    resultTextSize,
    The size\, in bytes\, of pResultText,
  /// Returns the text representation of an AAFRESULT.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResultText pointer is valid.
  /// - the result is an AAFRESULT.
  /// - the result is a recognized AAFRESULT.
  /// - the buffer is large enough to hold the result text.
  ///
  /// If this method fails nothing will be written to resultText.
  ///
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResultText arg is NULL.
  ///
  /// AAFRESULT_RESULT_NOT_AAF
  ///   - result is not an AAFRESULT.
  ///
  /// AAFRESULT_RESULT_NOT_RECOGNIZED
  ///   - result is not a recognized AAFRESULT.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - pResultText is too small to hold the result text.)
AD_MODULE_END
