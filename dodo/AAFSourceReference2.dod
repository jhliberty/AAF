#c *********************************************************************
#c
#c $Id: AAFSourceReference2.dod,v 1.6 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSourceReference2\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#c #import ./AAFSegment.dod
AD_HEAD
AD_IDL(///
/// The IAAFSourceReference2 interface is implemented by objects that
/// represent the essence or other data described by a MobSlot in a
/// Mob.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFSourceReference2
///     is a primary interface for an abstract class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)

AD_CLASS_UUID(4629a865, 4b6d, 490c, ad, 7e, 25, 8a, 22, a1, cf, f0)

AD_DEFAULT_UUID(eb3094c4, f60e, 4aa3, b5, 00, ba, 72, c4, c7, 91, b7)
AD_XCLASS_BEGIN(Abstract, StoredObject)

#c 
#c Original SourceReference methods repreated in SourceReference2
#c

AD_XMETHOD1(GetSourceID,
			[retval][out],
			  objPass,
			  aafMobID_t *,
			  pSourceID,
			  Place to put source ID,
			Gets the SourceID and places it into the pSourceID argument.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSourceID pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pSourceID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSourceID arg is NULL.)


AD_XMETHOD1(SetSourceID,
			[in],
			  objPass,
			  aafMobID_constref ,
			  sourceID,
			  Source ID to set,
			Sets the SourceID using the sourceID argument.
  /// 
  /// Always succeeds.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetSourceMobSlotID,
			[retval][out],
			  objPass,
			  aafSlotID_t *,
			  pMobSlotID,
			  Place to put source mob slot ID,
			Gets the Mob Slot ID and places it into the pMobSlotID argument.
  ///
  /// Succeeds if all of the following are true:
  /// - the pMobSlotID pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pMobSlotID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMobSlotID arg is NULL.)


AD_XMETHOD1(SetSourceMobSlotID,
			[in],
			  objPass,
			  aafSlotID_t ,
			  mobSlotID,
			  Source Mob ID to set,
			Sets the mob slot ID using the mobSlotID argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - \(preconditions here\)
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// \(other error codes here.\))


#c
#c New SourceReference2 methods
#c

AD_XMETHOD2(SetChannelIDs,
			[in],
			  objPass,
			  aafUInt32,
			  numberElements,
			  Number of elements in the pChannelIDs array,
			[in],
			  objPass,
			  aafUInt32*,
			  pChannelIDs,
			  Array of channel IDs,
			Specify the channels in a slot that are referenced. The first channel has
  /// and ID of 1\, the N'th channel has an ID of N.  The number of channel IDs
  /// shall equal the number of channels being described the bht MobSlot containing
  /// the SourceReference\, e.g. 1 element for a mono audio slot\, 6 elements for a 5.1
  /// multi-channel audio slot.
  /// 
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pChannelIDs is null )


AD_XMETHOD2(GetChannelIDs,
			[in],
			  objPass,
			  aafUInt32,
			  numberElements,
			  Number of elements in the pChannelIDs array,
			[in],
			  objPass,
			  aafUInt32*,
			  pChannelIDs,
			  Array of channel IDs,
			Get the channels in a slot that are referenced.  Refer to
  /// SetChannelIDs for channel IDs description.
  ///
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pChannelIDs is null
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - the property is not present
  ///
  /// AAFRESULT_SMALLBUF
  ///   - pChannelIDs is too small)

AD_XMETHOD1(GetChannelIDsSize,
			[out],
			  objPass,
			  aafUInt32 *,
			  pSize,
			  required buffer size to hold the ChannelIDs array,
			Returns the size in bytes of the buffer required to hold the array
  /// returned by GetChannelIDs\(\).
  ///
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSize is null)

AD_XMETHOD2(SetMonoSourceSlotIDs,
			[in],
			  objPass,
			  aafUInt32,
			  numberElements,
			  Number of elements in the pMonoSourceSlotIDs array,
			[in],
			  objPass,
			  aafUInt32*,
			  pMonoSourceSlotIDs,
			  Array of slot IDs,
			For reference from a multi-channel MobSlot to multiple mono MobSlots.
  /// pMonoSourceSlotIDs identifies the mono slots referenced by this SourceReference
  /// object.
  /// 
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMonoSourceSlotIDs is null )


AD_XMETHOD2(GetMonoSourceSlotIDs,
			[in],
			  objPass,
			  aafUInt32,
			  numberElements,
			  Number of elements in the pMonoSourceSlotIDs array,
			[in],
			  objPass,
			  aafUInt32*,
			  pMonoSourceSlotIDs,
			  Array of channel IDs,
			Get the mono slot IDs that are referenced by this object.  Refer to
  /// SetMonoSourceSlotIDs for a description of pMonoSourceSlotIDs.
  ///
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMonoSourceSlotIDs is null
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - the property is not present
  ///
  /// AAFRESULT_SMALLBUF
  ///   - pMonoSourceSlotIDs is too small)

AD_XMETHOD1(GetMonoSourceSlotIDsSize,
			[out],
			  objPass,
			  aafUInt32 *,
			  pSize,
			  required buffer size to hold the MonoSourceSlotIDs array,
			Returns the size in bytes of the buffer required to hold the array
  /// returned by GetMonoSourceSlotIDs\(\).
  ///
  /// Return codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSize is null)

AD_XCLASS_END(Abstract, StoredObject)
