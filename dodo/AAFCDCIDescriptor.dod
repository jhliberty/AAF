#c *********************************************************************
#c
#c $Id: AAFCDCIDescriptor.dod,v 1.15 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFCDCIDescriptor\
#endm
#c
#startm .parent-module 0
AAFDigitalImageDescriptor\
#endm
#c
#c #import ./AAFDigitalImageDescriptor.exp
#import ./AAFCDCIDescriptor2.exp
AD_HEAD
AD_IDL(///
/// IAAFCDCIDescriptor is DEPRECATED.
/// Please use IAAFCDCIDescriptor2.
///
/// The IAAFCDCIDescriptor interface is implemented by objects which
/// describe video essence formatted with one luminance component and 
/// two color-difference components.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(44861702, 8AEA, 11d2, 81, 3C, 00, 60,97, 31, 01, 72)

AD_DEFAULT_UUID(44861703, 8AEA, 11d2, 81, 3C, 00, 60, 97, 31, 01, 72)

AD_COM_EXT_CLASS_BEGIN(public IAAFCDCIDescriptor2)

AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  /// IAAFCDCIDescriptor-supporting object.  This method must be called
  /// after allocation\, and before any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(SetComponentWidth,
			[in],
				objPass,
				aafInt32,
				ComponentWidth,
				Number of bits.,
			Sets the ComponentWidth property.  Specifies the number of bits
  /// used to store each component.  Typical values can be 8\, 10\,
  /// 12\, 14\, or 16\, but others are permitted by the reference
  /// implementation.  Each component in a sample is packed
  /// contiguously; the sample is filled with the number of bits
  /// specified by the optional PaddingBits property.  If  the
  /// PaddingBits property is omitted\, samples are packed
  /// contiguously.
  ///
  /// If this method fails\, the ComponentWidth property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetComponentWidth,
			[out],
				objPass,
				aafInt32 *,
				pComponentWidth,
				Address to store the number of bits.,
			Gets the ComponentWidth property.  Specifies the number of bits
  /// used to store each component.  Typical values can be 8\, 10\,
  /// 12\, 14\, or 16\, but others are permitted by the reference
  /// implementation.  Each component in a sample is packed
  /// contiguously; the sample is filled with the number of bits
  /// specified by the optional PaddingBits property.  If the
  /// PaddingBits property is omitted\, samples are packed
  /// contiguously.
  ///
  /// Succeeds if all of the following are true:
  /// - pComponentWidth is a valid pointer.
  /// 
  /// If this method fails\, *pComponentWidth will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComponentWidth arg is NULL.)


AD_XMETHOD1(SetHorizontalSubsampling,
			[in],
				objPass,
				aafUInt32,
				HorizontalSubsampling,
				Integer value.,
			Sets the HorizontalSubsampling property.  Specifies the ratio of
  /// luminance sampling to chrominance sampling in the horizontal direction.
  /// For 4:2:2 video\, the value is 2\, which means that there are twice as
  /// many luminance values as there are color-difference values.
  /// Another typical value is 1; however other values are permitted by
  /// the reference implementation.
  ///
  /// If this method fails\, the HorizontalSubsampling property will
  /// not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetHorizontalSubsampling,
			[out],
				objPass,
				aafUInt32 *,
				pHorizontalSubsampling,
				Address to store the integer value.,
			Gets the HorizontalSubsampling property.  Specifies the ratio of
  /// luminance sampling to chrominance sampling in the horizontal
  /// direction.  For 4:2:2 video\, the value is 2\, which means that
  /// there are twice as many luminance values as there are
  /// color-difference values.  Another typical value is 1; however
  /// other values are permitted by the reference implementation.
  ///
  /// Succeeds if all of the following are true:
  /// - pHorizontalSubsampling is a valid pointer.
  /// 
  /// If this method fails\, *pHorizontalSubsampling will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pHorizontalSubsampling arg is NULL.)


AD_XMETHOD1(SetVerticalSubsampling,
			[in],
				objPass,
				aafUInt32,
				VerticalSubsampling,
				Integer value.,
			Sets the VerticalSubsampling property.  Specifies the ratio of
  /// luminance sampling to chrominance sampling in the vertical direction.
  /// For 4:2:2 video\, the value is 2\, which means that there are twice as
  /// many luminance values as there are color-difference values.
  /// Another typical value is 1; however other values are permitted by
  /// the reference implementation.
  ///
  /// If this method fails\, the VerticalSubsampling property will
  /// not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetVerticalSubsampling,
			[out],
				objPass,
				aafUInt32 *,
				pVerticalSubsampling,
				Address to store the integer value.,
			Gets the VerticalSubsampling property.  Specifies the ratio of
  /// luminance sampling to chrominance sampling in the vertical
  /// direction.  For 4:2:2 video\, the value is 2\, which means that
  /// there are twice as many luminance values as there are
  /// color-difference values.  Another typical value is 1; however
  /// other values are permitted by the reference implementation.
  ///
  /// Succeeds if all of the following are true:
  /// - pVerticalSubsampling is a valid pointer.
  /// 
  /// If this method fails\, *pVerticalSubsampling will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVerticalSubsampling arg is NULL.)


AD_XMETHOD1(SetColorSiting,
			[in],
				enumIn,
				aafColorSiting_t,
				ColorSiting,
				Color siting value.,
			Sets the ColorSiting property.  Specifies how to compute subsampled
  /// chrominance values.
  ///
  /// Valid values are:
  ///
  ///     kCoSiting  - To calculate subsampled pixels\, take the preceding's pixels
  ///                  color value\, discard the other color values and cosite the
  ///                  color with the first luminance value.
  ///
  ///     kAveraging - To calculate subsampled pixels\, take the average of the two
  ///                  adjacent pixels' color values and site the color in the center
  ///                  of the luminance pixels.
  ///
  ///     kThreeTap  - To calculate subsampled pixels\, take 25 percent of the the previous
  ///                  pixel's color value\, 50 percent of the first value and 25 percent
  ///                  of the second value.  For the first value in a row\, use 75 percent
  ///                  of that value since there is no previous value.  The kThreeTap value
  ///                  is only meaningful when the HorizontalSubsampling propert has a value
  ///                  of 2.
  ///
  /// This property is optional.  The default value is kCoSiting.
  ///
  /// Succeeds if all of the following are true:
  /// - ColorSiting is valid
  ///
  /// If this method fails\, the ColorSiting property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetColorSiting,
			[out],
				objPass,
				aafColorSiting_t *,
				pColorSiting,
				Address to store the color siting value.,
			Gets the ColorSiting property.  Specifies how to compute
  /// subsampled chrominance values.
  ///
  /// Valid values are:
  ///
  ///     kCoSiting  - To calculate subsampled pixels\, take the
  ///                  preceding's pixels color value\, discard the
  ///                  other color values and cosite the color with the
  ///                  first luminance value.
  ///
  ///     kAveraging - To calculate subsampled pixels\, take the
  ///                  average of the two adjacent pixels' color values
  ///                  and site the color in the center of the
  ///                  luminance pixels.
  ///
  ///     kThreeTap  - To calculate subsampled pixels\, take 25 percent
  ///                  of the the previous pixel's color value\, 50
  ///                  percent of the first value and 25 percent of the
  ///                  second value.  For the first value in a row\,
  ///                  use 75 percent of that value since there is no
  ///                  previous value.  The kThreeTap value is only
  ///                  meaningful when the HorizontalSubsampling
  ///                  propert has a value of 2.
  ///
  /// Succeeds if all of the following are true:
  /// - pColorSiting is a valid pointer.
  ///
  /// If this method fails\, *pColorSiting will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pColorSiting arg is NULL.)


AD_XMETHOD1(SetBlackReferenceLevel,
			[in],
				objPass,
				aafUInt32,
				BlackReferenceLevel,
				Integer value.,
			Sets the BlackReferenceLevel property.  Specifies the digital luminance
  /// component component value associated with black.
  ///
  /// For CCIR-601/2\, the value is 16 for 8-bit video and 64 for
  /// 10-bit video.  For YUV\, the value is 0.  These are typical
  /// values; other values will not be disallowed by the reference
  /// implementation.
  ///
  /// The same value is used in CDCI and RGBA when standard colorspace
  /// conversion is used.
  ///
  /// This property is optional.  The default value is 0.
  ///
  /// If this method fails\, the BlackReferenceLevel property will not
  /// be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetBlackReferenceLevel,
			[out],
				objPass,
				aafUInt32 *,
				pBlackReferenceLevel,
				Address to store the integer value.,
			Gets the BlackReferenceLevel property.  Specifies the digital
  /// luminance component value associated with black.
  ///
  /// For CCIR-601/2\, the value is 16 for 8-bit video and 64 for
  /// 10-bit video.  For YUV\, the value is 0.  These are typical
  /// values; other values will not be disallowed by the reference
  /// implementation.
  ///
  /// The same value is used in CDCI and RGBA when standard colorspace
  /// conversion is used.
  ///
  /// Succeeds if all of the following are true:
  /// - pBlackReferenceLevel is a valid pointer.
  /// 
  /// If this method fails\, *pBlackReferenceLevel will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pBlackReferenceLevel arg is NULL.)


AD_XMETHOD1(SetWhiteReferenceLevel,
			[in],
				objPass,
				aafUInt32,
				WhiteReferenceLevel,
				Integer value.,
			Sets the WhiteReferenceLevel property.  Specifies the digital
  /// luminance component component value associated with white.
  ///
  /// For CCIR-601/2\, the value is 235 for 8-bit video and 940 for
  /// 10-bit video.  For YUV\, the value is 255 for 8-bit video and
  /// 1023 for 10-bit video.  These are typical values; other values
  /// will not be disallowed by the reference implementation.
  ///
  /// This property is optional.  The default value is the maximum
  /// unsigned interger value for component size.
  ///
  /// If this method fails\, the WhiteReferenceLevel property will not
  /// be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetWhiteReferenceLevel,
			[out],
				objPass,
				aafUInt32 *,
				pWhiteReferenceLevel,
				Address to store the integer value.,
			Gets the WhiteReferenceLevel property.  Specifies the digital
  /// luminance component component value associated with white.
  ///
  /// For CCIR-601/2\, the value is 235 for 8-bit video and 940 for
  /// 10-bit video.  For YUV\, the value is 255 for 8-bit video and
  /// 1023 for 10-bit video.  These are typical values; other values
  /// will not be disallowed by the reference implementation.
  ///
  /// Succeeds if all of the following are true:
  /// - pWhiteReferenceLevel is a valid pointer.
  /// 
  /// If this method fails\, *pWhiteReferenceLevel will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pWhiteReferenceLevel arg is NULL.)


AD_XMETHOD1(SetColorRange,
			[in],
				objPass,
				aafUInt32,
				ColorRange,
				Integer value.,
			Sets the ColorRange property.  Specifies the range of allowable
  /// digital chrominance component values.  Chrominance values are
  /// unsigned and the range is centered on 128 for 8-bit video and 512
  /// for 10-bit video.  This value is used for both chrominance
  /// components.
  ///
  /// For CCIR-601/2\, the range is 225 for 8-bit video and 897 for
  /// 10-bit video.  For YUV\, the range is 255 for 8-bit video and
  /// 1023 for 10-bit video.  These are typical values; other values will
  /// not be disallowed by the reference implementation.
  ///
  /// This property is optional.  The default value is the maximum
  /// unsigned integer value for component size.
  ///
  /// Succeeds if all of the following are true:
  /// 
  /// If this method fails\, the ColorRange property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetColorRange,
			[out],
				objPass,
				aafUInt32 *,
				pColorRange,
				Address to store the integer value.,
			Gets the ColorRange property.  Specifies the range of allowable
  /// digital chrominance component values.  Chrominance values are
  /// unsigned and the range is centered on 128 for 8-bit video and 512
  /// for 10-bit video.  This value is used for both chrominance
  /// components.
  ///
  /// For CCIR-601/2\, the range is 225 for 8-bit video and 897 for
  /// 10-bit video.  For YUV\, the range is 255 for 8-bit video and
  /// 1023 for 10-bit video.  These are typical values; other values will
  /// not be disallowed by the reference implementation.
  ///
  /// Succeeds if all of the following are true:
  /// - pColorRange is a valid pointer.
  /// 
  /// If this method fails\, *pColorRange will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pColorRange arg is NULL.)


AD_XMETHOD1(SetPaddingBits,
			[in],
				objPass,
				aafInt16,
				PaddingBits,
				Number of bits.,
			Sets the PaddingBits property.  Specifies the number of bits
  /// padded to each pixel.
  ///
  /// This property is optional.  The default value is 0.
  ///
  /// If this method fails\, the PaddingBits property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.)


AD_XMETHOD1(GetPaddingBits,
			[out],
				objPass,
				aafInt16 *,
				pPaddingBits,
				Address to store the number of bits.,
			Gets the PaddingBits property.  Specifies the number of bits
  /// padded to each pixel.
  ///
  ///
  /// Succeeds if all of the following are true:
  /// - pPaddingBits is a valid pointer.
  /// 
  /// If this method fails\, pPaddingBits will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPaddingBits arg is NULL.)
#c
#c AAFCDCIDescriptor2 methods
#c

AD_COM_METH(.method-SetAlphaSamplingWidth)
AD_COM_METH(.method-GetAlphaSamplingWidth)
AD_COM_METH(.method-SetReversedByteOrder)
AD_COM_METH(.method-GetReversedByteOrder)

AD_COM_EXT_CLASS_END(AAFCDCIDescriptor2)
