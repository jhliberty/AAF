#c *********************************************************************
#c
#c $Id: AAFEndian.dod,v 1.10 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEndian\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used to allow the user to determine the byte
/// order of this object.  Note that the byte order of the object
/// stored in the AAF file may be different from the native byte order
/// of this machine.  Note also that both pieces of information are
/// available here.
///
/// Byte order of newly created AAF files is set upon creation of that
/// file.  It is set to the byte order of the creating machine.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFEndian is not a
///     primary interface for a concrete class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_DEFAULT_UUID(6BACC0C1, 6091, 11D2, 84, 1B, 00, 60, 08, 32, AC, B8)
AD_XCLASS_BEGIN(Abstract, Transient)
AD_XMETHOD1(GetStoredByteOrder,
			[out],
			objPass,
			eAAFByteOrder_t *,
			pOrder,
			Pointer to place where byte order is to be put,
			Returns the "Endian-ness" in which the current object was or will
  /// be stored.  If this is a transient object \(i.e.\, one which has
  /// not been persisted\) then it will return the native byte order of
  /// the platform on which this is running.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pOrder pointer is valid.
  /// 
  /// If this method fails nothing is written to *pOrder.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pOrder is null.)


AD_XMETHOD1(GetNativeByteOrder,
			[out],
			objPass,
			eAAFByteOrder_t *,
			pOrder,
			Pointer to place where byte order is to be put,
			Returns the native "Endian-ness" of the platform on which this is
  /// running.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pOrder pointer is valid.
  /// 
  /// If this method fails nothing is written to *pOrder.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pOrder is null.)
AD_XCLASS_END(Abstract, Transient)
