#c *********************************************************************
#c
#c $Id: AAFHeader.dod,v 1.35 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFHeader\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
#import ./AAFEndian.exp
#import ./AAFHeader2.exp
AD_HEAD
AD_IDL(///
/// The IAAFHeader interface provides file-wide information and
/// indexes.  Each AAF file has one and only one instance of an object
/// which supports IAAFHeader.
///
/// When an IAAFHeader-supporting object is created\, the contained
/// dictionary object is automatically created.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFMob)
AD_FORWARD_DECLARATION(AAFEssenceData)
AD_FORWARD_DECLARATION(EnumAAFMobs)
AD_FORWARD_DECLARATION(EnumAAFEssenceData)
AD_FORWARD_DECLARATION(AAFDictionary)
AD_FORWARD_DECLARATION(AAFIdentification)
AD_FORWARD_DECLARATION(EnumAAFIdentifications)
AD_CLASS_UUID(B1A21383, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21382, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_COM_EXT2_CLASS_BEGIN(public IAAFEndian, public IAAFHeader2)
AD_XMETHOD2(LookupMob,
			[in\, ref],
			  objPass,
			  aafMobID_constref,
			  mobID,
			  The Mob ID,
			[out\,retval],
			  objOut,
			  AAFMob,
			  ppMob,
			  Matching Mob,
			Looks up the Mob that matches the given mob id and puts it into
  /// the ppMob argument.  The returned mob interface is AddRef\(\)ed
  /// before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppMob pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppMob.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppMob is null
  ///
  /// AAFRESULT_MOB_NOT_FOUND
  ///   - the requested mob wasn't found.)


AD_XMETHOD2(CountMobs,
			[in],
			  enumIn,
			  aafMobKind_t,
			  mobKind,
			  The mob kind to count,
			[out\, retval],
			  objPass,
			  aafNumSlots_t *,
			  pResult,
			  Total number of mobs of kind mobKind,
			Writes the number of matches for the given mob kind into the
  /// *pNumMobs argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pNumMobs pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pNumMobs.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumMobs is null.)


AD_XMETHOD2(GetMobs,
			[in],
			  objPass,
			  aafSearchCrit_t *,
			  pSearchCriteria,
			  Search Criteria for enumeration,
			[out\, retval],
			  objOut,
			  EnumAAFMobs,
			  ppEnum,
			  Mob Enumeration,
			Places an enumerator for mobs that apply to the criteria into the
  /// *ppEnum argument.  If pSearchCriteria is null\, all mobs are
  /// returned.   The searchTag field of pSearchCriteria\, and exactly
  /// ONE of the fields in the union \(tags.mobID\, tags.name\, etc. \)
  /// must be set.  Only one search criterion may be specified.  The
  /// returned enumerator is AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(AddMob,
			[in],
			objIn,
			AAFMob,
			pMob,
			Mob to add,
			Appends the given mob to the header.  If the given mob is already
  /// contained this method will do nothing and will return success.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pMob pointer is valid.
  /// - the given mob is not already part of this collection.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMob is null.
  ///
  /// AAFRESULT_DUPLICATE_MOBID
  ///   - the given mob is already contained.)


AD_XMETHOD1(RemoveMob,
			[in],
			objIn,
			AAFMob,
			pMob,
			Mob to remove,
			Removes the given mob from the header.
  ///
  /// Succeeds if all of the following are true:
  /// - the pMob pointer is valid.
  /// - the given mob is currently in the collection.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMob is null.
  ///
  /// AAFRESULT_MOB_NOT_FOUND
  ///   - the given mob is not already contained.)


AD_XMETHOD1(CountEssenceData,
			[out\, retval],
			  objPass,
			  aafUInt32 *,
			  pResult,
			  Total number of essence data,
			Writes the total number of essence data into the *pNumEssenceData
  /// argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pNumEssenceData pointer is valid.
  /// 
  /// If this method fails nothing will be written to
  /// *pNumEssenceData.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumEssenceData is null.)


AD_XMETHOD3(IsEssenceDataPresent,
			[in\, ref],
			  objPass,
			  aafMobID_constref,
			  fileMobID,
			  A Unique File Mob ID,
			[in],
			  enumIn,
			  aafFileFormat_t,
			  fmt,
			  The Essence File Format,
			[out\,retval],
			  objPass,
			  aafBoolean_t *,
			  pResult,
			  True if the essence is found,
			Returns true if the essence is found.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(EnumEssenceData,
			[out\,retval],
			  objOut,
			  EnumAAFEssenceData,
			  ppEnum,
			  Essence Enumeration,
			Places an enumerator for essence that applies to the criteria
  /// into the *ppEnum argument.  The returned enumerator is
  /// AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pMediaCriteria pointer is valid.
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pMediaCriteria or ppEnum is null.)


AD_XMETHOD1(AddEssenceData,
			[in],
			objIn,
			AAFEssenceData,
			pEssenceData,
			Essence data object to append,
			Appends the given essence data object to the header.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pEssenceData pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_DUPLICATE_MOBID
  ///   - The given mob has already been added.  The validation is done by comparing
  ///     mobIDs\, which should be unique.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceData is null.)

AD_XMETHOD1(RemoveEssenceData,
			[in],
			objIn,
			AAFEssenceData,
			pEssenceData,
			EssenceData to remove,
 			Removes the given EssenceData from the header.
  ///
  /// Succeeds if all of the following are true:
  /// - the pEssenceData pointer is valid.
  /// - the given EssenceData is currently in the collection.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceData is null.
  ///
  /// AAFRESULT_ESSENCE_NOT_FOUND
  ///   - the given EssenceData is not already contained.)

AD_XMETHOD2(LookupEssenceData,
			[in\, ref],
			  objPass,
			  aafMobID_constref,
			  mobID,
			  The Mob ID,
			[out\,retval],
			  objOut,
			  AAFEssenceData,
			  ppEssenceData,
			  Matching EssenceData,
			Looks up the EssenceData that matches the given mob id and puts it into
  /// the ppEssenceData argument.  The returned EssenceData interface is AddRef\(\)ed
  /// before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEssenceData pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEssenceData.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEssenceData is null
  ///
  /// AAFRESULT_MOB_NOT_FOUND
  ///   - the requested EssenceData wasn't found.)

AD_XMETHOD1(GetDictionary,
			[out\, retval],
			objOut,
			AAFDictionary,
			ppDictionary,
			The AAF Dictionary,
			Places the dictionary that contains all types of aaf definition
  /// objects into the *ppDictionary argument.  The returned dictionary
  /// is AddRef\(\)ed before it is returned.  Note that the dictionary
  /// is automatically created when the header object is created.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppDictionary pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppDictionary is null.)


AD_XMETHOD1(GetLastIdentification,
			[out\,retval],
			objOut,
			AAFIdentification,
			ppIdentification,
			Indentification Object,
     Places the identification of the last entity that modified the
  /// file into the *ppIdentification argument.  The returned
  /// identification is AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppIdentification pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppIdentification is null.)


AD_XMETHOD2(LookupIdentification,
			[in\, ref],
			  objPass,
			  aafUID_constref,
			  generation,
			  Unique Generation ID,
			[out\,retval],
			  objOut,
			  AAFIdentification,
			  ppIdentification,
			  Indentification Object,
			Places the Identification that matches the given generation into
  /// the *ppIdentification argument.  The returned identification is
  /// AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppIdentification pointer is valid.
  /// - the given generation was found.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppIdentification is null.
  ///
  /// AAFRESULT_OBJECT_NOT_FOUND
  ///   - the given generation was not found..)


AD_XMETHOD1(CountIdentifications,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of identification objects,
			Writes the number of identification objects into the *pResult
  /// argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(GetIdentifications,
			[out\,retval],
			objOut,
			EnumAAFIdentifications,
			ppEnum,
			Indentification Enumeration,
			Places an enumerator for all Identifications criteria into the
  /// *ppEnum argument.  The returned enumerator is AddRef\(\)ed before
  /// it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(AppendIdentification,
			[in],
			objIn,
			AAFIdentification,
			pIdent,
			Identification to append,
			Appends the given Identification class to the header.  This
  /// method does not attempt to identify duplicate identifications\, so
  /// it will succeed even if an identical identification has already
  /// been appended.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pIdent pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIdent is null.)


AD_XMETHOD2(GetIdentificationAt,
			[in],
			objPass,
			aafUInt32,
			index,
			Index of identification to retrieve,

			[out\, retval],
			objOut,
			AAFIdentification,
			ppIdentification,
			Retrieved identification,
			Retrieves the indexed identification from the header.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppIdentification pointer is valid.
  /// - index is less than the value returned by CountIdentifications\(\).
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppIdent is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to result of
  ///     CountIdentifications\(\).)


AD_XMETHOD1(GetRefImplVersion,
			[out\, retval],
			objPass,
			aafProductVersion_t *,
			pVersion,
			The Reference Implementation Version,
			Return the version of the Reference Implementation currently
  /// running on this machine\, which implements these interfaces.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pVersion pointer is valid.
  /// 
  /// If this method fails nothing is written to *pVersion.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVersion is null.)


AD_XMETHOD1(GetFileRevision,
			[out\, retval],
			objPass,
			aafVersionType_t *,
			pRevision,
			The File Version,
			Return the File Revision property.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pRevision pointer is valid.
  /// 
  /// If this method fails nothing is written to *pRevision.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pRevision is null.)


AD_XMETHOD1(GetLastModified,
			[out\, retval],
			objPass,
			aafTimeStamp_t *,
			pTimeStamp,
			The modification date-time stamp,
			Return the Last Modified property.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pTimeStamp pointer is valid.
  /// 
  /// If this method fails nothing is written to *pTimeStamp.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTimeStamp is null.)


AD_XMETHOD1(GetContentStorage,
			[out],
			objOut,
			AAFContentStorage,
			ppStorage,
			Returned Content Storage object,
			Places the Content Storage object attached to the header into the
  /// *ppStorage argument.
  ///
  /// The returned content storage object is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppStorage pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppStorage is null.)



AD_COM_METH(.method-GetStoredByteOrder)
AD_COM_METH(.method-GetNativeByteOrder)
AD_COM_METH(.method-GetPrimaryMob)
AD_COM_METH(.method-SetPrimaryMob)
AD_COM_METH(.method-GetOperationalPattern)
AD_COM_METH(.method-SetOperationalPattern)
AD_COM_METH(.method-UpdateEssenceContainers)
AD_COM_METH(.method-CountEssenceContainers)
AD_COM_METH(.method-GetEssenceContainers)
AD_COM_METH(.method-IsEssenceContainerPresent)
AD_COM_METH(.method-CountDescriptiveSchemes)
AD_COM_METH(.method-GetDescriptiveSchemes)
AD_COM_METH(.method-IsDescriptiveSchemePresent)
AD_COM_METH(.method-AddDescriptiveScheme)
AD_COM_METH(.method-RemoveDescriptiveScheme)

AD_COM_EXT2_CLASS_END(AAFEndian, AAFHeader2)
