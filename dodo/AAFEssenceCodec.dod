#c *********************************************************************
#c
#c $Id: AAFEssenceCodec.dod,v 1.32 2009/11/30 13:10:15 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceCodec\
#endm
#c
#startm .parent-module 0
AAFPlugin\
#endm
#c
AD_HEAD

AD_FORWARD_DECLARATION(AAFEssenceFormat)

AD_IDL(///
/// AAFEssenceCodec is DEPRECATED\, please use AAFEssenceCodec3.
///
/// The AAFEssenceCodec interface describes the calls of a plugin
/// which handles encoding media in a particular file format\, with
/// optional compression.  These methods are used internally by the SDK\,
/// and are not exported through the client interface.
///
/// The AAFPluginManager keeps a copy of each codec in a table\, along
/// with cached copies of pertinant metadata about the codec\, and
/// instantiates a copy of the codec for each media stream.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
///
/// AAFRESULT_NULL_PARAM
///   - One of the passed in pointers is NULL.
///
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(3631F7A1, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)

AD_DEFAULT_UUID(3631F7A2, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)
AD_COM_EXT2_CLASS_BEGIN(public IAAFEssenceCodec2, public IAAFEssenceCodec3)

AD_IDL(///
	///**************
	/// Meta codec functions.  Called to plug a codec into the SDK\, but
	/// NOT for each instance of a codec.
	///)


AD_XMETHOD1(SetEssenceAccess,
		   [in],
		   objIn,
		   AAFEssenceAccess,
		   pEssenceAccess,
		   The associated IAAFEssenceAccess,
     Set the essence access associated with the codec.  This routine
  /// is called by the SDK when creating or opening an essence stream\,
  /// in order to give the codec access to the AAFEssenceAccess
  /// object\, because this is the factory object for creating
  /// AAFEssenceFormats\.  It would be best to store away this pointer
  /// inside of the codec.  In order to avoid circular reference counting
  /// problems DO NOT AddRef this interface pointer. Also\, DO NOT save
  /// any interface derived from the the saved IAAFEssenceAccess 
  /// pointer using QueryInterface unless the reference count is restored
  /// by a call to ReleaseReference.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceAccess is null.)



AD_XMETHOD1(CountFlavours,
		   [out],
		   objPass,
		   aafUInt32*,
		   pCount,
		   Number of flavours supported,
     Some codecs have different variants or flavours of the media
  /// handled by a single codec.  \(For example\, the Avid AVR codec
  /// handles multiple AVRs.\)  This call returns the number of
  /// flavours \(usually one\) supported by this codec.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD2(GetIndexedFlavourID,
		   [in],
		   objPass,
		   aafUInt32,
		   index,
		   Which flavour to get the ID for,
		   [out],
		   objPass,
		   aafUID_t *,
		   pVariant,
		   The returned flavour ID,
     Some codecs have flavour handled by a single codec.  \(For
  /// example\, the Avid AVR codec handles multiple AVRs.\)  The number
  /// of flavours is returned by CountFlavours\(\)\, and cached by
  /// the AAFPluginManager. 
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVariant is null.
  ///
  /// AAFRESULT_OUT_OF_RANGE
  ///   - index must be \>\= 0 and \< the number of flavours returned
  ///     in CountFlavours\(\).)


AD_XMETHOD1(CountDataDefinitions,
		   [out],
		   objPass,
		   aafUInt32*,
		   pCount,
		   Number of essence data definitions supported,
     Some codecs support formats which can encode multiple types of
  /// essence.  For example\, interleaved video and audio.  This call
  /// returns the number of essence data definitions \(usually one\)
  /// supported by this codec.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD2(GetIndexedDataDefinition,
		   [in],
		   objPass,
		   aafUInt32,
		   index,
		   Which data definition to get,
		   [out],
		   objPass,
		   aafUID_t *,
		   pDataDefID,
		   The returned dataDefinition ID,
     All codecs handle at least one kind of media \(picture\, sound\,
  /// control\) but some handle more than one.  The kind of media is
  /// specified by an AUID representing an AAFDataDef.  The number of
  /// data definitions is returned by CountDataDefinitions\, and
  /// cached by the AAFPluginManager.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppDataDef is null.)


AD_XMETHOD1(GetMaxCodecDisplayNameLength,
			[out],
			objPass,
			aafUInt32*,
			pBufSize,
			length of the buffer required to hold the longest flavour Name,
     This method should return the buffer size required to hold the
  /// largest display name \(and optional flavour\) including the
  /// terminating NUL character.  The client code does not expect this
  /// to be equal to any particular display name.
  ///
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pBufSize is null.)


AD_XMETHOD3(GetCodecDisplayName,
			[in\, ref],
			objPass,
			aafUID_constref,
			flavour,
			which flavour of the codec to use\, or kNoCodecFlavour,
			[out\, string\, size_is\(bufSize\)],
			objPass,
			aafCharacter *,
			pName,
			Human-readable name of the flavour,
			[in],
			objPass,
			aafUInt32,
			bufSize,
			length of the buffer to hold flavour Name,
     Given a flavour ID\, return the human readable name.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pName is null.)

	
AD_IDL(///
	///**************
	/// General purpose codec functions\, always callable \(whether or
	/// not Open or Create have been called.\)  These are called by
	/// AAFEssenceAccess to before the stream is actually opened\, and
	/// therefore may not rely on data which is created during open or
	/// create.  This is why they take so many parameters.
	///)


AD_XMETHOD4(CountChannels,
			[in],
			objIn,
			AAFSourceMob,
			fileMob,
			Get the number of processable channels on this file mob,
			[in\, ref],
			objPass,
			aafUID_constref,
			essenceKind,
			This is the type of essence to open,
			[in],
			objIn,
			AAFEssenceStream,
			stream,
			Here is an essence stream with the data,
			[out],
			objPass,
			aafUInt16 *,
			pNumChannels,
			The number of channels present,
     Returns the number of channels which this codec can handle of the
  /// given essence kind.  If the essence kind is not handled by this
  /// codec at all\, then return zero channels through pNumChannels\,
  /// and return AAFRESULT_SUCCESS.
  ///
  /// The AAFEssenceStream is owned by IAAFEssenceAccess\, and
  /// therefore should not AddRef\(\) it.  The codec may seek and read
  /// the supplied open stream as much as required to determine the
  /// number of channels\, but should not assume that the Open method
  /// on the codec has been called \(ie: it must parse any header
  /// itself\). If the given IAAFEssenceStream pointer is NULL then
  /// the codec should look at the information in then source mob and 
  /// essence descriptor \(in the mob\).
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumChannels is null.)


AD_XMETHOD3(GetSelectInfo,
			[in],
			objIn,
			AAFSourceMob,
			fileMob,
			Get the number of processable channels on this file mob,
			[in],
			objIn,
			AAFEssenceStream,
			stream,
			Here is an essence stream with the data,
			[out],
			objPass,
			aafSelectInfo_t *,
			pSelectInfo,
			Information required to select by media criteria,
     Returns a block of information required to select essence by
  /// criteria.  The SDK will use this criteria to find the best
  /// essence to fit requirements of size or speed.
  ///
  /// The AAFEssenceStream is owned by IAAFEssenceAccess\, and
  /// therefore should not AddRef\(\) it.  The codec may seek and read
  /// the supplied open stream as much as required to determine the
  /// number of channels\, but should not assume that the Open method
  /// on the codec has been called \(ie: it must parse any header
  /// itself\). If the given IAAFEssenceStream pointer is NULL then
  /// the codec should look at the information in then source mob and 
  /// essence descriptor \(in the mob\).
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSelectInfo is null.)


AD_XMETHOD7(ValidateEssence,
			[in],
			objIn,
			AAFSourceMob,
			fileMob,
			Run a check on this file mob,
			[in],
			objIn,
			AAFEssenceStream,
			stream,
			and this essence data stream,
			[in],
			enumIn,
			aafCheckVerbose_t,
			verbose,
			This is the verbosity level of the output,
			[in],
			enumIn,
			aafCheckWarnings_t,
			outputWarnings,
			This determines whether the output contains warnings,
			[in],
			objPass,
			aafUInt32,
			bufSize,
			length of the buffer to hold the error result,
			[out\, size_is\(bufSize\)\, length_is\(*pBytesRead\)],
			objPass,
			aafCharacter *,
			pErrorText,
       Human-readable text describing problems \(or lack therof\) with
  /// the essence, 
			[out],
			objPass,
			aafUInt32*,
			pBytesRead,
			The number of result bytes returned,
     This method validates the metadata associated with the essence
  /// data.  It may compare fields within the data\, and also compare
  /// essence data against values in the IAAFFileDescriptor.
  /// 
  /// The fields bufSize\, pErrorText\, and pBytes read are used to
  /// return a textual description of any problems encountered.  If no
  /// problems were encountered\, pBytesRead should be zero.
  /// 
  /// This method is used during client and SDK validation\, and is not
  /// intended for general use.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pErrorText is null.)


AD_XMETHOD6(Create,
			[in],
			objIn,
			AAFSourceMob,
			fileMob,
			Create the essence attached to this file mob,
			[in\, ref],
			objPass,
			aafUID_constref,
			flavour,
			which flavour of the codec to use,
			[in\, ref],
			objPass,
			aafUID_constref,
			essenceKind,
			This is the type of essence to create,
			[in\, ref],
			objPass,
			aafRational_constref,
			sampleRate,
			The sample rate for this essence,
			[in],
			objIn,
			AAFEssenceStream,
			stream,
			Here is an essence stream with the data,
			[in],
			enumIn, 
			aafCompressEnable_t,
			compEnable,
			optionally compressing,
     Initalize the stream to be of the correct format with no data and
  /// default metadata\, attach the correct type of EssenceDescriptor
  /// to the fileMob\, and file in the default metadata on the
  /// descriptor also.  Prepare the stream for writing the first sample
  /// of data.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceAccess is null.
  ///
  /// AAFRESULT_STREAM_FULL
  ///   - The essence can not be written because of a fault such as a
  ///     disk full error in the underlying operating system.)


AD_XMETHOD4(Open,
			[in],
			objIn,
			AAFSourceMob,
			fileMob,
			Open the essence attached to this file mob,
			[in],
			enumIn,
			aafMediaOpenMode_t,
			openMode,
			In this mode,
			[in],
			objIn,
			AAFEssenceStream,
			stream,
			Here is an essence stream with the raw data,
			[in],
			enumIn, 
			aafCompressEnable_t,
			compEnable,
			optionally decompressing,
     Read the metadata from the essence descriptor and\/or the
  /// formatted data\, and prepare the stream for reading the first
  /// sample of data.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceAccess is null.
  ///
  /// AAFRESULT_ESSENCE_NOT_FOUND
  ///   - The essence could not be located inside of the current file\,
  ///     or by following any of the locators.)
	

AD_IDL(///
	///**************
	/// Essence access codec functions\, Open or Create must have been
	/// called.
	///)


AD_XMETHOD2(CountSamples,
		    [in\, ref],
		    objPass,
		    aafUID_constref,
		    essenceKind,
			Tell how many samples of this type are on the mob,
			[out],
			objPass,
			aafLength_t *,
			pNumSamples,
			The number of samples present of the given essence kind,
     Return the number of samples present on a given essenceKind.  The
  /// assumption is made that all slots of the same essence kind have
  /// the same number of samples.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumSamples is null.)


AD_METHOD5(WriteSamples,
	[in],
	aafUInt32,
	nSamples,
	write this many samples,
	[in],
	aafUInt32,
	buflen,
	from a buffer of this size,
	[in\\\,size_is\\\(buflen\\\)],
	aafDataBuffer_t,
	buffer,
	from a buffer,
	[out\\\, ref],
	aafUInt32 *,
	samplesWritten,
	number of samples actually written,
	[out\\\, ref],
	aafUInt32 *,
	bytesWritten,
	number of bytes actually written,
     Writes data the given essence stream.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\\\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_ZERO_SAMPLESIZE
  ///	 - The sample size of the stream has not been set.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - buffer or pResultParm is null.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - One of the supplied buffers is not large enough to hold the
  ///     given number of samples.
  ///
  /// AAFRESULT_CODEC_CHANNELS
  ///   - SPecified channel numbers are out of range
  ///
  /// AAFRESULT_CONTAINERWRITE
  ///   - The essence can not be written because of a fault such as a
  ///     disk full error in the underlying operating system.)


AD_METHOD5(ReadSamples,
	[in],
	aafUInt32,
	nSamples,
	Read this many samples,
	[in],
	aafUInt32,
	buflen,
	into a buffer of this size,
	[out\\\, size_is\\\(buflen\\\)\\\,length_is\\\(*bytesRead\\\)],
	aafDataBuffer_t,
	buffer,
	The transfer buffer,
	[out\\\, ref],
	aafUInt32 *,
	samplesRead,
	The number of samples actually read,
	[out\\\, ref],
	aafUInt32 *,
	bytesRead,
	The number of bytes actually read,
     Read a given number of samples from an opened essence stream.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\\\, it should return the
  /// first one  encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTransferParm is null.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - The buffer is not large enough to hold the data
  ///
  /// AAFRESULT_CODEC_CHANNELS
  ///   - SPecified channel numbers are out of range
  ///
  /// AAFRESULT_END_OF_DATA
  ///   - Hit either the end-of-file on a raw essence file\\\, or the
  ///     end of the essence property.  The bytesRead fields inside of
  ///     pTransferParm correctly reflect the number of bytes and
  ///     complete samples on each track.)


AD_XMETHOD1(Seek,
			[in],
			objPass,
			aafPosition_t,
			sampleFrame,
			The sample frame to seek to.,
     Seek to a particular sample frame on the media.  The sample frame
  /// is one frame for picture\, and one sample times the number of
  /// interleaved channels for audio or other interleaved formats.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  ///
  /// AAFRESULT_BADSAMPLEOFFSET
  ///   - The supplied sample offset is out of range
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\) )


AD_XMETHOD1(CompleteWrite,
			[in],
			objIn,
			AAFSourceMob,
			pFileMob,
			Optional second essence descriptor to also update,
     Close the essence stream\, ready to open another or Finish.  In
  /// the case  where the client has created essence in an external AAF
  /// file\, two essence descriptors will need to be updated.  After
  /// updating the essence descriptor for the file which you are
  /// writing \(like updating the number of samples\)\, find the
  /// essence descriptor associated with pFileMob\, and make the same
  /// changes to that essence desriptor.
  ///
  /// NOTE that pFileMob may be NULL in all cases except writing
  /// essence to an external AAF file.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pDescriptor is null.
  ///
  /// AAFRESULT_STREAM_FULL
  ///   - The essence can not be written because of a fault such as a
  ///     disk full error in the underlying operating system.)


AD_IDL(///
	///**************
	/// Misc. Functions
	///)
	

AD_XMETHOD2(CreateDescriptorFromStream,
			[in],
			objIn,
			AAFEssenceStream,
			pStream,
			A raw file stream,
			[in],
			objIn,
			AAFSourceMob,
			pSourceMob,
			Put the finished descriptor on this source mob,
     Given some raw essence \(like a WAVE file\)\, create an
  /// AAFEssenceDescriptor to match\, with all fields filled in. 
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pStream or pSourceMob is null.)


AD_XMETHOD1(GetCurrentEssenceStream,
			[out],
			objOut,
			AAFEssenceStream,
			ppStream,
			The current essence stream,
     Return the current essence stream.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppStream is null.)

	
AD_XMETHOD1(PutEssenceFormat,
			[in],
			objIn,
			AAFEssenceFormat,
			pFormat,
			An essence format object,
     Set the format of the one or more parameters.  The client should
  /// have called GetDefaultEssenceFormat\(\) in order to find out what
  /// format codes are supported\, but you may still get format codes
  /// out of range.
  ///
  /// The expected bevhavior of this routine is to pre-scan the list
  /// for valid format codes and lengths before setting any data\, and
  /// returning AAFRESULT_INVALID_OP_CODEC.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_FILEFMT
  ///   - One of the format codes is not supported by this codec.  Call
  ///   GetDefaultEssenceFormat\(\) in order to find the list of
  ///   supported format codes.  No data will have been transferred.
  ///
  /// AAFRESULT_INVALID_PARM_SIZE
  ///   - The data supplied with the parameter is not of the correct
  ///     size.  No data will have been transferred.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFormat is null.)


AD_XMETHOD2(GetEssenceFormat,
			[in],
			objIn,
			AAFEssenceFormat,
			pFormatTemplate,
			An essence format object to use as a template of which fields to read,
			[out],
			objOut,
			AAFEssenceFormat,
			ppNewFormat,
			A new essence format object with the data filled in,
     Get the format of the one or more parameters by scanning the list
  /// of format codes supplied\, and filling in the data values.  The
  /// client should have called GetDefaultEssenceFormat\(\) in order to
  /// find out what format codes are supported\, but you may still get
  /// format codes out of range.
  ///
  /// The expected bevhavior of this routine is to pre-scan the list
  /// for valid format codes before setting any data\, and returning
  /// AAFRESULT_INVALID_OP_CODEC.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_FILEFMT
  ///   - One of the format codes is not supported by this codec.  Call
  ///     GetDefaultEssenceFormat\(\) in order to find the list of
  ///     supported format codes.  No data will have been transferred.
  ///
  /// AAFRESULT_INVALID_PARM_SIZE
  ///   - The data supplied with the parameter is not of the correct
  ///     size.  No data will have been transferred.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFormatTemplate or ppNewFormat is null.)

		
AD_XMETHOD1(GetDefaultEssenceFormat,
			[out],
			objOut,
			AAFEssenceFormat,
			ppNewFormat,
       An essence format with all valid parameter names and values
	/// filled in,
     Returns an essence format object specifying which contains the
  /// complete list of essence formats supported by this codec\, along
  /// with the default values.  Previous systems required you to
  /// \"know\" what parameters a given codec could support.  With this
  /// function\, a client application can check what the default
  /// parameter would be\, and change only those which are required.
  /// It differs from GetEssenceFormat\(\) in that it
  /// GetEssenceFormat\(\) returns the current client-set settings.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppNewFormat is null.)


AD_XMETHOD1(GetEssenceDescriptorID,
			[out],
			objPass,
			aafUID_t *,
			pDescriptorID,
			The stored object AUID of the essence descriptor class,
     Returns the stored object AUID of the essence descriptor class
  /// associated with this codec.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pDescriptorID is null.)


AD_XMETHOD1(GetEssenceDataID,
			[out],
			objPass,
			aafUID_t *,
			pEssenceDataID,
			The stored object AUID of the essence data class,
     Returns the stored object AUID of the essence data class
  /// associated with this codec. 
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceDataID is null.)


AD_XMETHOD3(GetIndexedSampleSize,
			[in\, ref],
			objPass,
			aafUID_constref,
			essenceDefID,
			The ID of the data definition describing the essence,
			[in],
			objPass,
			aafPosition_t,
			sampleOffset,
			The zero-based offset to get the size of,
			[out],
			objPass,
			aafLength_t *,
			pLength,
			The returned length of the given sample,
     Returns the size of the sample at the given offset\, and of the
  /// given data definition.  For formats with fixed sample sizes
  /// \(without a sample offset table\)\, this method should return the
  /// standard sample size.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLength is null.)


AD_XMETHOD2(GetLargestSampleSize,
			[in\, ref],
			objPass,
			aafUID_constref,
			essenceDefID,
			The ID of the data definition of the essence,
			[out],
			objPass,
			aafLength_t *,
			pLength,
			The returned length of the largest sample,
     Returns the size of the largest sample\, and of the given data
  /// definition.  For formats with fixed sample sizes \(without a
  /// sample offset table\)\, this method should return the standard
  /// sample size.
  /// 
  /// This method should return only the following codes.  If more than
  /// one of the listed errors is in effect\, it should return the
  /// first one encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLength is null.)

#c
#c AAFEssenceCodec2 methods
#c

AD_COM_METH(.method-SetFlavour)

#c
#c AAFEssenceCodec3 methods
#c

AD_COM_METH(.method-IsCompressionSupported)

AD_COM_EXT2_CLASS_END(AAFEssenceCodec2, AAFEssenceCodec3)
