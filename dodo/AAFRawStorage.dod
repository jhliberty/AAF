#c *********************************************************************
#c
#c $Id: AAFRawStorage.dod,v 1.5 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFRawStorage\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used by the toolkit to access storage in which
/// AAF files are to be read and written.  It is typically implemented
/// by clients of IAAFFileXXX.  Note that some implementations are
/// provided as a convenience to IAAFFileXXX clients.
///
/// When writing to a stream\, clients should be aware that the
/// stream's capacity may be limited.  To insure that writes will not
/// fail due to insufficient stream capacity\, clients can call
/// SetSize\(\) to pre-allocate capacity in the stream.  Writes done
/// within the size specified to the most recent successful SetSize\(\)
/// call are guaranteed to succeed.
///
/// Assumes that the storage has at least sequential access
/// capability.
AD_STD_COMMENT_IFC_HEADER)
AD_CLASS_UUID(F45FA9E0, 7166, 11D4, B8, 0D, 00, 00, 86, 3F, 2C, 27)

AD_DEFAULT_UUID(F45FA9E1, 7166, 11D4, B8, 0D, 00, 00, 86, 3F, 2C, 27)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(IsReadable,
			[out],
			objPass,
			aafBoolean_t *,
			pResult,
			set to true if readable,

     Sets *pResult to true if this storage is readable; sets it to
  /// false otherwise.
  ///
  /// Succeeds if:
  /// - The pResult pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\))


AD_XMETHOD3(Read,
			[out\, size_is\(bufSize\)\, length_is\(*pNumRead\)],
			objPass,
			aafMemPtr_t,
			buf,
			Buffer into which data is read,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			Size of buf in bytes,

			[out],
			objPass,
			aafUInt32 *,
			pNumRead,
			Number of bytes read,

     Attempts to read bufsize bytes from this stream.  Places the data
  /// into buf\, and puts the actual number of bytes read into
  /// *pNumRead.  If the end of the stream is encountered before
  /// bufSize bytes can be read\, the value written into *pNumRead may
  /// be smaller than bufSize.
  ///
  /// This call will advance the current position by *pNumRead bytes.
  ///
  /// Succeeds if:
  /// - The pNumBytes pointer is valid.
  /// - This stream is open for read or read/write.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(buf or pNumRead\)
  ///
  /// AAFRESULT_NOT_READABLE
  ///   - This stream is not open for read or read/write.)


AD_XMETHOD1(IsWriteable,
			[out],
			objPass,
			aafBoolean_t *,
			pResult,
			set to true if writeable,

     Sets *pResult to true if this storage is writeable; sets it to
  /// false otherwise.
  ///
  /// Succeeds if:
  /// - The pResult pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\))


AD_XMETHOD3(Write,
			[in\, size_is\(bufSize\)],
			objPass,
			aafMemConstPtr_t,
			buf,
			Buffer from which data is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			Number of bytes to write,

			[out],
			objPass,
			aafUInt32 *,
			pNumWritten,
			Number of bytes written,

     Writes bufsize bytes into this stream.  Obtains the data
  /// from buf.
  ///
  /// This call may fail if the stream has insufficient capacity to
  /// complete the request.  If this storage supports the
  /// IAAFRandomRawStorage interface\, the client can call
  /// IAAFRandomRawStorage::SetSize\(\) to attempt to reserve capacity
  /// in the stream; if the SetSize\(\) call succeeds\, subsequent
  /// Write\(\) calls within that capacity are guaranteed to succeed.
  ///
  /// This call will advance the current position by bufSize bytes.
  ///
  /// Succeeds if:
  /// - This stream is open for write or read/write.
  /// - Sufficient capacity exists in this stream to perform the
  ///   write.
  AD_STD_COMMENT_METH_ERR_HEADER
  ///
  /// AAFRESULT_NOT_WRITEABLE
  ///   - This stream is not open for write or read/write.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - This stream has insufficient capacity to perform the write.)


AD_METHOD0(Synchronize,
     Synchronizes any cached data with the underlying storage.
  AD_STD_COMMENT_METH_ERR_HEADER)
AD_XCLASS_END(Concrete, Transient)
