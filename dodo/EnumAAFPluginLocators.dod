#c *********************************************************************
#c
#c $Id: EnumAAFPluginLocators.dod,v 1.12 2009/06/01 11:46:51 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
EnumAAFPluginLocators\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// An object which allows iteration over all of the AAFLocators
/// attached to an AAFPluginDescriptor.  These locators describe how to
/// locate the exact object code described in the AAFPluginDescriptor.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFLocator)
AD_CLASS_UUID(AD1BB860, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AD1BB861, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFLocator,
			ppAAFLocator,
			The Next AAFLocator,
     Enumerates to the next element in the enumerators list. The
  /// caller is responsible for properly releasing the returned pointer
  /// when it is no longer needed.)


AD_X2METHOD3(Next,
			[in], objPass, aafUInt32, count, number of AAFLocators requested,xxx,xxx,
			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOutArray, AAFLocator, ppAAFLocators, array to receive AAFLocators,count,*pFetched,
			[out\,ref], objPass, aafUInt32 *, pFetched,
			number of actual AAFLocators fetched into ppAAFLocators array,xxx,xxx,
     Enumerates the next count elements \(AAFLocator pointers\) in the
  /// enumerator's list\, returning them in the given array along with
  /// the actual number of enumerated elements in pFetched. The caller
  /// is responsible for properly releasing the returned pointers.)


AD_METHOD1(Skip,
		   [in], aafUInt32, count, Number of elements to skip,
     Instructs the enumerator to skip the next count elements in the
  /// enumeration so that the next call to EnumAAFPluginLocators::Next
  /// will not return  those elements.)


AD_METHOD0(Reset,
     Instructs the enumerator to position itself at the beginning of
  /// the list of elements.
  ///
  /// There is no guarantee that the same set of elements will be
  /// enumerated on each pass through the list\, nor will the elements
  /// necessarily be enumerated inthe same order. The exact behavior
  /// depends on the collection being enumerated.)


AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFPluginLocators,
			ppEnum,
			new enumeration,
     Creates another AAFPluginLocators enumerator with the same state
  /// as the current enumerator to iterate over the same list. This
  /// method makes it possible to record a point in the enumeration
  /// sequence in order to return to that point at a later time.
  ///
  /// The caller must release this new enumerator separately from the
  /// first enumerator.)
AD_XCLASS_END(Concrete, Transient)
