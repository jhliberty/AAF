#c *********************************************************************
#c
#c $Id: AAFEssenceAccess.dod,v 1.42 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceAccess\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
#import ./AAFEssenceMultiAccess.exp
AD_HEAD

AD_IDL(///
/// AAFEssenceAccess is an interace which provides streaming access
/// over multiple channels of essence data.  This interface deals with
/// essence data which is in an uncompressed form\, and handles
/// compression or decompression of the data if required.  You may need
/// to QueryInterface for an AAFEssenceAccess interface in order to do
/// non-read write operations such as seek.
///
/// You should call the CreateMultiEssence or OpenMultiEssence calls on
/// AAFMasterMob in order to get an interface pointer to
/// AAFEssenceAccess\, as there is no public create or open method in
/// the interface.
///
/// A number of errors can be returned from most method calls\,  These
/// are:
///    AAFRESULT_NOMEMORY   -- The system ran out of memory processing
///                              the method.
///    AAFRESULT_NULL_PARAM -- A NULL parameter was passed in which
///                              was required.)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFLocator)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_CLASS_UUID(aed97eb1, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(aed97eb0, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_COM_EXT_CLASS_BEGIN(public IAAFEssenceMultiAccess)


AD_XMETHOD1(SetEssenceCodecFlavour,
	[in\, ref],
	objPass,
	aafUID_constref,
	flavour,
	The particular flavour,
	Sets which flavour of the codec ID is to be used.
  ///
  /// An example of a flavour would be a number of standard starting
  /// JPEG tables.)


AD_METHOD5(WriteSamples,
	[in],
	aafUInt32,
	nSamples,
	write this many samples,
	[in],
	aafUInt32,
	buflen,
	from a buffer of this size,
	[in\\\,size_is\\\(buflen\\\)],
	aafDataBuffer_t,
	buffer,
	from a buffer,
	[out\\\, ref],
	aafUInt32 *,
	samplesWritten,
	The number of samples actually written,
	[out\\\, ref],
	aafUInt32 *,
	bytesWritten,
	The number of bytes actually written,
     Writes data to the given essence stream.
  ///
  /// A single video frame is ONE sample.
  ///
  /// Buflen must be large enough to hold the total sample size.
  ///
  /// Possible Errors:
  ///   AAFRESULT_SINGLE_CHANNEL_OP -- Tried to write to an interleaved
  ///                                  stream.
  ///   AAFRESULT_BADDATAADDRESS    -- The buffer must not be a NULL
  ///                                  pointer.)


AD_XMETHOD2(GetLargestSampleSize,
	[in],
	objIn,
	AAFDataDef,
	pDataDef,
	for this essence type,
	[out],
	objPass,
	aafLength_t*,
	maxSize,
	the largest sample size,
     Returns the size in bytes of the largest sample for a given
  /// essence type.
  ///
  /// For uncompressed data\, or the output of the software codec\, the
  /// sample size will propably be a constant.
  ///
  /// The essence type parameter exists to support codecs with multiple
  /// interleaved essence types.)


AD_XMETHOD3(GetIndexedSampleSize,
	[in],
	objIn,
	AAFDataDef,
	pDataDef,
	and this essence type,
	[in],
	objPass,
	aafPosition_t,
	frameNum,
	for this [0-based] sample frame number,
	[out],
	objPass,
	aafLength_t*,
	frameSize,
	How big is the sample frame?,

     Returns the size in bytes of the given sample for a given essence
  /// type.
  ///
  /// For uncompressed data\, or the output of the software codec\, the
  /// sample size will propably be a constant.
  ///
  /// The essence type parameter exists to support codecs with multiple
  /// interleaved essence types.
  /// 
  /// Possible Errors:
  ///   AAFRESULT_NULL_PARAM      -- A return parameter was NULL.
  ///   AAFRESULT_BADSAMPLEOFFSET -- The supplied sample offset is out
  ///                                of range.)


AD_XMETHOD1(SetTransformParameters,
	[in],
	objIn,
	AAFEssenceFormat,
	op,
	A set of transforms to apply to the essence if required,
     Sets a series of format objects which will be used to describe
  /// the in-memory format.
  ///
  /// This is the format expected on writes and produced on reads.
  ///
  /// On writes\, the data will be written in this format\, except
  /// where a software codec may be used.  On reads\, the data will be
  /// translated to this format.
  ///
  /// The order of the parameters does matter\, as transformations will
  /// be applied in that order to get from the on-disk format to the
  /// in-memory format.)
	 

AD_XMETHOD2(CountSamples,
	[in],
	objIn,
	AAFDataDef,
	pDataDef,
	For this essence dataDef,
	[out],
	objPass,
	aafLength_t *,
	result,
	find out how many samples are present,
     Returns the number of samples of the given essence type on the
  /// given essence stream.
  /// 
  /// A video sample is one frame.)


AD_METHOD5(ReadSamples,
	[in],
	aafUInt32,
	nSamples,
	Read this many samples,
	[in],
	aafUInt32,
	buflen,
	into a buffer of this size,
	[out\\\, size_is\\\(buflen\\\)\\\,length_is\\\(*bytesRead\\\)],
	aafDataBuffer_t,
	buffer,
	The transfer buffer,
	[out\\\, ref],
	aafUInt32 *,
	samplesRead,
	The number of samples actually read,
	[out\\\, ref],
	aafUInt32 *,
	bytesRead,
	The number of bytes actually read,
     Read a given number of samples from an opened essence stream.
  ///
  /// This call will only return a single channel of essence from an
  /// interleaved stream.
  ///
  /// A video sample is a frame.
  ///
  /// Buflen is in bytes\\\, and should be large enough to hold the
  /// samples after the requested transforms have been applied.
  ///
  /// Possible Errors:
  ///   AAFRESULT_END_OF_DATA -- Hit the end of the essence \\\(like
  ///                            EOF\\\) while reading.
  ///   AAFRESULT_SMALLBUF    -- Buffer too small for samples.)


AD_METHOD1(Seek,
	[in],
	aafPosition_t,
	sampleFrameNum,
	A 0-based offset in units of the sample rate to seek to.,
	The seek function for essence.
  ///
  /// Useful only on reading\\\, you can't seek aound while writing
  /// essence.
  ///
  /// An audio frame is one sample across all channels.
  ///
  /// Possible Errors:
  ///   AAFRESULT_BADSAMPLEOFFSET -- Hit the end of the essence
  ///                                \\\(like EOF\\\) while reading.)


AD_XMETHOD2(GetFileFormat,
	[in],
	objIn,
	AAFEssenceFormat,
	opsTemplate,
	An AAFEssenceFormat with parameter codes set but no values,
	[out],
	objOut,
	AAFEssenceFormat,
	opsResult,
	Another AAFEssenceFormat with values set,
     Given an AAFEssenceFormat\, read the essence parameters inside
  /// and set the values from the file format.)


AD_XMETHOD1(GetFileFormatParameterList,
	[out],
	objOut,
	AAFEssenceFormat,
	ops,
	An ampty AAFEssenceFormat object,
     Returns an AAFEssenceFormat containing a list of all parameters
  /// supported by the current codec.)


AD_XMETHOD1(GetEmptyFileFormat,
	[out],
	objOut,
	AAFEssenceFormat,
	ops,
	An ampty AAFEssenceFormat object,
     Returns an empty AAFEssenceFormat object.  This is the factory
  /// method for AAFEssenceFormat.)


AD_XMETHOD1(PutFileFormat,
	[in],
	objIn,
	AAFEssenceFormat,
	ops,
	An AAFEssenceFormat with one or more parameter/value pairs,
     Given an AAFEssenceFormat\, read the essence parameters inside
  /// and change the file format.)


AD_METHOD2(GetCodecName,
	[in],
	aafUInt32,
	namelen,
	The size of the name buffer to be filled,
	[out\\\,size_is\\\(namelen\\\)],
	aafCharacter *,
	name,
	The buffer to fill,
     Returns the full name of the given codec expanded for human
  /// consumption.
  ///
  /// No other call uses this name\\\, so it may be fully
  /// descriptive\\\, esp. of limitations.
  ///
  /// The name will be truncated to fit within "buflen" bytes.
  ///
  /// Possible Errors:
  ///   AAFRESULT_CODEC_INVALID - The given codec ID is not loaded.
  ///   AAFRESULT_SMALLBUF      - The buffer is not large enough to
  ///                             hold the data.)


AD_METHOD1(GetCodecID,
	[out],
	aafCodecID_t *,
	codecID,
	Returns the current codec ID,
     Returns the codec ID being used to handle the specified essence.
  ///
  /// This will be required in order to send private data to the
  /// codec.
  ///
  /// The name will be truncated to fit within "buflen" bytes.)


AD_METHOD0(CompleteWrite,
     Handle any format related writing at the end and adjust mob
  /// lengths.  Must be called before releasing a write essence
  /// access.
  ///
  /// Possible Errors:
  ///   AAFRESULT_STREAM_FULL
  ///   - The essence can not be written because of a fault such as a
  ///     disk full error in the underlying operating system.)

AD_COM_METH(.method-WriteMultiSamples)

AD_COM_METH(.method-ReadMultiSamples)

AD_COM_EXT_CLASS_END(AAFEssenceMultiAccess)
