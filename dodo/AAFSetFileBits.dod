#c *********************************************************************
#c
#c $Id: AAFSetFileBits.dod,v 1.5 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSetFileBits\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is implemented by the toolkit\, and is provided to
/// clients of IAAFFile to allow them to supply the raw bits of a file
/// before open.
///
/// Note that this and the IAAFGetFileBits interfaces are different
/// than the IAAFRawStorage interfaces in that those are implemented by
/// clients to provide access to the desired media; these are provided
/// by the toolkit to provide read OR write \(but not both
/// simultaneously\) access to the raw bits.
AD_STD_COMMENT_IFC_HEADER)
AD_CLASS_UUID(6D950761, 8DB4, 11D4, B8, 0D, 00, 00, 86, 3F, 2C, 27)

AD_DEFAULT_UUID(6D950762, 8DB4, 11D4, B8, 0D, 00, 00, 86, 3F, 2C, 27)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD3(WriteAt,
			[in\, size_is\(bufSize\)],
			objPass,
			aafMemPtr_t,
			buf,
			Buffer from which data is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			Number of bytes,

			[in],
			objPass,
			aafUInt64,
			position,
			The position in bytes at which to read,

     Writes bufsize bytes into this file at the given byte offset.
  /// Obtains the data from buf.  A value of zero for position
  /// indicates the beginning of the stream.
  ///
  /// Succeeds if sufficient space is available in the file to write
  /// the given number of bytes at the given position.  It's possible
  /// to guarantee that this method will succeed if SetSize\(\) is first
  /// called to reserve the required space.  If SetSize\(\) is not first
  /// called to reserve the space\, this method will attempt to request
  /// it\, but this attempt may fail.
  ///
  /// Succeeds if:
  /// - The buf argument is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(buf\)
  ///
  /// AAFRESULT_DATA_SIZE
  ///   - The requested space is not available.)


AD_XMETHOD1(SetSize,
			[in],
			objPass,
			aafUInt64,
			size,
			The requested file size,

     Attempts to reserve size bytes of storage.
  ///
  /// Succeeds if:
  /// - The requested space is available.
  AD_STD_COMMENT_METH_ERR_HEADER
  ///
  /// AAFRESULT_DATA_SIZE
  ///   - size bytes are not available.)
AD_XCLASS_END(Concrete, Transient)
