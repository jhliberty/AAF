#c *********************************************************************
#c
#c $Id: h.mac,v 1.57 2009/06/10 13:14:07 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************


#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating C++ API header files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Pass through argument if for idl otherwise omit it.
#c
#c This macro is generally used to specify IDL options that would
#c make since to emit to c++.
#c To allow proper marshalling code generation of a struct: |
#c typedef struct
#c {
#c     aafInt32 length;
#c     AD_IDL([length_is(length)]) aafWchar *str;
#c } aafString_t;
#c
#startm AD_IDL 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#ifndef __%01_h__
#include "%01.h"
#endif
#endm


#ccccccccccccccccccccccccccc
#c
#c Includes another file in implementation (not header).
#c
#c Argument: Base filename
#c
#startm AD_CPPINCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Adds quoted header include statement to idl file
#c
#c Argument1: Filename file to be included.
#c
#c
#startm AD_CPP_QUOTE_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#ifndef __.this-module_h__
#define __.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endif // __.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
class %01; \
#endm

#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c
#c Just pass through the input. 
#c
#startm AD_CPP_QUOTE 01
%01 \
#endm

#ccccccccccccccccccccccccccc
#c
#c Generate a forward declaration of a class.
#c
#c Argument: class name
#c
#startm AD_FORWARD_DECLARATION 01
class %01;
#endm

#ccccccccccccccccccccccccccc
#c
#c Class UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_CLASS_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Default UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_DEFAULT_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
//@doc
//@class    .this-module | Implementation class for .this-module
#ifndef __.this-module_h__
#define __.this-module_h__

.copyright-message

#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef __.parent-module_h__
#include ".parent-module.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class .this-module : public .parent-module
{
public:

  //***********************************************************
  // Constructor/destructor
  //
  .this-module (aafBool doInit = kAAFTrue);

protected:
  virtual ~.this-module ();

public:\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT_CLASS_BEGIN 01
AD_CLASS_BEGIN\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT2_CLASS_BEGIN 02
AD_CLASS_BEGIN\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT3_CLASS_BEGIN 03
AD_CLASS_BEGIN\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT4_CLASS_BEGIN 04
AD_CLASS_BEGIN\
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a root class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef __AAFTypes_h__
#include "AAFTypes.h"
#endif

#ifndef __AAFResult_h_
#include "AAFResult.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class .this-module
{
public:

  //***********************************************************
  // Constructor/destructor
  //
  .this-module (aafBool doInit = kAAFTrue);
  virtual ~.this-module ();


  // Reference Counting interface
  virtual aafUInt32 AcquireReference() const;
  virtual aafUInt32 ReleaseReference();
  virtual aafUInt32 ReferenceCount() const;

public:\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %07
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %12
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %17
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %22
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %27
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %37
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %42
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %47
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %52
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    %49 .%48-indirection %50
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %57
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    %49 .%48-indirection %50,

    // @parm %52 %54 | %55 | %56
    %54 .%53-indirection %55
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c Allows two additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg1 is						arg2 is
#c     ----           ------						----
#c     objInArray     array size					-
#c     objOutArray    alloc'd array size			fetched array size
#c     objInCustom    custom input "marshal" code	-
#c     objOutCustom   custom output "marshal" code	-
#c     all else       -								-
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux1	aux2
#c ----------   ----------   ---------   ----    ----    -------- ----  ----
#c metharg 1    02           03          04      05      06       07	08
#c metharg 2    09           10          11      12      13       14	15
#c metharg 3    16           17          18      19      20       21	22
#c
#c Macro Arg 23: method description
#c
#startm AD_X2METHOD3 23
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %23
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %09 %11 | %12 | %13
    %11 .%10-indirection %12,

    // @parm %16 %18 | %19 | %20
    %18 .%17-indirection %19
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c Allows two additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg1 is						arg2 is
#c     ----           ------						----
#c     objInArray     array size					-
#c     objOutArray    alloc'd array size			fetched array size
#c     objInCustom    custom input "marshal" code	-
#c     objOutCustom   custom output "marshal" code	-
#c     all else       -								-
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux1	aux2
#c ----------   ----------   ---------   ----    ----    -------- --
#c metharg 1    02           03          04      05      06       07	08
#c metharg 2    09           10          11      12      13       14	15
#c metharg 3    16           17          18      19      20       21	22
#c metharg 4    23           24          25      26      27       28	29
#c
#c Macro Arg 30: method description
#c
#startm AD_X2METHOD4 30
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %30
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %09 %11 | %12 | %13
    %11 .%10-indirection %12,

    // @parm %16 %18 | %19 | %20
    %18 .%17-indirection %19,

    // @parm %23 %25 | %26 | %27
    %25 .%24-indirection %26
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c Allows two additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg1 is						arg2 is
#c     ----           ------						----
#c     objInArray     array size					-
#c     objOutArray    alloc'd array size			fetched array size
#c     objInCustom    custom input "marshal" code	-
#c     objOutCustom   custom output "marshal" code	-
#c     all else       -								-
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux1	aux2
#c ----------   ----------   ---------   ----    ----    -------- --
#c metharg 1    02           03          04      05      06       07	08
#c metharg 2    09           10          11      12      13       14	15
#c metharg 3    16           17          18      19      20       21	22
#c metharg 4    23           24          25      26      27       28	29
#c metharg 5    30           31          32      33      34       35	36
#c
#c Macro Arg 37: method description
#c
#startm AD_X2METHOD5 37
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %37
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %09 %11 | %12 | %13
    %11 .%10-indirection %12,

    // @parm %16 %18 | %19 | %20
    %18 .%17-indirection %19,

    // @parm %23 %25 | %26 | %27
    %25 .%24-indirection %26

    // @parm %30 %32 | %33 | %34
    %32 .%31-indirection %33
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
public:
  // Declare the module test method. The implementation of the will be be
  // in /test/.this-moduleTest.cpp.
  static AAFRESULT test();
};

#endif // ! __.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT_CLASS_END 01
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT2_CLASS_END 02
AD_CLASS_END\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT3_CLASS_END 03
AD_CLASS_END\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT4_CLASS_END 04
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFRoot
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
public:
  // Declare the module test method. The implementation of the will be be
  // in /test/.this-moduleTest.cpp.
  static AAFRESULT test();

  Impl.this-module * GetRepObject ();

protected:

  void InitRep (Impl.this-module * pObj);

private:

  Impl.this-module * _rep;
  
  // The number of outstanding references to this instance. ReleaseRef()
  // will decrement this value and delete this instance when the value
  // goes to 0.
  aafUInt32 _refCount;
};

#endif // ! __.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
%01-h
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies a method in a separate COM interface.
#c
#c Argument: method declaration
#c
#startm AD_COM_METH 01
%01-com-meth-h
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
  //***********************************************************
  // constructor
  //
  // %06
  .this-module (
    // @parm %01 %03 | %04 %05
    %03 .%02-indirection %04
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
  //***********************************************************
  // constructor
  //
  // %11
  .this-module (
    // @parm %01 %03 | %04 %05
    %03 .%02-indirection %04,

    // @parm %06 %08 | %09 %10
    %08 .%07-indirection %09
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
  //***********************************************************
  // constructor
  //
  // %16
  .this-module (
    // @parm %01 %03 | %04 %05
    %03 .%02-indirection %04,

    // @parm %06 %08 | %09 %10
    %08 .%07-indirection %09,

    // @parm %11 %13 | %14 %15
    %13 .%12-indirection %14
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
  //***********************************************************
  // constructor
  //
  // %21
  .this-module (
    // @parm %01 %03 | %04 %05
    %03 .%02-indirection %04,

    // @parm %06 %08 | %09 %10
    %08 .%07-indirection %09,

    // @parm %11 %13 | %14 %15
    %13 .%12-indirection %14,

    // @parm %16 %18 | %19 %20
    %18 .%17-indirection %19
  );\
#endm


#ccccccccccccccccccccccccccc
#c
#c Formats a return code comment
#c
#c arg1 = return code
#c arg2 = description
#c
#startm AD_MRETVAL 02
  // @rvalue %01 | %02\
#endm


#ccccccccccccccccccccccccccc
#c
#c Formats a method comment
#c
#c arg1 = brief method description
#c arg2 = return value strings
#c arg3 = lengthy method comments
#c
#startm AD_MCOMMENT 03
%01
  // @end
  //
  // RETURNS:
  // @rdesc Returns an AAFResult status code
  // @rvalue S_OK | The operation succeeded
%02  // @end
  //
  // COMMENTS:
  // @comm %03\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used to bootstrap an AAF
#c session by creating the first session object.
#c
#startm AD_BEGIN_SESSION 00
static AAFRESULT STDMETHODCALLTYPE
    BeginSession (aafProductIdentification_t * pIdent,
        AAFSession ** ppSession);
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used for a container to create
#c its contained objects in the cpp API.
#c
#startm AD_STATIC_CREATE 00
static AAFRESULT STDMETHODCALLTYPE
    CreateObject (.this-module ** result);
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros assist in passing arguments to methods of the
#c contained implementation class:
#c
#c The objIn macros are for use with pointers to objects that are
#c passed into the method.  The Type argument is the base type, with
#c no indirection specified.  For example, if you're passing in
#c AObject*, AObject should be specified for the Type argument.#c
#c
#c The objOut macros are for use with pointers to pointers to objects
#c that are passed out of the method.  The Type argument is the base
#c type, with no indirection specified.  For example, if you're
#c passing in AObject**, AObject should be specified for the Type
#c argument.
#c
#c The objPass macros are for use with any kind of data which is
#c passed exactly into or out of the method.
#c


#startm .objIn-adornment 00
#endm


#startm .objInArray-adornment 00
#endm


#startm .objPass-adornment 00
#endm


#startm .objOut-adornment 00
#endm


#startm .objOutArray-adornment 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Hack to quote the .this-module macro and keep it out of export
#c files.  Do not define this macro in exp.mac!!!
#c
#startm AD_EXPORT_THIS_MODULE 00
.this-module\
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Argument1: Abstract or Concrete
#c Argument2: Transient or StoredObject
#c            special cases:CommonBase and StoredObjectBase
#c
#c Note: Concrete-StoredObject means Persistent. In other words
#c Concrete-StoredObject objects (and derived objects) are the 
#c only types of objects that should ever be found in an AAF
#c file.
#c
#c Valid combiniations:          examples
#c -----------------------       ---------------
#c   Abstract-CommonBase         AAFRoot 
#c   Abstract-Transient          ????
#c   Abstract-StoredObjectBase   AAFObject
#c   Abstract-StoredObject       AAFSourceReference, AAFComponent, ...
#c   Concrete-Transient          EnumAAFMobs, EnumAAFMobSlots, ...
#c   Concrete-StoredObject       AAFSegment, AAFSourceClip, ...
#c
#startm AD_XCLASS_BEGIN 02
.begin-%01-%02
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Argument1: Abstract or Concrete
#c Argument2: Transient or StoredObject
#c            special cases:CommonBase and StoredObjectBase
#c
#c Note: Concrete-StoredObject means Persistent. In other words
#c Concrete-StoredObject objects (and derived objects) are the 
#c only types of objects that should ever be found in an AAF
#c file.
#c
#c Valid combiniations:          examples
#c -----------------------       ---------------
#c   Abstract-CommonBase         AAFRoot 
#c   Abstract-Transient          ????
#c   Abstract-StoredObjectBase   AAFObject
#c   Abstract-StoredObject       AAFSourceReference, AAFComponent, ...
#c   Concrete-Transient          EnumAAFMobs, EnumAAFMobSlots, ...
#c   Concrete-StoredObject       AAFSegment, AAFSourceClip, ...
#c
#startm AD_XCLASS_END 02
.end-%01-%02
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros implement all of the allowable
#c combinations of the AD_XCLASS_BEGIN and AD_XCLASS_END
#c


#ccccccccccccccccccccccccccc
#c Abstract-CommonBase
#c Special case for the common base class for all AAF objects,
#c Transient and StoredObject classes.
#c (first version defined backwords compatibility)

#startm .begin-Abstract-CommonBase 00
AD_ROOT_CLASS_BEGIN\
#endm

#startm .end-Abstract-CommonBase 00
AD_ROOT_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-StoredObjectBase
#c Special case for the base class for all AAF stored objects
#c (first version defined backwords compatibility)

#startm .begin-Abstract-StoredObjectBase 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-StoredObjectBase 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-Transient
#c (first version defined backwords compatibility)

#startm .begin-Abstract-Transient 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-Transient 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-StoredObject
#c (first version defined backwords compatibility)

#startm .begin-Abstract-StoredObject 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-StoredObject 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Concrete-Transient
#c (first version defined backwords compatibility)

#startm .begin-Concrete-Transient 00
AD_CLASS_BEGIN\
#endm

#startm .end-Concrete-Transient 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Concrete-StoredObject
#c Note: These are the persistent classes.
#c (first version defined backwords compatibility)

#startm .begin-Concrete-StoredObject 00
AD_CLASS_BEGIN\
#endm

#startm .end-Concrete-StoredObject 00
AD_CLASS_END\
#endm



#ccccccccccccccccccccccccccc
#c
#c Declaration for the dictionary's factory method.
#c
#startm AD_DICTIONARY_FACTORY 02
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE 
  %01 (
    // Class identifier (AUID) of the stored object. This is the
    // corresponding SMPTE identifier (as a GUID) for all predefined
    // built-in classes.
    const aafUID_t & id,

    // Address of output variable that receives the 
    // object pointer requested in pAUID
    AAFObject ** ppvObject);
#endm



#ccccccccccccccccccccccccccc
#c
#c Declaration for the dictionary's meta factory method.
#c
#startm AD_DICTIONARY_METAFACTORY 02
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE 
  %01 (
    // Identifier (id) of a class or type definition. This is the
    // corresponding SMPTE identifier (as a GUID) for all predefined
    // built-in definitions.
    const aafUID_t & id,

    // Address of output variable that receives the 
    // object pointer requested in pAUID
    AAFMetaDefinition ** ppMetaDefinition);
#endm



#ccccccccccccccccccccccccccc
#c
#c Declaration for the class definition's factory method.
#c
#startm AD_CLASSDEF_FACTORY 02
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE 
  %01 (
    // Class definition of the stored object to be created.
	AAFClassDef * pClassDef,

    // Address of output variable that receives the 
    // object pointer requested in pAUID
    AAFObject ** ppvObject);
#endm


#ccccccccccccccccccccccccccc
#c Beginning of the module definitions
#c
#startm AD_MODULE_BEGIN 02
#endm


#ccccccccccccccccccccccccccc
#c End of the module definitions
#c
#startm AD_MODULE_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes no arguments.
#c
#c Argument1: function name
#c Argument2: function description
#c
#startm AD_FUNCTION0 02
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes one argument.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt	
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: function description
#c
#startm AD_XFUNCTION1 07
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes two arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: function description
#c
#startm AD_XFUNCTION2 12
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes three arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: function description
#c
#startm AD_XFUNCTION3 17
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes four arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: function description
#c
#startm AD_XFUNCTION4 22
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes five arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: function description
#c
#startm AD_XFUNCTION5 27
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes six arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: function description
#c
#startm AD_XFUNCTION6 32
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes seven arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: function description
#c
#startm AD_XFUNCTION7 37
#endm


#ccccccccccccccccccccccccccc
#c
#c macro for things which are not to be exported.
#c
#startm AD_NO_EXPORT 01
%01\
#endm
