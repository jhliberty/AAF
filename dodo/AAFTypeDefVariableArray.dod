#c *********************************************************************
#c
#c $Id: AAFTypeDefVariableArray.dod,v 1.19 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefVariableArray\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
#import ./AAFTypeDefVariableArrayEx.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define variably-sized Array types used in
/// AAF persistent objects.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_FORWARD_DECLARATION(EnumAAFPropertyValues)
AD_CLASS_UUID(307e9e65, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(307e9e66, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)
AD_COM_EXT_CLASS_BEGIN(public IAAFTypeDefVariableArrayEx)
AD_XMETHOD3(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			type of each element to be contained in this array,

			[in],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,

     Initializes this type def to contain elements of the given type.
  /// Note that it is only possible to use certain types as the element
  /// type.  Those permissible types include:
  /// - AAFTypeDefInt
  /// - AAFTypeDefRecord
  /// - AAFTypeDefEnum
  /// - AAFTypeDefExtEnum
  /// - AAFTypeDefFixedArray
  /// - AAFTypeDefObjectRef
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pID is a valid pointer.
  /// - pTypeDef is a valid pointer.
  /// - pTypeName is a valid pointer.
  /// - element type is permissible for use in a VariableArray.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pTypeDef or pTypeName\)
  ///
  /// AAFRESULT_BAD_TYPE
  ///   - an illegal element type was given.)


AD_XMETHOD1(GetType,
			[out],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			type of elements in this array,

     Returns the type of elements in this array.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - ppTypeDef is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppTypeDef\))


AD_XMETHOD2(GetCount,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value of array,

			[out],
			objPass,
			aafUInt32 *,
			pCount,
			count of elements in the specified array property value,

     Returns number of array elements in the referenced property
  /// value.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pPropVal is a valid pointer.
  /// - pCount is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pPropVal or pCount\))


AD_XMETHOD2(AppendElement,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value corresponding to array to which element is appended,

			[in],
			objIn,
			AAFPropertyValue,
			pMemberPropVal,
			value to be appended to this array,

			Appends an element to the end of the array\, setting it to the
  /// value given in pMemberPropVal.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pInPropVal pointer is valid.
  /// - pMemberPropVal pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInPropVal or pMemberPropVal\))


AD_XMETHOD1(CreateEmptyValue,

			 [out],
			 objOut,
			 AAFPropertyValue,
			 ppPropVal,
			 newly-created empty property value,

     Creates an empty property value which contains a variable array
  /// type that initially is empty \(that is\, contains no elements
  /// yet\).
  ///
  /// Succeeds if all of the following are true:
  /// - the ppPropVal pointer is valid.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppPropVal\))


AD_X2METHOD3(CreateValueFromValues,

			 [in\, size_is\(numElements\)],
			 objInArray,
			 AAFPropertyValue,
			 pElementValues,
       array of property values for elements of array value which
  /// is to be created.,
			 numElements,
			 ,

			 [in],
			 objPass,
			 aafUInt32,
			 numElements,
			 size of pElementValues array.,
			 ,
			 ,

			 [out],
			 objOut,
			 AAFPropertyValue,
			 ppPropVal,
			 newly-created property value,
			 ,
			 ,

     Creates a property value which contains a variable array type.
  /// The array elements in the property value are initialized to
  /// contain the given values\, passed in the pElementValues array.
  /// numElements\, which indicates the size of the pElementValues
  /// array\, determines the size of the array in the new array
  /// property value.
  ///
  /// Succeeds if all of the following are true:
  /// - the pElementValues pointer is valid.
  /// - the ppPropVal pointer is valid.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pElementValues or ppPropVal\))


AD_XMETHOD3(CreateValueFromCArray,
			[in\, size_is\(initDataSize\)],
			objPass,
			aafMemPtr_t,
			pInitData,
			pointer to compile-time C array containing data to use,

			[in],
			objPass,
			aafUInt32,
			initDataSize,
			size of data in pInitData\, in bytes,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			newly created property value,

     Creates a property value which contains a fixed array type.  The
  /// array elements in the property value are initialized from data in
  /// a C array which is pointed to by pInitData.  Requires that any
  /// structures declared within this array typedef have had their
  /// offsets registered with that type.  Returns the newly-created
  /// property value in ppPropVal.  The size of the newly-created array
  /// property value will be determined by the number of elements in
  /// the initialization C array\, as communicated by initDataSize.
  ///
  /// Succeeds if all of the following are true:
  /// - the pInitData pointer is valid.
  /// - the ppPropVal pointer is valid.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInitData or ppPropVal\)
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - any contained struct offsets have not yet been registered for
  ///    that typedef.)


AD_XMETHOD3(GetElementValue,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value to read,

			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into elements in this array type,

			[out],
			objOut,
			AAFPropertyValue,
			ppOutPropVal,
			value that is read,

     Gets a single property value corresponding to the indexed array
  /// element.  Places a property value representing the array element
  /// identified by the index into ppOutPropval.  Index is zero-based\,
  /// and must be less than the value returned by GetCount\(\).
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - the index exists in this array type def.
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pInPropVal or ppOutPropVal\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - The given index is out of range for this array type def.)


AD_XMETHOD3(GetCArray,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to read,
			
			[out\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer into which C array data should be written,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			size of pData buffer in bytes,

     Copies all the array data contained in the given property value\,
  /// interpreted as a fixed array of this type\, into the C array
  /// pointed to by pData.  Requires that any structures declared
  /// within this array typedef have had their offsets registered with
  /// that type.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPropVal pointer is valid.
  /// - the pData pointer is valid.
  /// - dataSize indicates pData is large enough to hold the data.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pData\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - dataSize indicates pData is too small.
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - struct offsets have not yet been registered for this typedef.)


AD_XMETHOD3(SetElementValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to write,

			[in],
			objPass,
			aafUInt32,
			index,
			zero-based index into members in this array type,

			[in],
			objIn,
			AAFPropertyValue,
			pMemberPropVal,
			value to be placed into this array,

     Sets the value of the single\, indicated element of the fixed
  /// array contained in pPropVal\, to the value contained in
  /// pMemberPropVal.  Index is zero-based\, and must be less than the
  /// value returned by GetCount\(\).  Property value must be of the
  /// same type as returned by GetType\(\).
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - the index exists in this array type def.
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInPropVal or ppOutPropVal\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - The given index is out of range for this array type def.)


AD_XMETHOD3(SetCArray,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			property value to write,

			[in\, size_is\(dataSize\)],
			objPass,
			aafMemPtr_t,
			pData,
			buffer from which C array data should be read,

			[in],
			objPass,
			aafUInt32,
			dataSize,
			size of pData buffer in bytes,

     Copies all the array data contained in the C array pointed to by
  /// pData into the given property value\, interpreting the data as a
  /// fixed array of this type.  Requires that any structures declared
  /// within this typedef have had their offsets registered with that
  /// type.  If dataSize indicates an array size different from the
  /// size currently in the indicated array property value\, that array
  /// property value will be resized.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPropVal pointer is valid.
  /// - the pData pointer is valid.
  /// - any contained compile-time struct has had its member offests
  ///   registered.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pPropVal or pData\)
  ///
  /// AAFRESULT_NOT_REGISTERED
  ///  - offsets of any contained struct have not yet been registered.)


AD_OVERRIDE(.method-GetTypeCategory)

AD_XMETHOD2(GetElements,
			[in],
			objIn,
			AAFPropertyValue,
			PSetPropVal,
			property value to read,

			[out],
			objOut,
			EnumAAFPropertyValues,
			ppEnum,
			enumerator across property values,

     Returns an enumerator across elements in this set.
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - The PSetPropVal pointer is valid.
  /// - The ppEnum pointer is valid.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either PSetPropVal or ppEnum\))

AD_COM_METH(.method-PrependElement)
AD_COM_METH(.method-RemoveElement)
AD_COM_METH(.method-InsertElement)

AD_COM_EXT_CLASS_END(AAFTypeDefVariableArrayEx)
