#c *********************************************************************
#c
#c $Id: AAFCodecDef.dod,v 1.17 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFCodecDef\
#endm
#c
#startm .parent-module 0
AAFDefObject\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used with an object representing a particular
/// kind of essence codec\, which may be implemented by one or more
/// AAFPluginDescriptors.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFClassDef)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(EnumAAFCodecFlavours)
AD_CLASS_UUID(AD1BB855, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AD1BB856, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,
		   [in\, ref],
		   objPass,
		   aafUID_constref,
		   id,
		   AUID for new DefObject,
		   [in\, string],
		   objPass,
		   aafCharacter_constptr,
		   pName,
		   Name for new DefObject,
		   [in\, string],
		   objPass,
		   aafCharacter_constptr,
		   pDescription,
		   Description for new DefObject,
		   Init all fields of a definition object.)


AD_XMETHOD2(IsEssenceKindSupported,
			[in],
			  objIn,
			  AAFDataDef,
			  pEssenceKind,
			  The essence kind,
			[out\,retval],
			  objPass,
			  aafBoolean_t*,
			  pIsSupported,
			  Is this type supported,
			Returns AAFTrue if the given codec support transfers to essence
  /// of the given essence kind.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pEssenceKind pointer is valid.
  /// - the pIsSupported pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsSupported.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceKind or pIsSupported is null.)

 
AD_XMETHOD1(AddEssenceKind,
			[in],
		    objIn,
			AAFDataDef,
			pEssenceKind,
			The essence kind,
	   Appends the given essence kind to those supported by the codec.
  /// This is dependant upon the format\, not an incomplete implementation.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceKind is null.
  ///
  /// AAFRESULT_DUPLICATE_ESSENCE_KIND
  ///   - the given essenceKind is already contained.)


AD_XMETHOD1(RemoveEssenceKind,
			[in],
		    objIn,
			AAFDataDef,
			pEssenceKind,
			The essence kind to remove,
     Removes the given essence kind from the list of those supported
  /// by the codec.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceKind is null.
  ///
  /// AAFRESULT_OBJECT_NOT_FOUND
  ///   - the given essenceKind is not already contained.)


AD_XMETHOD1(CountEssenceKinds,
			[out\, retval],
		    objPass,
			aafUInt32 *,
			pResult,
			The number of essence kinds,
     Places the number of supported essence kinds into *pResult.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is NULL.)


AD_XMETHOD1(GetEssenceKinds,
			[out\, retval],
			objOut,
			EnumAAFDataDefs,
			ppEnum,
			Essence Kind Enumeration,
			Places an IEnumAAFDataDefs enumerator for the essence kinds
  /// contained in the sequence into the *ppEnum argument.
  /// 
  /// The returned enumerator is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.
  ///
  /// E_FAIL
  ///   - Failed to create the enumerator.)


AD_XMETHOD1(AreThereFlavours,
			[out\,retval],
			  objPass,
			  aafBoolean_t *,
			  pResult,
			  True if there are flavours of this codec,
     Find out whether its worth iterating over flavours.  Flavours are
  /// used when a single codec can support multiple formats.  An
  /// example would be a codec which would accept a \"resolution ID\"
  /// for a particular manufacturer and set up all of the parameters.
  /// When a new resolution ID is released\, then a new codec plugin
  /// would give users the ability to use the new resolutions without
  /// upgrading the application.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - if Result is null.)


AD_XMETHOD1(GetFileDescriptorClass,
			[out],
			objOut,
			AAFClassDef,
			ppClass,
			Returned file descriptor class object,
     Places the file descriptor class object associated with this
  /// codec into the *ppClass argument.  If none exists yet\, NULL is
  /// placed into the*ppClass argument.
  ///
  /// The returned class object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppClass pointer is valid.
  /// - A valid file descriptor class exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppClass is null.)


AD_XMETHOD1(SetFileDescriptorClass,
			[in],
			objIn,
			AAFClassDef,
			pClass,
			File descriptor class object,
     Sets the file descriptor class associated with this codec to be
  /// the given one. 
  ///
  /// Succeeds if all of the following are true:
  /// - the pClass pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pClass is null.)


AD_XMETHOD1(EnumCodecFlavours,
			[out\,retval],
			  objOut,
			  EnumAAFCodecFlavours,
			  ppEnum,
			  Codec flavour Enumeration,
     Places an enumerator for codec flavour into the *ppEnum argument.
  /// The returned enumerator is AddRef\(\)ed before it is returned.
  /// 
  /// Flavours are used when a single codec can support multiple
  /// formats.  An example would be a codec which would accept a
  /// \"resolution ID\" for a particular manufacturer and set up all of
  /// the parameters.  When a new resolution ID is released\, then a
  /// new codec plugin would give users the ability to use the new
  /// resolutions without upgrading the application.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - if ppEnum is null.)
  
AD_XCLASS_END(Concrete, StoredObject)
