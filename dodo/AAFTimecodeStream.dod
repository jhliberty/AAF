#c *********************************************************************
#c
#c $Id: AAFTimecodeStream.dod,v 1.16 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTimecodeStream\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#import ./AAFSegment.exp
AD_HEAD
AD_IDL(///
/// Objects which support IAAFTimecodeStream specify a stream of
/// timecode data.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFSearchSource is
///     not a primary interface for a concrete class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_INCLUDE(AAFTypes)
AD_CLASS_UUID(7B007BF1, 2D39, 11d2, 80, 43, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(7B007BF2, 2D39, 11d2, 80, 43, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD2(GetPositionTimecode,

			[in],
			objPass,
			aafPosition_t,
			position,
			Zero based offset to set the timecode at,

			[out],
			objPass,
			aafTimecode_t *,
			timecode,
			Timecode [startFrame drop fps],

			Get the timecode fields at the given position.)


AD_XMETHOD2(SetPositionTimecode,
			[in],
			objPass,
			aafPosition_t,
			position,
			Zero-based offset to set the timecode at,

			[in],
			objPass,
			aafTimecode_t,
			timecode,
			Timecode [startFrame  drop  fps],

     Set the timecode fields for a given frame.  The frame index must
  /// be within the length of the object.)


AD_XMETHOD1(GetUserDataLength,
			[out],
			objPass,
			aafInt32 *,
			length,
			Fixed length of the user data [userbits] in bytes,
			Gets the length of the user data for one frame.)


AD_XMETHOD3(GetUserDataAtPosition,

			[in],
			objPass,
			aafPosition_t,
			position,
			Zero-based offset,

			[in],
			objPass,
			aafInt32,
			buflen,
			Length of the buffer,

			[out],
			objPass,
			aafDataBuffer_t,
			buffer,
			Passed in and filled with user data,

			Gets the user data [userbits] for a particular frame.)


AD_XMETHOD3(SetUserDataAtPosition,

			[in],
			objPass,
			aafPosition_t,
			position,
			Zero-based offset to set the userbits at,

			[in],
			objPass,
			aafInt32,
			buflen,
			Length of the buffer,

			[in],
			objPass,
			aafDataBuffer_t,
			buffer,
			user data for the given frame,

			Gets the user data [userbits] for a particular frame.)
							 

AD_XMETHOD1(SetSampleRate,
			[in],
			objPass,
			aafRational_t,
			sampleRate,
			The sample rate of the timecode data,
			Sets the sample rate of the timecode data.)


AD_XMETHOD1(GetSampleRate,
			[out],
			objPass,
			aafRational_t *,
			pSampleRate,
			The sample rate of the timecode data,
			Gets the sample rate of the timecode data.)


AD_XMETHOD1(SetSourceType,
			[in],
			enumIn,
			aafTimecodeSourceType_t,
			sourceType,
			The type \(LTC or VITC\) of the timecode data,
			Sets the type \(LTC or VITC\) of the timecode data.)


AD_XMETHOD1(GetSourceType,
			[out],
			objPass,
			aafTimecodeSourceType_t *,
			pSourceType,
			The type \(LTC or VITC\) of the timecode data,
			Gets the type \(LTC or VITC\) of the timecode data.)


AD_XMETHOD1(GetSampleSize,
			[out],
			objPass,
			aafUInt32 *,
			pSampleSize,
			The size \(in bytes\) of one sample of the timecode data,
			Gets the size \(in samples\) of one sample of the timecode data.)


AD_METHOD3(GetSource,
			[in],aafUInt32,valueSize,Size of preallocated buffer,
			[out\\\, size_is\\\(valueSize\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,pValue,Preallocated buffer to hold value,
			[out],aafUInt32*,bytesRead,Number of actual bytes read,
	 Writes the entire timecode data value into the pValue buffer.
  /// The buffer is allocated by the caller\\\, and the size of the
  /// buffer is given by valueSize.
  /// 
  /// Caller may call GetValueBufLen\\\(\\\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - valueSize indicates the buffer is large enough to hold the name.
  /// 
  /// If this method fails nothing will be written to *pValue.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - valueSize indicates the buffer is too small to hold the value.)


AD_XMETHOD1(GetSourceBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

     Returns the length of buffer required for the GetValue\(\)
  /// method.  The value is placed into the location specified by
  /// pLen.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  ///
  /// If this method fails nothing will be written to *pLen.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLen arg is NULL.)


AD_METHOD2(SetSource,
			[in],aafUInt32,valueSize, Size of preallocated buffer,
			[in\\\, size_is\\\(valueSize\\\)],aafDataBuffer_t,pValue, buffer containing value,
			The data value is set from a buffer of size valueSize.
  ///
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\\\(\\\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue is null.)


AD_OVERRIDE(.method-SegmentOffsetToTC)


AD_OVERRIDE(.method-SegmentTCToOffset)
AD_XCLASS_END(Concrete, StoredObject)
