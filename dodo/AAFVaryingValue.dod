#c *********************************************************************
#c
#c $Id: AAFVaryingValue.dod,v 1.24 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFVaryingValue\
#endm
#c
#startm .parent-module 0
AAFParameter\
#endm
#c
AD_HEAD
AD_IDL(///
/// The IAAFVaryingValue interface is implemented by objects that
/// specify a parameter whose value changes during the operation group.
/// The actual values are stored in one or more IAAFControlPoints.  For
/// parameters which are constant in value during the operation group\,
/// use IAAFConstantValue.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
#cAD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFControlPoint)
AD_FORWARD_DECLARATION(EnumAAFControlPoints)
AD_FORWARD_DECLARATION(AAFParameterDef)
AD_FORWARD_DECLARATION(AAFInterpolationDef)

AD_CLASS_UUID(91920d61, 2a2e, 11D2, bf, A3, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(91920d60, 2a2e, 11D2, bf, A3, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD2(Initialize,
			[in],
			objIn,
			AAFParameterDef,
			pParameterDef,
			Parameter definition for this object \(this determines the type of the varying value\),

			[in],
			objIn,
			AAFInterpolationDef,
			pInterpolation,
			InterpolationDefinition object,

     Initializes a new varying value object to be identified with the
  /// given the given parameter definition and interpolation definition.
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pParameterDef and pInterpolation are a valid pointers.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pParameterDef or pInterpolation\)
  /// )

AD_XMETHOD1(AddControlPoint,
			[in],
			objIn,
			AAFControlPoint,
			pControlPoint,
			pointer to IAAFControlPoint object,

     Adds a control point to the AAFVaryingValue object.
  /// The point will be sorted by time order\, not the order in which
  /// the points were added.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pControlPoint pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pControlPoint is null.)


AD_XMETHOD1(GetControlPoints,
			[out\,retval], 
			objOut,
			EnumAAFControlPoints,
			ppEnum, 
			Parameter definition enumeration,
     Return an enumerator for the list of IAAFControlPoints.  The list
  /// will be returned in time order\, not the order in which the
  /// points were added.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(CountControlPoints,
			[out],
			objPass,
			aafUInt32 *,
			pResult,
			Number of control points,
			This function returns the number of control points in the sequence.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD2(GetControlPointAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of control point to retrieve,

			[out\, retval],
			objOut,
			AAFControlPoint,
			ppControlPoint,
			Retrieved control point,
     This function retrieves the input control point at the given index in
  /// the given sequence.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppControlPoint pointer is valid.
  /// - index is less than the value returned by
  ///   CountControlPoints\(\).
  /// 
  /// If this method fails nothing will be written to *ppControlPoint.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pControlPoint is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountControlPoints\(\).)


AD_XMETHOD1(RemoveControlPointAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of control point to remove,
     This function removes the input control point at the given index in
  /// the given sequence.  Control points already existing at indices
  /// higher than the given index will be moved to the next lower index
  /// to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - index is less than the value returned by
  ///   CountControlPoints\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountControlPoints\(\).)


AD_XMETHOD1(GetInterpolationDefinition,
			[out],
			objOut,
			AAFInterpolationDef,
			ppInterpolation,
			Returned InterpolationDefinition object,
     Places the InterpolationDefinition object attached to this
  /// VaryingValue into the *ppInterpolation argument.  If none exists
  /// yet\, NULL is placed into the *ppInterpolation argument.
  ///
  /// The returned InterpolationDefinition object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppInterpolation pointer is valid.
  /// - A valid InterpolationDefinition exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppInterpolation is null.)

AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Mob Name,

     Returns the length of buffer required for the
  /// GetInterpolatedValue\(\) method.  The value is placed into the
  /// location specified by pLen.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  ///
  /// If this method fails nothing will be written to *pLen.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLen arg is NULL.)


AD_METHOD4(GetInterpolatedValue,
		   [in],
		   aafRational_t,
		   inputValue,
		   Position along the operation group,

		   [in],
		   aafInt32,
		   valueSize,
		   Size of preallocated buffer,

		   [out\\\,size_is\\\(valueSize\\\)\\\,length_is\\\(*bytesRead\\\)],
		   aafDataBuffer_t,
		   pValue,
		   Preallocated buffer to hold value,

		   [out],
		   aafInt32 *,
		   bytesRead,
		   Number of actual bytes read,

     Writes the interpolated value of the IAAFVaryingValue at a given
  /// position into the pValue buffer.  The buffer is allocated by the
  /// caller\\\, and the size of the buffer is given by valueSize.
  /// 
  /// Caller may call GetValueBufLen\\\(\\\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - valueSize indicates the buffer is large enough to hold the name.
  /// 
  /// If this method fails nothing will be written to *pValue.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - valueSize indicates the buffer is too small to hold the value.)
AD_XCLASS_END(Concrete, StoredObject)
