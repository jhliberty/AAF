#c *********************************************************************
#c
#c $Id: AAFTypeDefOpaque.dod,v 1.6 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefOpaque\
#endm
#c
#startm .parent-module 0
AAFTypeDefIndirect\
#endm
#c
#import ./AAFTypeDef.exp
#import ./AAFTypeDefIndirect.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define Integer types used in AAF persistent
/// objects.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)

AD_CLASS_UUID(FE717CAB, F04C, 11d3, 80, 0B, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(FE717CAC, F04C, 11d3, 80, 0B, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD2(GetActualTypeID,
			[in],
			objIn,
			AAFPropertyValue,
			pOpaquePropertyValue,
			indirect property value to read,
			
			[out],
			objPass,
			aafUID_t *,
			pActualTypeID,
			the type id of the actual data,
			Return the type id of the  actual data within the opaque property value.
  ///
  ///
  /// Succeeds if all of the following are true:
  /// - the pOpaquePropertyValue pointer is valid.
  /// - the pActualType pointer is valid.
  ///
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pOpaquePropertyValue or pActualTypeID\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - the type of pOpaquePropertyValue was not opaque. 
  ///)

AD_XMETHOD4(GetHandle,
			[in],objIn,AAFPropertyValue,pPropVal,value to get data from.,
			[in],objPass,aafUInt32,handleSize,Size of preallocated buffer,
			[out\, size_is\(handleSize\)\,length_is\(*bytesRead\)],objPass,aafDataBuffer_t,pHandle,Preallocated buffer to hold handle,
			[out],objPass,aafUInt32*,bytesRead,Number of actual bytes read,
     Used to read and save an unknown property without having to know its contents.
  /// This call fills in a handle to a block of data which can be saved in you application\, and
  /// later written to another file using SetHandle\(\).  Writes the data into the pHandle buffer. 
  /// The buffer is allocated by the caller\, and the size of the buffer is given by
  /// handleSize.
  /// 
  /// Caller may call GetHandleBufLen\(\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pHandle pointer is valid.
  /// - handleSize indicates the buffer is large enough to hold the
  ///   name.
  /// 
  /// If this method fails nothing will be written to *pHandle.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pHandle arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - handleSize indicates the buffer is too small to hold the
  ///     handle.)


AD_XMETHOD2(GetHandleBufLen,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,value to set.,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

     Returns the length of buffer required for the GetHandle\(\)
  /// method.  The handle is placed into the location specified by
  /// pLen.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  ///
  /// If this method fails nothing will be written to *pLen.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLen arg is NULL.)

AD_XMETHOD3(SetHandle,
			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,value to write data to.,

			[in], 
			objPass,
			aafUInt32, 
			handleSize, 
			Size of preallocated buffer,

			[in\, size_is\(handleSize\)], 
			objPass,
			aafDataBuffer_t, 
			pHandle, 
			buffer containing handle,

   This call takes a block of unknown data created by a previous call to GetHandle\(\)
  /// and saved in you application\, and sets an opaque property value.
  ///
  /// Succeeds if all of the following are true:
  /// - the pHandle pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pHandle is null.)

AD_XMETHOD3(CreateValueFromHandle,
		[in\, size_is\(initDataSize\)],
		objPass,
		aafMemPtr_t,
		pInitData,
		pointer to buffer containing handle to use,

		[in],
		objPass,
		aafUInt32,
		initDataSize,
		size of handle in pInitData,

		[out],
		objOut,
		AAFPropertyValue,
		ppOpaquePropertyValue,
		newly created property value,

   This call takes a block of unknown data created by GetHandle\(\)
  /// and saved in you application\, and creates an opaque property value.
  /// Returns the newly-created property value in ppOpaquePropertyValue.
  ///
  /// Succeeds if all of the following are true:
  /// - the pInitData pointer is valid.
  /// - the ppOpaquePropertyValue pointer is valid.
  /// - initDataSize indicates pInitData is the correct size for 
  ///   the actual type.
  /// - compile-time struct has had its member offests registered.
  ///
  /// If this method fails nothing will be written to *ppOpaquePropertyValue.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pInitData or ppOpaquePropertyValue\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - initDataSize indicates pInitData is of the wrong size.)

AD_OVERRIDE(.method-GetTypeCategory)

AD_XCLASS_END(Concrete, StoredObject)
