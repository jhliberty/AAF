#c *********************************************************************
#c
#c $Id: AAFDigitalImageDescriptor.dod,v 1.18 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFDigitalImageDescriptor\
#endm
#c
#startm .parent-module 0
AAFFileDescriptor\
#endm
#c
#c #import ./AAFFileDescriptor.exp
#import ./AAFDigitalImageDescriptor2.exp
AD_HEAD
AD_IDL(///
/// IAAFDigitalImageDescriptor is DEPRECATED.
/// Please use IAAFDigitalImageDescriptor2.
///
/// The IAAFDigitalImageDescriptor interface is implemented by objects
/// which describe video content data formatted either using RGBA or
/// luminance\/chrominance formatting.
///
/// The geometry properties accessed by Set/GetStoredView\(\)\,
/// Set/GetSampledView\(\)\, and Set/GetDisplayView\(\) describe the
/// dimensions and meaning of the stored pixels in the image.  The
/// geometry describes the pixels of an uncompressed image.
/// Consequently\, the geometry properties are independent of the
/// compression and subsampling.
///
/// Three separate geometries - stored\, sampled\, and display views -
/// are used to define a set of different views on uncompressed digital
/// data. All views are constrained to rectangular regions\, which means
/// that storage and sampling has to be rectangular.
/// 
/// The relationships among the views can be shown by the following
/// rectangles\, representing areas of a video image:
/// 
/// +------------------+
/// |                  |
/// |   Stored View    |
/// |                  |           +--------------+
/// +------------------+ <-------- |              |
/// |                  |  Sample   | Analog Video |
/// |   Sampled View   |  Process  |    Source    |
/// |                  |           | Information  |
/// | +--------------+ |           |              |
/// | |              | |           |              |
/// | | Display View | |           |              |
/// | |              | |           |              |
/// | +--------------+ |           |              |
/// |                  |           |              |
/// +------------------+ <-------- |              |
///                                +--------------+
///
/// The stored view is the entire data region corresponding to a single
/// uncompressed frame or field of the image\, and is defined by its
/// horizontal and vertical dimension properties. The stored view may
/// include data that is not derived from\, and would not usually be
/// translated back to\, analog data.
///
/// The sampled view is defined to be the rectangular dimensions in
/// pixels corresponding to the digital data derived from an analog or
/// digital source. These pixels reside within the rectangle defined by
/// the stored view. This would include the image and auxiliary
/// information included in the analog or digital source. For the
/// capture of video signals\, the mapping of these views to the
/// original signal is determined by the VideoLineMap property.
///
/// The display view is the rectangular size in pixels corresponding to
/// the viewable area. These pixels contain image data suitable for
/// scaling\, display\, warping\, and other image processing. The display
/// view offsets are relative to the stored view\, not to the sampled
/// view.
///
/// Although typically the display view is a subset of the sampled
/// view\, it is possible that the viewable area may not be a subset of
/// the sampled data. It may overlap or even encapsulate the sampled
/// data. For example\, a subset of the input image might be centered in
/// a computer-generated blue screen for use in a chroma key effect. In
/// this case the viewable pixels on disk would contain more than the
/// sampled image.
///
/// Each of these data views will have a width and height value. Both
/// the sampled view and the display view also have offsets relative to
/// the top left corner of the stored view.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that
///     IAAFDigitalImageDescriptor is a primary interface for an
///     abstract class\, so it is not appropriate for the
///     Initialize\(\) method to exist in this interface.  The
///     Initialize\(\) method is available through the concrete
///     object's primary interface.
///)
AD_CLASS_UUID(44861700,8AEA, 11d2, 81, 3C, 00, 60, 97, 31, 01, 72)

AD_DEFAULT_UUID(44861701, 8AEA, 11d2, 81, 3C, 00, 60, 97, 31, 01, 72)

AD_COM_EXT_CLASS_BEGIN(public IAAFDigitalImageDescriptor2)

AD_XMETHOD1(SetCompression,
			[in],
				objPass,
				aafUID_constref,
				compression,
				Optional.,
			Sets the kind of compression and format of compression
  /// information of the video essence data.  This property is
  /// optional.  If there is no compression\, the property is omitted.
  /// 
  /// If this method fails the Data Definition property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetCompression,
			[out],
				objPass,
				aafUID_t *,
				pCompression,
				Optional.,
			Gets the kind of compression and format of compression
  /// information of the video essence data.  This property is
  /// optional.
  ///
  /// Succeeds if all of the following are true:
  /// - the pCompression pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pCompression.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComporession arg is NULL.)


AD_XMETHOD2(SetStoredView,
			[in],
				objPass,
				aafUInt32,
				StoredHeight,
				Number of pixels in vertical dimension of stored view.,
			[in],
				objPass,
				aafUInt32,
				StoredWidth,
				Number of pixels in horizontal dimension of stored view.,
			Sets the dimension of the stored view.  Typically this includes
  /// leading blank video lines\, any VITC lines\, as well as the active
  /// picture area.
  /// 
  /// If this method fails the Stored Height and Stored Width
  /// properties will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD2(GetStoredView,
			[out],
				objPass,
				aafUInt32 *,
				pStoredHeight,
				Number of pixels in vertical dimension of stored view.,
			[out],
				objPass,
				aafUInt32 *,
				pStoredWidth,
				Number of pixels in horizontal dimension of stored view.,
			Gets the dimension of the stored view.  Typically this includes
  /// leading blank video lines\, any VITC lines\, as well as the active
  /// picture area.
  /// 
  /// Succeeds if all of the following are true:
  /// - pStoredHieght and pStoredWidth are valid pointers.
  /// 
  /// If this method fails\, the *pStoredHieght and *pStoredWidth will
  /// not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pStoredHeight or pStoredWidth is NULL.)


AD_XMETHOD4(SetSampledView,
			[in],
				objPass,
				aafUInt32,
				SampledHeight,
				Number of pixels in vertical dimension of sampled view.,
			[in],
				objPass,
				aafUInt32,
				SampledWidth,
				Number of pixels in horizontal dimension of sampled view.,
			[in],
				objPass,
				aafInt32,
				SampledXOffset,
				Number of pixels from top left corner of sampled view. Optional.,
			[in],
				objPass,
				aafInt32,
				SampledYOffset,
				Number of pixels from top left corner of sampled view. Optional.,
			Sets the dimensions of sampled view.  Typically this includes
  /// any VITC lines as well as the active picture area\, but excludes
  /// leading blank video lines.  The offset is specified relative to
  /// the rectangle specified by Set/GetStoredView\(\).
  ///
  /// The following properties are optional:
  ///
  ///     SampledXOffset - The default value is 0.  Use a value of 0 to
  ///                      select the default.
  ///     SampledYOffset - The default value is 0.  Use a value of 0 to
  ///                      select the default.
  ///
  /// Succeeds if all of the following are true:
  /// - The given dimensions exist within the StoredView.
  /// 
  /// If this method fails\, the SampledXOffset and SampledYOffset
  /// properties will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - The area specified by SampledHeight and SampledXOffset is
  ///     outside the StoredView\, or the area specified by SampledWidth
  ///     and SampledYOffset is outside the StoredView.)


AD_XMETHOD4(GetSampledView,
			[out],
				objPass,
				aafUInt32 *,
				pSampledHeight,
				Number of pixels in vertical dimension of sampled view.,
			[out],
				objPass,
				aafUInt32 *,
				pSampledWidth,
				Number of pixels in horizontal dimension of sampled view.,
			[out],
				objPass,
				aafInt32 *,
				pSampledXOffset,
				Number of pixels from top left corner of sampled view. Optional.,
			[out],
				objPass,
				aafInt32 *,
				pSampledYOffset,
				Number of pixels from top left corner of sampled view. Optional.,
			Gets the dimensions of sampled view.  Typically this includes
  /// any VITC lines as well as the active picture area\, but excludes
  /// leading blank video lines.  The offset is specified relative to
  /// the rectangle specified by Set/GetStoredView\(\).
  ///
  /// Succeeds if all of the following are true:
  /// - pSampledHeight\, pSampledWidth\, pSampledXOffset and
  ///   pSampledYOffset are valid pointers
  /// 
  /// If any of the input parameters are NULL\, the property will not
  /// be returned.
  ///
  /// If this method fails\, *pSampledHeight\, *pSampledWidth\,
  /// *pSampledXOffset\, and *pSampledYOffset will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any of pSampledHeight\, pSampledWidth\, pSampledXOffset\, or
  ///     pSampledYOffset are NULL.)


AD_XMETHOD4(SetDisplayView,
			[in],
				objPass,
				aafUInt32,
				DisplayHeight,
				Number of pixels in vertical dimension of display view. Optional.,
			[in],
				objPass,
				aafUInt32,
				DisplayWidth,
				Number of pixels in horizontal dimension of display view. Optional.,
			[in],
				objPass,
				aafInt32,
				DisplayXOffset,
				Number of pixels from the top-left corner of the display view. Optional.,
			[in],
				objPass,
				aafInt32,
				DisplayYOffset,
				Number pixels from the top-left corner of the display view. Optional.,
			Sets the dimension of display view.  Typically this includes
  /// the active picture area\, but excludes leading blank video lines
  /// and any VITC lines.  The offset is specified relative to the
  /// rectangle specified by Set/GetStoredView\(\).
  /// 
  /// The following properties are optional:
  ///
  ///     DisplayHeight  - The default value is the storedHeight. Use
  ///                      storedHeight to select the default.
  ///     DisplayWidth   - The default value is the storedWidth. Use
  ///                      storedWidth to select the default.
  ///     DisplayXOffset - The default value is 0.  Use a value of 0 to
  ///                      select the default.
  ///     DisplayYOffset - The default value is 0.  Use a value of 0 to
  ///                      select the default.
  ///
  /// Note that The specified display rectangle may exist outside the
  /// SampledView or even the StoredView.
  ///
  /// If this method fails the DisplayHeight\, DisplayWidth\, DisplayXOffset and
  /// DisplayYOffset properties will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - The area specified by DisplayHeight and DisplayXOffset is
  ///     outside the StoredView\, or the area specified by DisplayWidth
  ///     and DisplayYOffset is outside the StoredView.)


AD_XMETHOD4(GetDisplayView,
			[out],
				objPass,
				aafUInt32 *,
				pDisplayHeight,
				Number of pixels in vertical dimension of display view. Optional.,
			[out],
				objPass,
				aafUInt32 *,
				pDisplayWidth,
				Number of pixels in horizontal dimension of display view. Optional.,
			[out],
				objPass,
				aafInt32 *,
				pDisplayXOffset,
				Number of pixels from the top-left corner of the display view. Optional.,
			[out],
				objPass,
				aafInt32 *,
				pDisplayYOffset,
				Number pixels from the top-left corner of the display view. Optional.,
			Gets the dimension of display view.  Typically this includes
  /// the active picture area\, but excludes leading blank video lines
  /// and any VITC lines.  The offset is specified relative to the
  /// rectangle specified by Set/GetStoredView\(\).
  /// 
  /// Note that The specified display rectangle may exist outside the
  /// SampledView or even the StoredView.
  ///
  /// Succeeds if all of the following are true:
  /// - pDisplayHeight\, pDisplayWidth\, pDisplayXOffset and
  ///   pDisplayYOffset are valid pointers.
  /// 
  /// If this method fails\, *pDisplayHeight\, *pDisplayWidth\,
  /// *pDisplayXOffset\, and *pDisplayYOffset will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any of pDisplayHeight\, pDisplayWidth\, pDisplayXOffset\, or
  ///     pDisplayYOffset are NULL.)


AD_XMETHOD1(SetFrameLayout,
			[in],
				enumIn,
				aafFrameLayout_t,
				FrameLayout,
				layout of the frame,
			Sets the frame layout.  The frame layout describes whether all
  /// data for a complete sample is in one frame or is split into more
  /// than/ one field.
  ///
  /// Values are:
  ///
  ///    kNoLayout       - Default; not a valid value.
  ///    kFullFrame      - Each frame contains a full sample in
  ///                      progressive scan lines.
  ///    kSeparateFields - Each sample consists of two fields\, which
  ///                      when interlaced produce a full sample.
  ///    kOneField       - Each sample consists of two interlaced
  ///                      fields\, but only one field is stored in the
  ///                      data stream.
  ///    kMixedFields    - Similar to FullFrame\, except the two fields
  ///                      may have been sampled at different times.
  /// 
  /// Succeeds if all of the following are true:
  /// - frameLayout is a valid value
  /// 
  /// If this method fails\, the Frame Layout property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - FrameLayout is not a valid value.)


AD_XMETHOD1(GetFrameLayout,
			[out],
				objPass,
				aafFrameLayout_t *,
				pFrameLayout,
				layout of the frame,
			Gets the frame layout.  The frame layout describes whether all
  /// data for a complete sample is in one frame or is split into more
  /// than one field.
  /// 
  /// Values are:
  ///
  ///    kNoLayout       - Default; not a valid value.
  ///    kFullFrame      - Each frame contains a full sample in
  ///                      progressive scan lines.
  ///    kSeparateFields - Each sample consists of two fields\, which
  ///                      when interlaced produce a full sample.
  ///    kOneField       - Each sample consists of two interlaced
  ///                      fields\, but only one field is stored in the
  ///                      data stream.
  ///    kMixedFields    - Similar to FullFrame\, except the two fields
  ///                      may have been sampled at different times.
  /// 
  /// Succeeds if all of the following are true:
  /// - pFrameLayout is a valid pointer
  /// 
  /// If this method fails\, *pFrameLayout will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFrameLayout is NULL.)


AD_XMETHOD2(SetVideoLineMap,

			[in],
				objPass,
				aafUInt32,
				numberElements,
				The number of elements in the array,

			[in\, size_is\(numberElements\)],
				objPass,
				aafInt32 *,
				pVideoLineMap,
				Array to hold the Video Line Map information,
			Sets the VideoLineMap property.  The video line map specifies the
  /// scan line in the analog source that corresponds to the beginning
  /// of each digitized field.  For single-field video\, there is 1
  /// value in the array.  For interleaved video\, there are 2 values
  /// in the array.
  /// 
  /// Succeeds if all of the following are true:
  /// - pVideoLineMap is a valid pointer
  /// 
  /// If this method fails\, the Video Line Map property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVideoLineMap is NULL.)


AD_XMETHOD2(GetVideoLineMap,
			[in],
				objPass,
				aafUInt32,
				numberElements,
				The number of elements in the array,
			[out\, size_is\(numberElements\)],
				objPass,
				aafInt32 *,
				pVideoLineMap,
				Array to hold the Video Line Map information,
			Gets the VideoLineMap property.  The video line map specifies the
  /// scan line in the analog source that corresponds to the beginning of each
  /// digitized field.  For single-field video\, there is 1 value in the array.
  /// For interleaved video\, there are 2 values in the array.
  ///
  /// The values are written to the array specified by pVideoLineMap\,
  /// which is of size numberElements.  The required size may be found
  /// by calling GetVideoLineMapSize\(\).
  /// 
  /// Succeeds if all of the following are true:
  /// - pVideoLineMap is a valid pointer.
  /// - numberElements indicates the array is large enough to hold the
  ///   data.
  /// 
  /// If this method fails\, videoLineMap will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumberElements is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - numberElements indicates that the array is too small to hold
  ///     the data.)


AD_XMETHOD1(GetVideoLineMapSize,
			[out],
				objPass,
				aafUInt32 *,
				pNumberElements,
				The number of elements in the array,
			Get the number of elements in the VideoLineMap property array.
  /// 
  /// Succeeds if all of the following are true:
  /// - pNumberElements is a valid pointer
  /// 
  /// If this method fails\, *pNumberElements will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumberElements is NULL.)


AD_XMETHOD1(SetImageAspectRatio,
			[in],
				objPass,
				aafRational_t,
				ImageAspectRatio,
				Ratio between horizontal and vertical size,
			Sets the Image Aspect Ratio property.  This ratio describes the
  /// ratio between the horizontal size and the vertical size in the
  /// intended final image.
  ///
  /// Succeeds if all of the following are true:
  /// - 
  /// 
  /// If this method fails\, the Image Access Ratio property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetImageAspectRatio,
			[out],
				objPass,
				aafRational_t *,
				pImageAspectRatio,
				Ratio between horizontal and vertical size,
			Gets the Image Aspect Ratio property.  This ratio describes the
  /// ratio between the horizontal size and the vertical size in the
  /// intended final image.
  ///
  /// Succeeds if all of the following are true:
  /// - pImageAspectRatio is a valid pointer
  /// 
  /// If this method fails\, *pImageAspectRatio will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pImageAspectRatio is NULL.)


AD_XMETHOD1(SetAlphaTransparency,
			[in],
				enumIn,
				aafAlphaTransparency_t,
				AlphaTransparency,
				Alpha Transparency value.,
			Sets the AlphaTransparency property.  This property is optional.
  ///
  /// Valid values:
  ///	kMaxValueTransparent - means the maximum Alpha value is
  ///                           transparent
  ///    kMinValueTransparent - means the minimum Alpha value is
  ///                           transparent
  ///
  /// Succeeds if all of the following are true:
  /// - AlphaTransparency is a valid value.
  /// 
  /// If this method fails\, the AlphaTransparency property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - AlphaTransparency is not a valid value.)


AD_XMETHOD1(GetAlphaTransparency,
			[out],
				objPass,
				aafAlphaTransparency_t *,
				pAlphaTransparency,
				Alpha Transparency value.,
			Gets the AlphaTransparency property.  This property is optional.
  ///
  /// Valid values:
  ///	kMaxValueTransparent - means the maximum Alpha value is transparent
  ///    kMinValueTransparent - means the minimum Alpha value is transparent
  ///
  /// Succeeds if all of the following are true:
  /// - pAlphaTransparency is a valid pointer
  /// 
  /// If this method fails\, pAlphaTransparency not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pAlphaTransparency is NULL.)


AD_XMETHOD1(SetGamma,
			[in],
				objPass,
				aafUID_t,
				Gamma,
				Optional,
			Sets the TransferCharacteristic property.
  ///
  /// Succeeds if all of the following are true:
  /// - 
  /// 
  /// If this method fails\, the Gamma property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetGamma,
			[out],
				objPass,
				aafUID_t *,
				pGamma,
				Optional.,
			Gets the TransferCharacteristic property.
  ///
  /// Succeeds if all of the following are true:
  /// - pGamma is a valid pointer
  /// 
  /// If this method fails\, pGamma will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pGamma is NULL.)


AD_XMETHOD1(SetImageAlignmentFactor,
			[in],
				objPass,
				aafUInt32,
				ImageAlignmentFactor,
				Optional.,
			Sets the ImageAlignmentFactor property.  Specifies the alignment
  /// when storing the digital essence.  For example\, a value of 16
  /// means that the image is stored on 16-byte boundaries.  The
  /// starting point for a field will always be a multiple of 16 bytes.
  /// If the field does not end on a 16-byte boundary\, it is padded
  /// out to the next 16-byte boundary.
  ///
  /// Succeeds if all of the following are true:
  /// 
  /// If this method fails\, the ImageAlignmentFactor property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetImageAlignmentFactor,
			[out],
				objPass,
				aafUInt32 *,
				pImageAlignmentFactor,
				Optional.,
			Gets the ImageAlignmentFactor property.  Specifies the alignment when
  /// storing the digital essence.  For example\, a value of 16 means that the image
  /// is stored on 16-byte boundaries.  The starting point for a field will always
  /// be a multiple of 16 bytes.  If the field does not end on a 16-byte boundary\,
  /// it is padded out to the next 16-byte boundary.
  ///
  ///
  /// Succeeds if all of the following are true:
  /// - pImageAlignmentFactor is a valid pointer
  /// 
  /// If this method fails\, pImageAlignmentFactor will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pImageAlignmentFactor is NULL.)
#c
#c AAFDigitalImageDescriptor2 methods
#c

AD_COM_METH(.method-SetFieldDominance)
AD_COM_METH(.method-GetFieldDominance)
AD_COM_METH(.method-SetFieldStartOffset)
AD_COM_METH(.method-GetFieldStartOffset)
AD_COM_METH(.method-SetFieldEndOffset)
AD_COM_METH(.method-GetFieldEndOffset)
AD_COM_METH(.method-SetTransferCharacteristic)
AD_COM_METH(.method-GetTransferCharacteristic)
AD_COM_METH(.method-SetCodingEquations)
AD_COM_METH(.method-GetCodingEquations)
AD_COM_METH(.method-SetColorPrimaries)
AD_COM_METH(.method-GetColorPrimaries)
AD_COM_METH(.method-SetDisplayF2Offset)
AD_COM_METH(.method-GetDisplayF2Offset)
AD_COM_METH(.method-SetStoredF2Offset)
AD_COM_METH(.method-GetStoredF2Offset)
AD_COM_METH(.method-SetActiveFormatDescriptor)
AD_COM_METH(.method-GetActiveFormatDescriptor)
AD_COM_METH(.method-SetSignalStandard)
AD_COM_METH(.method-GetSignalStandard)

AD_COM_EXT_CLASS_END(AAFDigitalImageDescriptor2)
