#c *********************************************************************
#c
#c $Id: AAFOperationGroup.dod,v 1.39 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFOperationGroup\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#c #import ./AAFSegment.exp
AD_HEAD
AD_IDL(///
/// The IAAFOperationGroup interface is implemented by objects describe
/// an operation \(such as an effect\) affecting the interpretation of
/// zero or more input segments.  OperationGroup objects may include
/// any object implementing the IAAFSegment interface as source
/// material\, including another nested OperationGroup object.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFMob is a
///     primary interface for an abstract class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_INCLUDE(AAFTypes)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFOperationDef)
AD_FORWARD_DECLARATION(AAFParameter)
AD_FORWARD_DECLARATION(AAFSourceReference)
AD_FORWARD_DECLARATION(EnumAAFOperationDefs)
AD_FORWARD_DECLARATION(EnumAAFParameterDefs)
AD_FORWARD_DECLARATION(EnumAAFParameters)
AD_FORWARD_DECLARATION(AAFSegment)
AD_CLASS_UUID(3AE3BA81, 2C98, 11d2, 80, 42, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(3AE3BA82, 2C98, 11d2, 80, 42, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,

			[in],
			objIn,
			AAFDataDef,
			pDataDef,
			Data Definition Object,

			[in],
			objPass,
			aafLength_t,
			length,
			Length property value,

			[in],
			objIn,
			AAFOperationDef,
			operationDef,
			Operation Definition object,

     Initializes an operation group object with the given property
  /// values.
  ///
  /// This function takes an already created operation definition
  /// object as an argument.  To add slots to the operation group\, call
  /// AddNewSlot.  To add renderings\, call SetRender.)


AD_XMETHOD1(GetOperationDefinition,

			[out],
			objOut,
			AAFOperationDef,
			ppOperationDef,
			Operation definition object,
		   Returns the operation definition for this invocation.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppOperationDef pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppOperationDef.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - This property does not exist in the file.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppOperationDef arg is NULL.)

AD_XMETHOD1(SetOperationDefinition,
			[in],
			objIn,
			AAFOperationDef,
			pOperationDef,
			Operation definition object,
    This function sets the operation definition for the given operation
  /// group.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pOperationDef pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pOperationDef arg is NULL.)

AD_XMETHOD1(GetRender,

			[out],
			objOut,
			AAFSourceReference,
			ppSourceRef,
			Final rendering segment,

	 Returns the segment that represents the optional rendering on an
  /// operation group object.  Working and final renderings are handled
  /// by using an IAAFEssenceGroup as the segment. 
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppSourceRef pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppSourceRef.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - This property does not exist in the file.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppSourceRef arg is NULL.)


AD_METHOD1(IsATimeWarp,

		   [out\\\, retval],
		   aafBoolean_t *,
		   pIsTimeWarp,
		   Returned boolean value,

	 This boolean function returns whether or not an operation group
  /// is a timewarp effect.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pIsTimeWarp pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pIsTimeWarp.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\\\(\\\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pIsTimeWarp arg is NULL.)


AD_METHOD1(GetBypassOverride,

		   [out],
		   aafUInt32 *,
		   pBypassOverride,
		   Bypass override property value,

     Returns the optional bypass override propertyvalue from the input
  /// operation def object.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pBypassOverride pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pBypassOverride.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\\\(\\\) called on it.
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - This property does not exist in the file.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pBypassOverride arg is NULL.)


AD_METHOD1(CountSourceSegments,

		   [out],
		   aafUInt32 *,
		   pResult,
		   Number of source media segments in the operation group,

     Returns the number of media sources to the operation group.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult arg is NULL.)


AD_METHOD1(IsValidTranOperation,

		   [out],
		   aafBoolean_t *,
		   pValidTransition,
		   TRUE if the operation group is valid in a transition,

     Verifies that the input operation group object can be used in a
  /// transition.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValidTransition pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pValidTransition.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\\\(\\\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValidTransition arg is NULL.)


AD_METHOD1(CountParameters,

		   [out],
		   aafUInt32 *,
		   pResult,
		   Number of parameter slots in the operation group,

     Returns the number of parameters in the operation group.
  ///
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult arg is NULL.)


AD_XMETHOD1(AddParameter,

			[in],
			objIn,
			AAFParameter,
			pParameter,
			Parameter to place in operation group slot,

     Adds a new parameter object.
  ///
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_DUPLICATE_PARAMETER
  ///   - The given argID is already present.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue arg is NULL.)


AD_XMETHOD1(AppendInputSegment,

			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to place in operation group,

     Appends another input segment to an operation group.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_DUPLICATE_INDEX
  ///   - The given index value is already present.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment arg is NULL.)


AD_XMETHOD1(PrependInputSegment,

			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to place in operation group,

     Prepends another input segment to an operation group.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_DUPLICATE_INDEX
  ///   - The given index value is already present.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment arg is NULL.)


AD_XMETHOD2(InsertInputSegmentAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index to place this segment,

			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to place in operation group,

     Inserts an input segment to an operation group at the given
  /// index.  The existing segments at the given and higher indices are
  /// moved up by one to make room.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// - the index is not greater than the value returned by
  ///   CountInputSegments\(\).
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_DUPLICATE_INDEX
  ///   - The given index value is already present.
  ///
  /// AAFRESULT_BAD_INDEX
  ///   - index is greater than the value returned by
  ///     CountInputSegments\(\).
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment arg is NULL.)


AD_XMETHOD1(SetRender,

			[in],
			objIn,
			AAFSourceReference,
			ppSourceRef,
			A segment containing a representation of the rendering,

     This function sets the final rendering for the given operation
  /// group to the input source clip.  \(Multiple renderings may exist if
  /// the source clip refers to a master mob that contains a Essence
  /// group.\)
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppSourceRef pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppSourceRef arg is NULL.)


AD_METHOD1(SetBypassOverride,

		   [in],
		   aafUInt32,
		   bypassOverride,
		   Bypass override,

     This function sets the optional bypass override property on the
  /// given operation group object.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\\\(\\\) called on it.)


AD_XMETHOD1(GetParameters,

			[out],
			objOut,
			EnumAAFParameters,
			ppEnum,
			Parameter enumerator,

	 returns an enumerator across all parameters.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum arg is NULL.)


AD_XMETHOD2(LookupParameter,

			[in],
			objPass,
			aafArgIDType_constref,
			argID,
			Arg ID,

			[out],
			objOut,
			AAFParameter,
			ppParameter,
			Parameter object,

	 Given an argID\, returns the corresponding parameter slot and
  /// parameter slot value.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppParameter pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppParameter.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_MISSING_PARAMETER
  ///   - The given argID is not present.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppParameter arg is NULL.)


AD_XMETHOD2(GetInputSegmentAt,

			[in],
			objPass,
			aafUInt32,
			index,
			0-based index into the effet inputs,

			[out],
			objOut,
			AAFSegment,
			ppInputSegment,
			Input segment,

     Given an index\, returns the corresponding input segment.
  /// Working and final renderings are handled by using an
  /// IAAFEssenceGroup as the segment.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppInputSegment pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppInputSegment.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_MISSING_INDEX
  ///   - The given index value is not present.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppInputSegment arg is NULL.)


AD_XMETHOD1(RemoveInputSegmentAt,

			[in],
			objPass,
			aafUInt32,
			index,
			0-based index into the effect inputs,

     Removes the segment at the given index.  Existing segments at
  /// higher indices are moved down by one to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the result of CountInputSegments\(\).
  /// 
  /// If this method fails no state will be changed.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_MISSING_INDEX
  ///   - The given index value is not present.)
AD_XCLASS_END(Concrete, StoredObject)
