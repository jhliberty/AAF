#c *********************************************************************
#c
#c $Id: AAFEssenceMultiAccess.dod,v 1.12 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceMultiAccess\
#endm
#c
AD_HEAD

AD_IDL(///
/// AAFEssenceMultiAccess is an interace which provides streaming
/// access over essence data.  This nterfaces deals with essence data
/// which is in an uncompressed form\, and handles compression or
/// decompression of the data if required.
///
/// You should call the CreateMultiEssence or OpenMultiEssence calls on
/// AAFMasterMob in order to get an interface pointer to
/// AAFEssenceAccess\, as there is no public create or open method in
/// the interface.
///
/// Objects implementing this interface also implement AAFEssenceAccess
/// for operations other than read and write.
///
/// A number of errors can be returned from most method calls\,  These
/// are:
///   AAFRESULT_NOMEMORY   -- The system ran out of memory processing
///                           the method. 
///   AAFRESULT_NULL_PARAM -- A NULL parameter was passed in which was
///                           required.)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFLocator)
AD_CLASS_UUID(D815E2B3, 2425, 11d3, 80, AD, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(D815E2B4, 2425, 11d3, 80, AD, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Abstract, Transient)
AD_METHOD3(WriteMultiSamples,
	[in],
	aafUInt16,
	arrayElemCount,
	number of elements in the array of transfer operations,

	[in\\\,size_is\\\(arrayElemCount\\\)],
	aafmMultiXfer_t *,
	xferArray,
       Points to an array of transfer parameters.  All fields in this
  /// array except for bytesXferred must be set up before doing the
  /// transfer.  Some of the fields in the xferArray structure are
  /// status results like bytesXferred and samplesXferred.
  ///
  /// The multiXfer_t structure has the following fields\\\, which
  /// specify one channel of data: 
  ///
  ///   essenceDef    [IN] -- The essence type definition
  ///   physical      [IN] -- The physical input-output channel
  ///   numSamples    [IN] -- The number of samples to transfer
  ///   buflen        [IN] -- The size of the buffer
  ///   buffer        [IN] -- The buffer for this,

	[out\\\,size_is\\\(arrayElemCount\\\)],
	aafmMultiResult_t *,
	resultArray,
       Put results into this array.  It has the following fields\\\,
  /// which return result for one channel of data:
  ///
  ///   bytesXfered   [OUT] -- The total number of bytes transferred
  ///   samplesXfered [OUT] -- The total number of samples transferred,

     Writes multiple channels worth of sample data to an interleaved
  /// data stream in the natural order for the CODEC.)


AD_XMETHOD3(ReadMultiSamples,
	[in],
	objPass,
	aafUInt16,
	elemCount,
	The size of the array for transfer operations.,

	[in\, size_is\(elemCount\)],
	objPass,
	aafmMultiXfer_t *,
	xferArray,
       Points to an array of transfer parameters.  All fields in this
  /// array except for bytesXferred must be set up before doing the
  /// transfer.  Some of the fields in the xferArray structure are
  /// status results like bytesXferred and samplesXferred.
  ///
  /// The multiXfer_t structure has the following fields\, which
  /// specify one channel of data:
  ///
  ///   essenceDef  [IN] -- The essence type definition
  ///   physical    [IN] -- The physical input-output channel
  ///   numSamples  [IN] -- The number of samples to transfer
  ///   buflen      [IN] -- The size of the buffer
  ///   buffer      [IN] -- The buffer for this,

	[out\, size_is\(elemCount\)],
	objPass,
	aafmMultiResult_t *,
	resultArray,
	Results go into this array.
  ///
  /// The aafmMultiResult_t structure has the following fields\,
  /// which return result for one channel of data: 
  ///
  ///   bytesXfered   [OUT] -- The total number of bytes transferred
  ///   samplesXfered [OUT] -- The total number of samples transferred,
  
     Reads one or more channels from an interleaved data stream.
  /// Possible Errors:
  ///
  ///   Standard errors \(see top of file\).
  ///
  ///   AAFRESULT_END_OF_ESSENCE -- Hit the end of the essence \(like
  ///                               EOF\) while reading.)
AD_XCLASS_END(Abstract, Transient)
