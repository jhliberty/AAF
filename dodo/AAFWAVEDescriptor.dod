#c *********************************************************************
#c
#c $Id: AAFWAVEDescriptor.dod,v 1.10 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFWAVEDescriptor\
#endm
#c
#startm .parent-module 0
AAFFileDescriptor\
#endm
#c
#c #import ./AAFFileDescriptor.exp
AD_HEAD
AD_IDL(///
/// The IAAFWaveDescriptor interface is implemented by objects which
/// describe audio content data formatted according to the RIFF
/// Waveform Audio File Format \(WAVE\).
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(4c2e1691, 8ae6, 11d2, 81, 3c, 00, 60, 97, 31, 01, 72)

AD_DEFAULT_UUID(4c2e1692, 8ae6, 11d2, 81, 3c, 00, 60, 97, 31, 01, 72)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  /// IAAFWaveDescriptor-supporting object.  This method must be
  /// called after allocation\, and before any other method can be
  /// called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD2(GetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[out\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				Preallocated buffer to hold the WAVE file information,
			Gets a copy of the WAVE file information without the media.
  /// 
  /// Succeeds if all of the following are true:
  /// - pSummary is a valid pointer.
  /// - The size of the buffer is large enough to hold the WAVE file
  ///   information.
  /// 
  /// If this method fails pSummary will not be changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSummary arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - The buffer is too small to hold the WAVE file information.)


AD_XMETHOD1(GetSummaryBufferSize,
			[out],
			objPass,
			aafUInt32 *,
			pSize,
			required buffer size,
			Returns the size of the buffer required for the GetSummary\(\)
  /// method.  The value is placed into the location specified by pSize.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSize pointer is valid.
  ///
  /// If this method fails nothing will be written to *pSize.
  ///
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSize arg is NULL.)


AD_XMETHOD2(SetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[in\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				buffer containing value,
			Sets the WAVE file information.
  /// 
  /// Succeeds if all of the following are true:
  /// - pSummary is a valid pointer
  /// 
  /// If this method fails the summary property will not be
  /// changed.
  /// 
  /// This method will return the following codes:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSummary arg is NULL.)


AD_XCLASS_END(Concrete, StoredObject)
