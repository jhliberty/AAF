#c *********************************************************************
#c
#c $Id: AAFClassDef.dod,v 1.35 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFClassDef\
#endm
#c
#startm .parent-module 0
AAFMetaDefinition\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used with an object representing an AAF class
/// definition.  The operations on a class definition include managing
/// the position of the class within the class heirarchy\, and
/// accessing property definitions associated with the class.
AD_STD_COMMENT_IFC_HEADER)

AD_FORWARD_DECLARATION(AAFObject)
AD_FORWARD_DECLARATION(EnumAAFPropertyDefs)
AD_FORWARD_DECLARATION(AAFPropertyDef)
AD_FORWARD_DECLARATION(AAFMetaDefinition)
AD_FORWARD_DECLARATION(AAFTypeDef)
AD_INCLUDE(AAFObjectModel)

AD_CLASS_UUID(dfbd6526, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(dfbd6525, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD4(Initialize,

			[in\, ref],
			objPass,
			aafUID_constref,
			classID,
			auid to be used to identify this type,

			[in],
		    objIn,
		    AAFClassDef,
		    pParentClass,
		    existing class from which this one inherits,

			[in\, string],
			objPass,
			aafCharacter_constptr,
			pClassName,
			friendly name of this type definition,

			[in],
			objPass,
			aafBoolean_t,
			isConcrete,
			can objects of this class be instantiated,

     Initializes this class definition object to inherit from the
  /// given parent class.  If isConcrete is set to AAFTrue\, objects of
  /// this class can be instantiated; otherwise\, it will be illegal to
  /// instantiate such objects.
  /// 
  /// Succeeds if:
  /// - The pID pointer is valid.
  /// - The pParentClass pointer is valid.
  /// - The pTypeName pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pID\\\, pParentClass\\\, or pTypeName\))


AD_XMETHOD1(GetPropertyDefs,
			[out\, retval],
		    objOut,
		    EnumAAFPropertyDefs,
		    ppEnum,
		    Property Definition enumeration,
     Returns an enumerator over all of the aaf property definitions
  /// attached to the current class.
  /// 
  /// Succeeds if:
  /// - The ppEnum pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountPropertyDefs,
			[out],
			objPass,
			aafUInt32 *,
			pCount,
			number of properties contained in this class definition,
     Returns number of property definitions in this class.
  /// 
  /// Succeeds if:
  /// - The pCount pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))


AD_XMETHOD6(RegisterNewPropertyDef,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this property,

			[in\, string],
			objPass,
			aafCharacter_constptr,
			pName,
			name of the new property,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			type of the new property,

			[in],
			enumIn,
			aafBoolean_t,
			isOptional,
			true if new property is to be optional,

			[in],
			enumIn,
			aafBoolean_t,
			isUniqueIdentifier,
			true if new property is to be the unique identifier of the class,

			[out],
			objOut,
			AAFPropertyDef,
			ppPropDef,
			return pointer to newly created property def,

     Creates a new property definition and registers it in this class
  /// definition.  If ppPropDef is non-NULL\, will return the new
  /// property definition in ppPropDef.
  /// 
  /// Note that it is illegal to add mandatory properties to an
  /// existing \(registered\) class.  This method will allow adding
  /// either optional or mandatory properties to a class\, but they must
  /// be added to a class which has not yet been registered in the
  /// dictionary.  If this class has already been registered\, it is
  /// possible to add optional properties\, but not through this
  /// method.  Optional properties added to an existing \(registered\)
  /// class may be added through the RegisterOptionalPropertyDef\(\)
  /// method.
  /// 
  /// Succeeds if:
  /// - The pID pointer is valid.
  /// - The pName pointer is valid.
  /// - The pTypeDef pointer is valid.
  /// - This class has not already been registered in the dictionary.
  /// - The auid specified by pID has not already been registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pName or pTypeDef\)
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - This class has already been registered.
  ///
  /// AAFRESULT_ALREADY_UNIQUELY_INDENTIFED
  ///   - This class already has a unique indentifier property.
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - The given ID has already been registered.)


AD_XMETHOD4(RegisterOptionalPropertyDef,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this property,

			[in\, string],
			objPass,
			aafCharacter_constptr,
			pName,
			name of the new property,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			type of the new property,

			[out],
			objOut,
			AAFPropertyDef,
			ppPropDef,
			return pointer to newly created property def,

     Creates a new property definition and registers it in this class
  /// definition.  If ppPropDef is non-NULL\, will return the new
  /// property definition in ppPropDef.
  ///
  /// Note that it is illegal to add mandatory properties to an already
  /// existing \(registered\) class.  It is assumed that this property is
  /// being added to a class which is already registered.  If so\, it
  /// must be optional and this method will declare it so.  If it is
  /// wished to add a mandatory property\, that may be done through the
  /// RegisterNewPropertyDef\(\) method\, but that must be called on a class
  /// which is not yet registered.
  /// 
  /// Succeeds if:
  /// - The pID pointer is valid.
  /// - The pName pointer is valid.
  /// - The pTypeDef pointer is valid.
  /// - The auid specified by pID has not already been registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pName or pTypeDef\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - The given ID has already been registered.)


AD_XMETHOD2(LookupPropertyDef,
			[in\, ref],
			objPass,
			aafUID_constref,
			propID,
			auid reprepresenting property to look up,

			[out],
			objOut,
			AAFPropertyDef,
			ppPropDef,
			resulting property definition,

     Looks up the property definition corresponding to the named auid
  /// and returns a pointer to that property definition in ppPropDef.
  /// 
  /// Succeeds if:
  /// - The pPropID pointer is valid.
  /// - The ppPropDef pointer is valid.
  /// - the auid specified by pID has been registered as a property
  ///   definition for this class definition.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppPropDef\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - The given ID has not been registered as a property
  ///     definition.)


AD_STD_METHOD_STRING_GET_AND_SIZE(Name,
     Accesses a human-readable name for the class.  This name is not
  /// meant to be a way for programs to refer to the class\\\, as it is
  /// of undetermined length\\\, and is not checked to guarantee
  /// uniqueness.)


AD_XMETHOD1(GetParent,
			[out\, retval],
			objOut,
			AAFClassDef,
			ppClassDef,
			parent class definition,

     Gets the Parent class for this object.  If there is no parent\,
  /// returns the result AAFRESULT_NO_PARENT.  The only class which has no parent will
  /// be AAFObject.
  /// 
  /// Succeeds if:
  /// - The ppClassDef pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pClassDef\))


AD_XMETHOD1(IsConcrete,
			[out\, retval],
			objPass,
			aafBoolean_t*,
			pResult,
			Can this class be instantiated,

     Returns true if this class can be instantiated; returns false
  /// otherwise. 
  /// 
  /// Succeeds if:
  /// - The ppClassDef pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\))


AD_XMETHOD1(IsRoot,
			[out\, retval],
			objPass,
			aafBoolean_t*,
			isRoot,
			Is this a root \(base\) class,

     Returns true if this class is the base of the inheritance
  /// hierarchy; returns false otherwise.
  /// 
  /// Succeeds if:
  /// - The ppClassDef pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(isRoot\))


AD_XMETHOD1(IsUniquelyIdentified,
			[out\, retval],
			objPass,
			aafBoolean_t*,
			pIsUniquelyIdentified,
			Is this a UniquelyIdentified class,

     Returns true if this class is uniquely identified.
  /// 
  /// Succeeds if:
  /// - The pIsUniquelyIdentified pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pIsUniquelyIdentified\))


AD_XMETHOD1(GetUniqueIdentifier,
			[out\, retval],
			objOut,
			AAFPropertyDef,
			ppUniqueIdentifier,
			The unique identifier,

     Returns the property definition corresponding to this class'
  /// unique identifier.
  /// 
  /// Succeeds if:
  /// - The ppUniqueIdentifier pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppUniqueIdentifier\)
  ///
  /// AAFRESULT_PROP_NOT_PRESENT
  ///   - If this class definition does not have a unique identifier
  ///     property definition.)


AD_CLASSDEF_FACTORY(CreateInstance,
     Creates an object of this class\, and returns it by reference in
  /// the location specified by the ppObject argument.
  /// 
  /// Succeeds if:
  /// - The ppObject pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppObject arg is NULL.)
AD_XCLASS_END(Concrete, StoredObject)
