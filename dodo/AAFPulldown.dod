#c *********************************************************************
#c
#c $Id: AAFPulldown.dod,v 1.16 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFPulldown\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#import ./AAFSegment.exp
AD_HEAD
AD_IDL(///
/// This interface is used with an object which converts between film
/// frame rates and videotape frame rates by describing the mapping
/// between them.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(92B88032, 2B2B, 11d2, BF, 7E, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(92B88031, 2B2B, 11d2, BF, 7E, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(GetInputSegment,
			[out],
			objOut,
			AAFSegment,
			ppInputSegment,
			Returns the input Segment object,
     Places the input Segment object in this pulldown into the
  /// *ppInputSegment argument.  If none exists yet\, NULL is placed
  /// into the *ppInputSegment argument.
  ///
  /// The returned segment object\, if it exists\, is AddRef\(\)ed
  /// before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppInputSegment pointer is valid.
  /// - A valid segment exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppInputSegment is null.)


AD_XMETHOD1(SetInputSegment,
			[in],
			objIn,
			AAFSegment,
			pInputSegment,
			A Segment object,
			Sets the input segment .
  ///
  /// Succeeds if all of the following are true:
  /// - the pInputSegment pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputSegment is null.)


AD_XMETHOD1(GetPulldownKind,
			[out],
			objPass,
			aafPulldownKind_t *,
			pPulldownKind,
			Returns the pulldownKind property,
     Returns the pulldownKind property of this pulldown through the
  /// *pPulldownKind argument.  The pulldown kinds include
  /// kThreeTwoPD\, kPalPD\, kOneToOneNTSC\, kOneToOnePAL\, and
  /// kVideoTapNTSC.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPulldownKind pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPulldownKind is null.)


AD_XMETHOD1(SetPulldownKind,
			[in],
			enumIn,
			aafPulldownKind_t,
			pulldownKind,
			A Segment object,
     Sets the pulldown kind field of this pulldown object.  The
  /// pulldown kinds include kThreeTwoPD\, kPalPD\, kOneToOneNTSC\,
  /// kOneToOnePAL\, and kVideoTapNTSC.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputSegment is null.)


AD_XMETHOD1(GetPulldownDirection,
			[out],
			objPass,
			aafPulldownDir_t *,
			pPulldownDirection,
			Returns the input Segment object,
     Returns the pulldownDirection field of this pulldown through the
  /// *pPulldownDirection argument.  The valid
  /// pulldown directions are:
  ///    kVideoToFilmSpeed -- The input segment is at videoSpeed\, and
  ///                         the pulldown object is on a mob slot at
  ///                         film edit rate.
  ///    kFilmToVideoSpeed -- The input segment is at film edit rate.
  ///
  /// The value kVideoToFilmSpeed is used when connecting 24fps file
  /// mobs to tape mobs. 
  ///
  /// The value kFilmToVideoSpeed is used when connecting tape mobs to
  /// film mobs.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPulldownDirection pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPulldownDirection is null.)


AD_XMETHOD1(SetPulldownDirection,
			[in],
			enumIn,
			aafPulldownDir_t,
			pulldownDirection,
			A Segment object,
     Sets the pulldown direction field of this pulldown object.  The
  /// valid pulldown directions are:
  ///    kVideoToFilmSpeed -- The input segment is at videoSpeed\, and
  ///                         the pulldown object is on a mob slot at
  ///                         film edit rate.
  ///    kFilmToVideoSpeed -- The input segment is at film edit rate.
  ///
  /// The value kVideoToFilmSpeed is used when connecting 24fps file
  /// mobs to tape mobs.
  ///
  /// The value kFilmToVideoSpeed is used when connecting tape mobs to
  /// film mobs.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputSegment is null.)


AD_XMETHOD1(GetPhaseFrame,
			[out],
			objPass,
			aafPhaseFrame_t *,
			pPhaseFrame,
			Returns the input Segment object,
     Returns the phaseFrame field of this pulldown through the
  /// *pPhaseFrame argument.  The phase frame field specifies the phase
  /// within the repeating pattern used to map between the two edit
  /// rates. A value of zero specifies that the pulldown object starts
  /// at the begining of the pattern.
  ///
  /// Succeeds if all of the following are true:
  /// - the pPhaseFrame pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pPhaseFrame is null.)


AD_XMETHOD1(SetPhaseFrame,
			[in],
			objPass,
			aafPhaseFrame_t,
			phaseFrame,
			A Segment object,
     Sets the phase frame field of this pulldown object.  The phase
  /// frame field specifies the phase within the repeating pattern used
  /// to map between the two edit rates. A value of zero specifies that
  /// the pulldown object starts at the begining of the pattern.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputSegment is null.)


AD_OVERRIDE(.method-SegmentOffsetToTC)


AD_OVERRIDE(.method-SegmentTCToOffset)
AD_XCLASS_END(Concrete, StoredObject)
