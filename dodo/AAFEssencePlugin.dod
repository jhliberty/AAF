#c *********************************************************************
#c
#c $Id: AAFEssencePlugin.dod,v 1.14 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssencePlugin\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
#c #import ./AAFObject.exp
#import ./AAFEndian.exp
AD_HEAD
AD_IDL(///
/// The AAFEssencePlugin interface describes the calls available
/// to all plugins \(ex. Codecs and Interpolators\).  This interface
///  is used internally by the SDK\, and is not exported through the
/// client interface.
///
/// The AAFPluginManager keeps a copy of each plugin in a table\, along
/// with cached copies of pertinant metadata about the plugin\, and
/// instantiates a copy of the plugin when required.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
///
/// AAFRESULT_NULL_PARAM
///   - One of the passed in pointers is NULL.
///
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)


AD_CLASS_UUID(AF98DE41, 952D, 11D2, 80, 89, 00, 60, 08, 14, 3e, 6f)

AD_DEFAULT_UUID(AF98DE42, 952D, 11D2, 80, 89, 00, 60, 08, 14, 3e, 6f)

AD_XCLASS_BEGIN(Abstract, Transient)

AD_XMETHOD3(NumCodecsMatching,
[in],objPass,aafUID_t,dataDefinition,Looking for audio or video codecs,
[in],enumIn, aafFileRev_t,revision,for which variety of file,
[out],objPass,aafInt32 *,result,Returns the number of matches,
Find all of the codecs available for a particular media type.)

AD_XMETHOD6(GetIndexedCodecInfo,
			[in],
			objPass,
			aafUID_t,
			dataDefinition,
			Looking for audio or video codecs,
			[in],
			enumIn, 
			aafFileRev_t,
			revision,
			for which variety of file,
			[in],
			objPass, 
			aafInt32,
			index,
			Which codec. 1 to number of codecs,
			[in\, string\, ref],
			objPass,
			aafCharacter_constptr,
			pName,
			Codec Name,
			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer to hold Codec Name,
			[out],
			objPass,
			aafUID_t *,
			codecID,
			ID used to access the codec,
			Get the codec name and ID.)

AD_XCLASS_END(Abstract, Transient)
