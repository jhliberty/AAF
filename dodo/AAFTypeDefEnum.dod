#c *********************************************************************
#c
#c $Id: AAFTypeDefEnum.dod,v 1.17 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefEnum\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define enumerated types used in AAF
/// persistent objects.  Enumerated types are assumed to be based on
/// integers of no larger than 64 bits.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(307e9e62, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(307e9e64, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD6(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,

			[in],
			objIn,
			AAFTypeDef,
			pType,
			Type of values in this enumeration.
  /// Has to be of type Int,

			[in\, size_is\(numElems\)],
			objPass,
			aafInt64 *,
			pElementValues,
       array of element values to be represented in this enumerated
  /// type,

			[in\, size_is\(numElems\)],
			objPass,
			aafString_t *,
			pElementNames,
       array of element names to be represented in this enumerated
  /// type,

			[in],
			objPass,
			aafUInt32,
			numElems,
			number of members in pElementValues and pElementNames arrays,

			[in],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,

     Initializes this type def to be identified by the given guid\, to
  /// be implemented as the given data type\, and to contain the given
  /// elements \(names and values\).  The given data type must be an
  /// integral type.  It is considered an error if multiple elements
  /// have the same name or the same value.  The values and names are
  /// given in parallel arrays\, each of which has numElements
  /// elements.
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pID is a valid pointer.
  /// - pType is a valid pointer.
  /// - pElementValues is a valid pointer.
  /// - pElementNames is a valid pointer.
  /// - pTypeName is a valid pointer.
  /// - base type is integral type.
  /// - no duplicate names or values are found.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(any pointer argument\)
  ///
  /// AAFRESULT_DUPLICATE
  ///   - duplicate name or value is found.
  ///
  /// AAFRESULT_BAD_TYPE
  ///   - base type is not integral type.)


AD_XMETHOD2(CreateValueFromName,
			[in],
			objPass,
			aafCharacter_constptr,
			Name,
			the Name of a valid Enum symbol,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			newly created property value,

     Creates a property value which contains an Enum type.  A
  /// lookup on the Name is done to find a match in the list of 
  /// legal enumerations for this type. If the Name specified is not
  /// found to exist then an INVALID_PARAM error code is returned.
  /// If it succeeds then a newly-created property value in ppPropVal
  /// is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the Name pointer is valid.
  /// - the ppPropVal pointer is valid.
  ///
  /// If this method fails nothing will be written to *ppPropVal.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppPropVal\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - the Name specified is not in the list of legal Enumerations.)
  
  
  
AD_XMETHOD1(GetElementType,
			[out],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			type definition of values of this enumeration,

     Returns the type definition of the values which are found in this
  /// enumeration.
  /// 
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - The ppTypeDef pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppTypeDef\))

AD_XMETHOD2(GetElementValue,
                      [in],
                      objPass,
                      aafUInt32,
                      index,
                      index of element to retrieve,

                      [out],
                      objPass,
                      aafInt64 *,
                      pOutValue,
                      requested value,

     Gets the indexed element in this enumerated type.  The
  /// value is written into the client-allocated *pOutValue.  Index
  /// must be less than the value returned by CountElements\(\).
  ///
  /// Succeeds if:
  /// - pOutValue is a valid pointer.
  /// - index is less than CountElements\(\).
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pOutValue\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is not less than CountElements\(\).)

AD_XMETHOD3(GetElementName,
                      [in],
                      objPass,
                      aafUInt32,
                      index,
                      index of element to retrieve,

                      [out\, size_is\(bufSize\)],
                      objPass,
                      aafCharacter *,
                      pOutValue,
                      requested value,
                      
                      [in],
                      objPass,
                      aafUInt32,
                      bufSize,
                      The size of the pOutValue buffer in bytes,
                      

     Gets the indexed element in this enumerated type.  The
  /// Name is written into the client-allocated *pOutValue. The
  /// bufSize argument should be large enough to hold the pOutValue.
  /// Index must be less than the value returned by CountElements\(\).
  ///
  /// Caller may call GetElementNameBufLen\(\) to determine the
  /// required buffer size.
  ///  
  /// Succeeds if:
  /// - pOutValue is a valid pointer.
  /// - index is less than CountElements\(\).
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pOutValue\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is not less than CountElements\(\).
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates the buffer is too small to hold the string.
  ///)
  
  

AD_XMETHOD2(GetElementNameBufLen,
                      [in],
                      objPass,
                      aafUInt32,
                      index,
                      index of element to retrieve,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetElementName\(\)
  /// method\, in bytes.  The value is placed into the location
  /// specified by pLen. The value will include space required for the
  /// trailing null character.
  ///
  /// Succeeds if the following is true:
  /// - the pLen pointer is valid.
  /// - index is less than CountElements\(\).
  ///
  /// If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pLen\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is not less than CountElements\(\).
  ///)



  
AD_XMETHOD1(CountElements,
			[out],
			objPass,
			aafUInt32 *,
			pCount,
			count of elements within this enumeration,

			Returns number of enumeration elements contained.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  /// - pCount is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))



AD_XMETHOD3(GetNameFromValue,
			[in],
			objIn,
			AAFPropertyValue,
			pValue,
			value of element to get,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			buffer into which the element name is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			The size of the pName buffer\, in bytes,

     Writes the human-legible tag associated with the given value in
  /// this enumerated type.  The name is written\, with a trailing null
  /// character\, into the pName buffer.  The buffer is allocated by
  /// the caller.  The size of the buffer is given by bufSize.
  /// 
  /// Caller may call GetNameBufLenFromValue\(\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - the pName pointer is valid.
  /// - bufSize indicates the buffer is large enough to hold the name.
  /// - the integer value is associated with an element of this
  ///   enumerated type.
  /// 
  /// If this method fails nothing will be written to
  /// *pName.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pValue or pName\)
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates the buffer is too small to hold the string.
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - the given value is not associated with an element of
  ///     this type.)


AD_XMETHOD2(GetNameBufLenFromValue,
			[in],
			objIn,
			AAFPropertyValue,
			pValue,
			value of element to get,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetNameFromValue\(\)
  /// method\, in bytes.  The value is placed into the location
  /// specified by pLen. The value will include space required for the
  /// trailing null character.
  ///
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - the pLen pointer is valid.
  /// - the value is associated with an element of this enumerated
  ///   type.
  ///
  /// If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pValue or pLen\)
  ///
  /// AAFRESULT_BAD_PARAM
  ///   - the given value is not associated with an element of this
  ///     type.)


AD_XMETHOD3(GetNameFromInteger,
			[in],
			objPass,
			aafInt64,
			value,
			value of element to get,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			buffer into which the element name is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			The size of the pName buffer\, in bytes,

     Writes the human-legible tag associated with the given value in
  /// this enumerated type.  The name is written\, with a trailing null
  /// character\, into the pName buffer.  The buffer is allocated by
  /// the caller.  The size of the buffer is given by bufSize.
  /// 
  /// Caller may call GetNameBufLenFromInteger\(\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pName pointer is valid.
  /// - bufSize indicates the buffer is large enough to hold the name.
  /// - the integer value is associated with an element of this
  ///   enumerated type.
  /// 
  /// If this method fails nothing will be written to
  /// *pName.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pName\)
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates the buffer is too small to hold the string.
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - the given value is not associated with an element of
  ///     this type.)


AD_XMETHOD2(GetNameBufLenFromInteger,
			[in],
			objPass,
			aafInt64,
			value,
			value of element to get,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetNameFromInteger\(\)
  /// method\, in bytes.  The value is placed into the location
  /// specified by pLen. The value will include space required for the
  /// trailing null character.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  /// - the value is associated with an element of this enumerated
  ///   type.
  ///
  /// If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pLen\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - the given value is not associated with an element of this
  ///     type.)


AD_XMETHOD2(GetIntegerValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropValIn,
			property value to read,

			[out],
			objPass,
			aafInt64 *,
			pValueOut,
			value of the enum represented by the given input property value,

     Gets the value from the given property value and writes it as an
  /// integer into *pValueOut.
  ///
  /// Succeeds if:
  /// - The pPropValIn pointer is valid.
  /// - The pValueOut pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pPropValIn or ppPropValOut\))


AD_XMETHOD2(SetIntegerValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropValToSet,
			property value to set,

			[in],
			objPass,
			aafInt64,
			valueIn,
			new value of the enum represented by the given property value,

     Sets the given property to the value given in pValueIn.
  ///
  /// Succeeds if:
  /// - The pPropValToSet pointer is valid.
  /// - valueIn is a correct value for this enumerated type.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropValToSet\)
  ///
  /// AAFRESULT_ILLEGAL_VALUE
  ///   - valueIn is not a correct value for this enumerated type.
  ///   - pPropValIn's type doesn't match GetElementType\(\))


AD_XMETHOD1(RegisterSize,
			[in],
			objPass,
			aafUInt32,
			enumSize,
			size of this enum,

     Allows client to register to the reference implementation a
  /// runtime C enum to represent objects of this TypeDef.  The size of
  /// the enum to be represented should be passed as the enumSize
  /// argument.  This allows the reference implementation to write
  /// property values into compile-time-defined C enums intelligible
  /// by the local machine and compiler.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has already been called on this object.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT)
AD_OVERRIDE(.method-GetTypeCategory)
AD_XCLASS_END(Concrete, StoredObject)
