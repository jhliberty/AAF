#c *********************************************************************
#c
#c $Id: AAFConstantValue.dod,v 1.25 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFConstantValue\
#endm
#c
#startm .parent-module 0
AAFParameter\
#endm
#c
AD_HEAD
AD_IDL(///
/// The IAAFConstantValue interface is implemented by objects that
/// specify a parameter whose value is constant for an entire operation
/// group.  Use IAAFVaryingValue and one or more IAAFControlPoints for
/// parameters which change in value during the operation group.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)

AD_FORWARD_DECLARATION(AAFParameterDef)
AD_FORWARD_DECLARATION(AAFTypeDef)

AD_CLASS_UUID(b8ddc081, 2afa, 11D2, bf, A5, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(b8ddc080, 2afa, 11D2, bf, A5, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD3(Initialize,
			[in],
			objIn,
			AAFParameterDef,
			pParameterDef,
			Parameter definition for this object \(this determines the type of the constant value\),

			[in], 
			objPass,
			aafUInt32, 
			valueSize, 
			Size of preallocated buffer,

			[in\, size_is\(valueSize\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

     Initializes a new constant value object to be identified with the
  /// given the given type\, and with the given human-legible name.
  ///
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pParameterDef and pValue are a valid pointers.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pParameterDef or pValue\)
  /// )


AD_METHOD3(GetValue,
			[in],aafUInt32,valueSize,Size of preallocated buffer,
			[out\\\, size_is\\\(valueSize\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,pValue,Preallocated buffer to hold value,
			[out],aafUInt32*,bytesRead,Number of actual bytes read,
     Writes the value into the pValue buffer.  The buffer is allocated
  /// by the caller\\\, and the size of the buffer is given by
  /// valueSize.
  /// 
  /// Caller may call GetValueBufLen\\\(\\\) to determine the
  /// required buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pValue pointer is valid.
  /// - valueSize indicates the buffer is large enough to hold the
  ///   name.
  /// 
  /// If this method fails nothing will be written to *pValue.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \\\(This is the only code indicating success.\\\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pValue arg is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - valueSize indicates the buffer is too small to hold the
  ///     value.)


AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

     Returns the length of buffer required for the GetValue\(\)
  /// method.  The value is placed into the location specified by
  /// pLen.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLen pointer is valid.
  ///
  /// If this method fails nothing will be written to *pLen.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLen arg is NULL.)

AD_XMETHOD1(GetTypeDefinition,
			[out\,retval],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			Type Definition of the dataval inside of this object,
			Places the type definition of the dataval inside this parameter into the
  /// *ppTypeDef argument.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppTypeDef is null.)

AD_XMETHOD2(SetValue,
			[in], 
			objPass,
			aafUInt32, 
			valueSize, 
			Size of preallocated buffer,

			[in\, size_is\(valueSize\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

			The data value is set from a buffer of size valueSize and type.
  ///
  /// Succeeds if all of the following are true:
  /// - pTypeDef is valid and registered with the object's dictionary.
  /// - the pValue pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppTypeDef is null.)

AD_XCLASS_END(Concrete, StoredObject)
