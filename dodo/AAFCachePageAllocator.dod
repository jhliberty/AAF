#c *********************************************************************
#c
#c $Id: AAFCachePageAllocator.dod,v 1.2 2009/06/01 11:46:49 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFCachePageAllocator\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used by the toolkit for allocation and
/// deallocation of pages in a page cache.
/// It is typically implemented by clients requiring control
/// over how memory is allocated. By implementing this interface clients are
/// able to control aspects of memory allocation such as the source from which
/// the memory is obtained\, how the memory is aligned etc.
///
/// Notes for implementers -
///
///  - Allocate\(\) will be called a maximum of pageCount times\, it
///    may be called fewer times.
///
///  - Deallocate\(\) will be called the same number of times as
///    Allocate\(\).
///
///  - Some uses of this interface never call Allocate\(\)
///    after Deallocate\(\)\, implementors of this interface should not
///    assume that this is always the case.
///
///  - Allocate\(\) should indicate failure by returning AAFRESULT_NOMEMORY
///    \(and not by returning a NULL pointer.\)
///
///  - Deallocate\(\) should accept a NULL pointer \(and do nothing\) as does
///    operator delete.
///
///  - It is valid to allocate all the pages during Initialize\(\) or during
///    the first call to Allocate\(\).
///    For example\, if aligned pages are required\, allocating all the pages
///    contiguously mans paying the space cost of alignment once instead of
///    per-page.
///
///  - Initialize\(\) will be called only once.
///
AD_STD_COMMENT_IFC_HEADER)
AD_CLASS_UUID(EA131C6C, C57C, 4F64, A8, 1B, 23, 62, A2, EC, 44, CA)

AD_DEFAULT_UUID(23630652, 56E9, 4A17, AC, 31, 79, 6F, E6, E2, 6E, 80)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD2(Initialize,

			[in],
			objPass,
			aafUInt32,
			pageCount,
			Maximum number of pages to allocate,

			[in],
			objPass,
			aafUInt32,
			pageSize,
			Size in bytes of each page,

            Initialize.)

AD_XMETHOD1(Allocate,

			[out],
			objPass,
			aafMemPtr_t *,
			pPage,
			Pointer to the newly allocated page,

            Allocate a cache page.)

AD_XMETHOD1(Deallocate,

			[in],
			objPass,
			aafMemPtr_t,
			page,
			Pointer to the page to deallocate,

            Dellocate a cache page.)

AD_XCLASS_END(Concrete, Transient)
