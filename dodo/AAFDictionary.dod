#c *********************************************************************
#c
#c $Id: AAFDictionary.dod,v 1.40 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFDictionary\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
#import ./AAFDictionary2.exp
AD_HEAD
AD_IDL(///
/// This interface is used to access dictionary services in an AAF
/// file.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFMetaDefinition)
AD_FORWARD_DECLARATION(AAFClassDef)
AD_FORWARD_DECLARATION(EnumAAFClassDefs)
AD_FORWARD_DECLARATION(AAFTypeDef)
AD_FORWARD_DECLARATION(EnumAAFTypeDefs)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(EnumAAFDataDefs)
AD_FORWARD_DECLARATION(AAFOperationDef)
AD_FORWARD_DECLARATION(EnumAAFOperationDefs)
AD_FORWARD_DECLARATION(EnumAAFCodecDefs)
AD_FORWARD_DECLARATION(EnumAAFContainerDefs)
AD_FORWARD_DECLARATION(AAFInterpolationDef)
AD_FORWARD_DECLARATION(EnumAAFInterpolationDefs)
AD_FORWARD_DECLARATION(AAFPluginDef)
AD_FORWARD_DECLARATION(EnumAAFPluginDefs)
AD_FORWARD_DECLARATION(AAFKLVDataDefinition)
AD_FORWARD_DECLARATION(EnumAAFKLVDataDefs)
AD_FORWARD_DECLARATION(AAFTaggedValueDefinition)
AD_FORWARD_DECLARATION(EnumAAFTaggedValueDefs)
AD_INCLUDE(AAFObjectModel)

AD_CLASS_UUID(B1A21399, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21398, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_COM_EXT_CLASS_BEGIN(public IAAFDictionary2)

AD_DICTIONARY_FACTORY(CreateInstance,
Creates a single uninitialized AAF object of the class associated 
  /// with a specified stored object id.)

AD_DICTIONARY_METAFACTORY(CreateMetaInstance,
Creates a single uninitialized AAF meta class or type associated 
  /// with a specified stored object id.)


AD_XMETHOD1(RegisterClassDef,

			[in],
			objIn,
			AAFClassDef,
			pClassDef,
			Class Definition,

     Add the class definition object to the dictionary.
  /// 
  /// Succeeds if:
  /// - The pClassDef pointer is valid.
  /// - the ID contained in the class def is not already been
  ///   registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pClassDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The class def ID has already been registered.)


AD_XMETHOD2(LookupClassDef,

			[in\, ref],
			objPass,
			aafUID_constref,
			classId,
			Class Unique ID,

			[out\,retval],
			objOut,
			AAFClassDef,
			ppClassDef,
			Class Definition,

     Return the class definition with the given id.
  /// 
  /// Succeeds if:
  /// - The pClassID pointer is valid.
  /// - The ppClassDef pointer is valid.
  /// - the ID is a recognized id for a class definition.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pClassID or ppClassDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given ID is not recognized as a class definition ID.)


AD_XMETHOD1(GetClassDefs,

			[out\,retval],
			objOut,
			EnumAAFClassDefs,
			ppEnum,
			Class Definition Enumeration,

     Return an enumerator for all class definitions.
  ///
  /// Succeeds if:
  /// - The ppEnum pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountClassDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of class definition objects,
			Writes the number of class definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)

AD_XMETHOD1(CreateForwardClassReference,

			[in\, ref],
			objPass,
			aafUID_constref,
			classId,
			Class Unique ID,

     Return the class definition with the given id.
  /// 
  /// Succeeds if:
  /// - The classId does not represent an existing forward class reference
  ///   or a class definition that has already been successfully registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given ID is not recognized as a class definition ID.)

AD_XMETHOD2(HasForwardClassReference,

			[in\, ref],
			objPass,
			aafUID_constref,
			classId,
			Class Unique ID,

			[out\,retval],
			objPass,
			aafBoolean_t *,
			pResult,
			true if forward class reference; false if not a forward class reference,

     Return kAAFTrue if the given class identification is a forward reference.
  /// 
  /// Succeeds if:
  /// - The pClassID pointer is valid.
  /// - The ppClassDef pointer is valid.
  /// - the ID is a recognized id for a class definition.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pClassID or ppClassDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given ID is not recognized as a class definition ID.)

AD_XMETHOD1(RegisterTypeDef,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Type Definition Object,

     Add the type definition object to the dictionary.
  /// 
  /// Succeeds if:
  /// - The pTypeDef pointer is valid.
  /// - the ID is not already been registered.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pClassDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given type has already been registered.)


AD_XMETHOD2(LookupTypeDef,

			[in\, ref],
			objPass,
			aafUID_constref,
			typeId,
			Type Unique ID,

			[out\,retval],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			Type Definition Object,

     Return the type definition object with the given id.
  /// 
  /// Succeeds if:
  /// - The pTypeID pointer is valid.
  /// - The ppTypeDef pointer is valid.
  /// - the ID is a recognized id for a type definition.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pTypeID or ppTypeDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given ID is not recognized as a type definition ID.)


AD_XMETHOD1(GetTypeDefs,

			[out\,retval],
			objOut,
			EnumAAFTypeDefs,
			ppEnum,
			Type Def Enumeration,

     Return an enumerator for all type definitions.
  ///
  /// Succeeds if:
  /// - The ppEnum pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountTypeDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of type definition objects,
			Writes the number of type definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterOpaqueTypeDef,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Type Definition Object,

     Add the opaquetype definition object to the dictionary.
  /// 
  /// Succeeds if:
  /// - The pTypeDef pointer is valid.
  /// - the definition is not already been registered with RegisterTypeDef.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pTypeDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given type has already been registered.)


AD_XMETHOD2(LookupOpaqueTypeDef,

			[in\, ref],
			objPass,
			aafUID_constref,
			typeId,
			Type Unique ID,

			[out\,retval],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			Type Definition Object,

     Return the opaque type definition object with the given id.
  /// 
  /// Succeeds if:
  /// - The pTypeID pointer is valid.
  /// - The ppTypeDef pointer is valid.
  /// - the ID is a recognized id for an opaque type definition.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either typeId or ppTypeDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given ID is not recognized as a type definition ID.)


AD_XMETHOD1(GetOpaqueTypeDefs,

			[out\,retval],
			objOut,
			EnumAAFTypeDefs,
			ppEnum,
			Type Def Enumeration,

     Return an enumerator for all registered opaque type definitions.
  ///
  /// Succeeds if:
  /// - The ppEnum pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountOpaqueTypeDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of opaque type definition objects,
			Writes the number of opaque type definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)

AD_XMETHOD2(RegisterKLVDataKey,

			[in],
			objPass,
			aafUID_t,
			pUID,
			Key to define,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Type Definition Object,

     Add the definition for the given KLV key to the runtime dictionary.
  /// The pTypeDef will often be kAAFTypeID_UInt8Array\,
  /// but may be something else.
  /// 
  /// Succeeds if:
  /// - The pTypeDef pointer is valid.
  /// - the definition is not already been registered with RegisterTypeDef.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pTypeDef\)
  ///
  /// AAFRESULT_INVALID_PARAM
  ///   - The given type has already been registered.)

AD_XMETHOD1(RegisterDataDef,

			[in],
			objIn,
			AAFDataDef,
			pDataDef,
			Data Definition Object,

			Add the data definition object to the header's list of definitions.)


AD_XMETHOD2(LookupDataDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            dataDefinitionId,
            Data Definition Unique ID,

            [out\,retval],
            objOut,
            AAFDataDef,
            ppDataDef,
            Data Definition Object,

            Return the data definition object with the given id.)


AD_XMETHOD1(GetDataDefs,

            [out\,retval],
            objOut,
            EnumAAFDataDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for aff data definitions.)


AD_XMETHOD1(CountDataDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of data definition objects,
			Writes the number of data definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterOperationDef,

            [in],
            objIn,
            AAFOperationDef,
            pOperationDef,
            Operation Definition Object,

            Add the operation definition object to the header's list of definitions.)


AD_XMETHOD2(LookupOperationDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            operationId,
            Operation Def Unique ID,

            [out\,retval],
            objOut,
            AAFOperationDef,
            ppOperationDef,
            Operation definition object,

            Return the operation definition object with the given id.)


AD_XMETHOD1(GetOperationDefs,

            [out\,retval],
            objOut,
            EnumAAFOperationDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for all operation definitions.)


AD_XMETHOD1(CountOperationDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of operation definition objects,
			Writes the number of operation definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterParameterDef,

            [in],
            objIn,
            AAFParameterDef,
            pParmDef,
            Parameter Definition Object,

            Add the parameter definition object to the header's list of definitions.)


AD_XMETHOD2(LookupParameterDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            parameterId,
            Parameter Unique ID,

            [out\,retval],
            objOut,
            AAFParameterDef,
            ppParmDef,
            Parameter definition object,

            Return the parameter definition object with the given id.)


AD_XMETHOD1(GetParameterDefs,

            [out\,retval],
            objOut,
            EnumAAFParameterDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for all parameter definitions.)


AD_XMETHOD1(CountParameterDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of parameter definition objects,
			Writes the number of parameter definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterCodecDef,

            [in],
            objIn,
            AAFCodecDef,
            pParmDef,
            Codec Definition Object,

            Add the codec definition object to the header's list of definitions.)


AD_XMETHOD2(LookupCodecDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            parameterId,
            Parameter Unique ID,

            [out\,retval],
            objOut,
            AAFCodecDef,
            ppParmDef,
            Codec definition object,

            Return the codec definition object with the given id.)


AD_XMETHOD1(GetCodecDefs,

            [out\,retval],
            objOut,
            EnumAAFCodecDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for all codec definitions.)


AD_XMETHOD1(CountCodecDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of codec definition objects,
			Writes the number of codec definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterContainerDef,

            [in],
            objIn,
            AAFContainerDef,
            pParmDef,
            Container Definition Object,

            Add the container definition object to the header's list of definitions.)


AD_XMETHOD2(LookupContainerDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            parameterId,
            Parameter Unique ID,

            [out\,retval],
            objOut,
            AAFContainerDef,
            ppParmDef,
            Container definition object,

            Return the container definition object with the given id.)


AD_XMETHOD1(GetContainerDefs,

            [out\,retval],
            objOut,
            EnumAAFContainerDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for all container definitions.)


AD_XMETHOD1(CountContainerDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of container definition objects,
			Writes the number of container definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterInterpolationDef,

            [in],
            objIn,
            AAFInterpolationDef,
            pInterpolationDef,
            Interpolation Definition Object,

            Add the Interpolation definition object to the header's list of definitions.)


AD_XMETHOD2(LookupInterpolationDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            parameterId,
            Parameter Unique ID,

            [out\,retval],
            objOut,
            AAFInterpolationDef,
            ppInterpolationDef,
            Interpolation definition object,

            Return the Interpolation definition object with the given id.)


AD_XMETHOD1(GetInterpolationDefs,

            [out\,retval],
            objOut,
            EnumAAFInterpolationDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for aff Interpolation definitions.)


AD_XMETHOD1(CountInterpolationDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of interpolation definition objects,
			Writes the number of interpolation definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(RegisterPluginDef,

            [in],
            objIn,
            AAFPluginDef,
            pPlugDef,
            plugin definition Object,

            Add the plugin definition object to the header's list of definitions.)


AD_XMETHOD2(LookupPluginDef,

            [in\, ref],
            objPass,
            aafUID_constref,
            parameterId,
            Parameter Unique ID,

            [out\,retval],
            objOut,
            AAFPluginDef,
            ppPlugDef,
            plugin descriptor object,

            Return the plugin descriptor object with the given id.)


AD_XMETHOD1(GetPluginDefs,

            [out\,retval],
            objOut,
            EnumAAFPluginDefs,
            ppEnum,
            Definition Enumeration,

            Return an enumerator for all plugin descriptors.)


AD_XMETHOD1(CountPluginDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of plugin definition objects,
			Writes the number of plugin definition objects into the
  /// *pResult argument.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)

#c
#c Dictionary2 methods
#c

AD_COM_METH(.method-RegisterKLVDataDef)
AD_COM_METH(.method-LookupKLVDataDef)
AD_COM_METH(.method-GetKLVDataDefs)
AD_COM_METH(.method-CountKLVDataDefs)
AD_COM_METH(.method-RegisterTaggedValueDef)
AD_COM_METH(.method-LookupTaggedValueDef)
AD_COM_METH(.method-GetTaggedValueDefs)
AD_COM_METH(.method-CountTaggedValueDefs)

AD_COM_METH(.method-LookupAuxiliaryDataDef)
AD_COM_METH(.method-LookupDescriptiveMetadataDataDef)
AD_COM_METH(.method-LookupEdgecodeDataDef)
AD_COM_METH(.method-LookupLegacyPictureDataDef)
AD_COM_METH(.method-LookupLegacySoundDataDef)
AD_COM_METH(.method-LookupLegacyTimecodeDataDef)
AD_COM_METH(.method-LookupMatteDataDef)
AD_COM_METH(.method-LookupPictureDataDef)
AD_COM_METH(.method-LookupPictureWithMatteDataDef)
AD_COM_METH(.method-LookupSoundDataDef)
AD_COM_METH(.method-LookupTimecodeDataDef)


AD_COM_EXT_CLASS_END(AAFDictionary2)
