#c *********************************************************************
#c
#c $Id: AAFMob.dod,v 1.43 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFMob\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
#import ./AAFMob2.exp
AD_HEAD
AD_IDL(///
/// IAAFMob is DEPRECATED\,  Please use IAAFMob2.
///
/// The IAAFMob interface is implemented by objects that specify a
/// Metadata Object\, which can describe a composition\, essence\, or
/// physical media.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFMob is a
///     primary interface for an abstract class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFMobSlot)
AD_FORWARD_DECLARATION(AAFTimelineMobSlot)
AD_FORWARD_DECLARATION(AAFEventMobSlot)
AD_FORWARD_DECLARATION(AAFStaticMobSlot)
AD_FORWARD_DECLARATION(AAFFile)
AD_FORWARD_DECLARATION(EnumAAFMobSlots)
AD_FORWARD_DECLARATION(EnumAAFTaggedValues)
AD_FORWARD_DECLARATION(AAFKLVData)
AD_FORWARD_DECLARATION(EnumAAFKLVData)

AD_CLASS_UUID(B1A21375, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21374, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_COM_EXT_CLASS_BEGIN(public IAAFMob2)

AD_XMETHOD1(GetMobID,
			[out],
			objPass,
			aafMobID_t *,
			pMobID,
			The unique media object id,
			This method returns the unique Mob ID associated with this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pMobID pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pMobID.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pMobID arg is NULL.)


AD_XMETHOD1(SetMobID,
			[in\, ref],
			objPass,
			aafMobID_constref,
			mobID,
			New Mob ID,
			When a mob is initially created\, the Reference Implementation
  /// internally creates a mobID for the new mob.  This method should
  /// be used to change the mob's identity to an explicit mobID.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(Name,
     the Mob Name string property.)


AD_XMETHOD1(CountSlots,
			[out],
			objPass,
			aafNumSlots_t *,
			pNumSlots,
			Number of slots,
			This method returns the number of slots contained by this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pNumSlots pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pNumSlots.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumSlots arg is NULL.)


AD_XMETHOD1(AppendSlot,
			[in],
			objIn,
			AAFMobSlot,
			pSlot,
			slot to append,
			Appends the given mob slot to the mob.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSlot pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSlot is null.)


AD_XMETHOD1(PrependSlot,
			[in],
			objIn,
			AAFMobSlot,
			pSlot,
			slot to prepend,
			Prepends the given mob slot to the mob.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSlot pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSlot is null.)


AD_XMETHOD2(InsertSlotAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index where slot is to be inserted,
			[in],
			objIn,
			AAFMobSlot,
			pSlot,
			slot to insert,
 			Inserts the given slot into this mob at the given index.  All
  /// existing slots at the given and higher index will be moved up one
  /// index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSlot pointer is valid.
  /// - index is less than or equal to the result obtained by
  ///   CountSlots\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSlot is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the result obtained from CountSlots\(\).)


AD_XMETHOD1(RemoveSlotAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of slot to be removed,
			Removes the slot at the given index.  All existing slots at
  /// indices higher than the given index will be moved down one index
  /// to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the result obtained by CountSlots\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is not less than the result obtained from
  ///     CountSlots\(\).)


AD_XMETHOD2(GetSlotAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of slot to be obtained,
			[out\, retval],
			objOut,
			AAFMobSlot,
			ppSlot,
			the returned slot,
			Returns the indexed slot in *ppSlot.
  /// 
  /// Succeeds if all of the following are true:
  /// - ppSlot is a valid pointer.
  /// - index is less than the result obtained by CountSlots\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppSlot is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is not less than the result obtained from
  ///     CountSlots\(\).)


AD_XMETHOD1(GetSlots,
			[out],
			objOut,
			EnumAAFMobSlots,
			ppEnum,
			Mob Slot Enumeration,
			Return an enumeration for all mob slots.  The returned
  /// enumerator is AddRef\(\)ed before it is returned.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(GetModTime,
			[out],
			objPass,
			aafTimeStamp_t *,
			pLastModified,
			Modified Time,
			This method will return the modification time for this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pLastModified pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pLastModified.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLastModified arg is NULL.)


AD_XMETHOD1(SetModTime,
			[in\, ref],
			objPass,
			aafTimeStamp_constref,
			modTime,
			New Modification Time,
			This method sets the modification time on a mob.  The
  /// modification time is initially set to the time that the mob
  /// was created.  The Reference Implementation does not maintain the
  /// modification time every time that a mob has been updated.
  /// Therefore\, this method should be called explicitly to change the
  /// modification time.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetCreateTime,
			[out],
			objPass,
			aafTimeStamp_t *,
			pCreationTime,
			Creation Time,
			This method will return the creation time for this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pCreationTime pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pCreationTime.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCreationTime arg is NULL.)


AD_XMETHOD1(SetCreateTime,
			[in\, ref],
			objPass,
			aafTimeStamp_constref,
			createTime,
			New Creation Time,
			This method sets the creation time on a mob.  The
  /// creation time is initially set to the time that the mob
  /// was created.
  /// Therefore\, this method should be called explicitly to change the
  /// creation time.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD2(AppendComment,
			[in\,string],
			objPass,
			aafCharacter *,
			pCategory,
			Comment heading,
			[in\, string],
			objPass,
			aafCharacter_constptr,
			pComment,
			Comment value,
			Creates a user-defined comment and appends it to the specified
  /// Mob.  A Mob comment is implemented as a AAFTaggedValue object of type 
  /// WCharString.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCategory pointer is valid.
  /// - the pComment pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pCategory or pComment args is NULL.)


AD_XMETHOD1(CountComments,
			[out],
			objPass,
			aafUInt32 *,
			pNumComments,
			Number  of Mob Comments,
			Return total number of comments attached to this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pNumComments pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pNumComments.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumComments arg is NULL.)


AD_XMETHOD1(GetComments,
			[out],
			objOut,
			EnumAAFTaggedValues,
			ppEnum,
			Mob Comments,
			Return the enumeration for all mob comments.  The returned
  /// enumerator is AddRef\(\)ed before it is returned.  Mob comments are 
  /// implemented as AAFTaggedValue of type WCharString.   The enumerator
  /// is implemented as a EnumAAAFTaggedValues.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(RemoveComment,
			[in],
			objIn,
			AAFTaggedValue,
			pComment,
			Comment to remove,
			Removes the given comment from this mob.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pComment pointer is valid.
  /// - the given comment is present in the mob.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComment is null.
  ///
  /// AAFRESULT_OBJECT_NOT_FOUND
  ///   - the given comment is not in this mob.)


AD_XMETHOD6(AppendNewTimelineSlot,
			[in],
			objPass,
			aafRational_t,
			editRate,
			Edit rate property value,
			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to append as slot component,
			[in],
			objPass,
			aafSlotID_t,
			slotID,
			new slot ID,
			[in\, string],
			objPass,
			aafCharacter_constptr,
			pSlotName,
			new slot name,
			[in],
			objPass,
			aafPosition_t,
			origin,
			The slot origin,
			[out],
			objOut,
			AAFTimelineMobSlot,
			ppNewSlot,
			Newly created slot,

			This method creates a new timeline mob slot with the given
  /// property values and appends it to the input mob.
  /// 
  /// The returned mob slot is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// - the pSlotName pointer is valid.
  /// - the ppNewSlot pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any of pSegment\, pSlotName\, or ppNewSlot arguments is null.)


AD_XMETHOD4(GetMobInfo,
			[out],
			objPass,
			aafTimeStamp_t *,
			pLastModified,
			Modified Time,
			[out],
			objPass,
			aafTimeStamp_t *,
			pCreationTime,
			Creation Time,
			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			Mob Name,
			[in],
			objPass,
			aafInt32,
			bufSize,
			size of the supplied buffer.,
			This method will get all mob property information is a single call.
  ///
  /// Caller may call GetNameBufLen\(\) to determine the required pName
  /// buffer size.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLastModified pointer is valid.
  /// - the pCreationTime pointer is valid.
  /// - the pName pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pLastModified\,
  /// *pCreationTime\, or *pName.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - any of pLastModified\, pCreationTime\, or pName arguments is NULL.
  ///
  /// AAFRESULT_SMALLBUF
  ///   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD3(OffsetToMobTimecode,
			[in],
			objIn,
			AAFSegment,
			pTcSeg,
			Timecode Segment,
			[in],
			objPass,
			aafPosition_t *,
			pOffset,
			Offset into segment in edit units for that segment's mob slot,
			[out],
			objPass,
			aafTimecode_t *,
			pResult,
			The resulting timecode,
			This method will determine the timecode at the given offset into
  /// the given timecode segment\, and will return it in *pResult.  If
  /// pTcSeg is NULL\, will search for the slot containing a timecode
  /// segment and will use that instead.
  ///
  /// Succeeds if all of the following are true:
  /// - the pTcSeg pointer is valid.
  /// - the pOffset pointer is valid.
  /// - the pResult pointer is valid.
  /// - Timecode track exists.
  /// 
  /// If this method fails nothing will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pOffset or pResult argument is NULL.
  ///
  /// AAFRESULT_TIMECODE_NOT_FOUND
  ///   - timecode track wasn't found.)


AD_XMETHOD2(LookupSlot,
			[in],
			objPass,
			aafSlotID_t,
			slotId,
			The requested slot id,
			[out],
			objOut,
			AAFMobSlot,
			ppDestSlot,
			The requested slot,
			The method will find the mob slot for the given slot id.
  ///
  /// The returned mob slot is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppDestSlot pointer is valid.
  /// - the given slot ID is found.
  /// 
  /// If this method fails nothing will be written to *ppDestSlot.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppDestSlot arg is NULL.)


AD_XMETHOD2(ChangeRef,
			[in\, ref],
			objPass,
			aafMobID_constref,
			oldMobID,
			Old Mob ID reference in source clip,
			[in\, ref],
			objPass,
			aafMobID_constref,
			newMobID,
			New Mob ID reference in source clip,
			Finds all Source Clips in the specified Mob that refer to the
  /// specified old Mob\, and changes the references to point to the
  /// new Mob.
  ///
  /// This function traverses through the entire structure of the input
  /// Mob looking for Source Clips\, and changes the sourceID property
  /// on all Source Clips with oldMobID to newMobID.
  ///
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD4(CloneExternal,
			[in],
			enumIn,
			aafDepend_t,
			resolveDependencies,
			Whether to clone dependent mobs,
			[in],
			enumIn,
			aafIncMedia_t,
			includeMedia,
			Whether to include media data,
			[in],
			objIn,
			AAFFile,
			pDestFile,
			Destination AAF File,
			[out],
			objOut,
			AAFMob,
			ppDestMob,
			Destination Mob,
			Clones the specified Source Mob\, and optionally all dependent
  /// Mobs\, to an external file\, keeping the same MobID.  A pointer
  /// to the newly created destination mob is returned in *ppDestMob.
  /// 
  /// This function clones the specified Source Mob in the source file
  /// into a destination Mob\, with the same MobID\, in the destination
  /// file.  If resolveDependencies is kFollowDepend\, the function
  /// also clones all Mobs referenced by the specified Source Mob.  If
  /// includeMedia is kIncludeMedia\, the function also copies the
  /// media data associated with the Source Mob\, returns the
  /// destination Mob\, and clones all private data.
  ///
  /// If the media data is not in the file\, the function does not
  /// attempt to find it in another file and clone it.  Both AAF files
  /// must be open before you call this function and both must have the
  /// same AAF Version number.
  ///
  /// The returned mob is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the pDestFile pointer is valid.
  /// - the ppDestMob pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pDestFile or ppDestMob arguments is NULL.)


AD_XMETHOD2(Copy,
			[in\, string],
			objPass,
			aafCharacter_constptr,
			pDestMobName,
			Optional Input. The name to be assigned to the new copy of the
  /// Mob.  The destMobName argument is optional. Specify a NULL
  /// value if no destination Mob name is desired.,
			[out],
			objOut,
			AAFMob,
			ppDestMob,
			Destination Mob,
			This function copies the specified Mob into a destination Mob in
  /// the same AAF file. The new Mob is returned through the destMob
  /// parameter. The function gives the destination Mob a new MobID and
  /// the name specified in the destMobName parameter. The function
  /// also copies all private data.
  /// 
  /// The returned mob is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the pDestMobName pointer is valid.
  /// - the ppDestMob pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either pDestMobName or pDestMob arguments is NULL.)
  ///

AD_XMETHOD1(AppendKLVData,
			[in],
			objIn,
			AAFKLVData,
			pData,
			KLV object,
			Appends a pre-existing KLV Data object to the specified
  /// Mob.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pKLV pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - the pData arg is NULL.)


AD_XMETHOD1(CountKLVData,
			[out],
			objPass,
			aafUInt32 *,
			pNumData,
			Number  of KLV data objects,
			Return total number of KLV data objects attached to this mob.
  ///
  /// Succeeds if all of the following are true:
  /// - the pNumData pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pNumComments.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pNumData arg is NULL.)


AD_XMETHOD1(GetKLVData,
			[out],
			objOut,
			EnumAAFKLVData,
			ppEnum,
			KLV data objects,
			Return the enumeration for all KLV data objects on this mob.  The returned
  /// enumerator is AddRef\(\)ed before it is returned.  The enumerator
  /// is implemented as a EnumAAFKLVData.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(RemoveKLVData,
			[in],
			objIn,
			AAFKLVData,
			pData,
			KLV data object to remove,
			Removes the given KLV data object from this mob.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pData pointer is valid.
  /// - the given KLV data object is present in the mob.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pData is null.
  ///
  /// AAFRESULT_OBJECT_NOT_FOUND
  ///   - the given KLV data object is not in this mob.)


#c

#c AAFMob2 methods
#c

AD_COM_METH(.method-AppendAttribute)
AD_COM_METH(.method-CountAttributes)
AD_COM_METH(.method-GetAttributes)
AD_COM_METH(.method-RemoveAttribute)
AD_COM_METH(.method-SetUsageCode)
AD_COM_METH(.method-GetUsageCode)
AD_COM_METH(.method-AppendNewStaticSlot)
AD_COM_METH(.method-AppendNewEventSlot)

AD_COM_EXT_CLASS_END(AAFMob2)
