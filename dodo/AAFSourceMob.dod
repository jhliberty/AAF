#c *********************************************************************
#c
#c $Id: AAFSourceMob.dod,v 1.35 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSourceMob\
#endm
#c
#startm .parent-module 0
AAFMob\
#endm
#c
#c #import ./AAFObject.exp
#c #import ./AAFComponent.exp
#c #import ./AAFMob.exp
#import ./AAFSearchSource.exp
AD_HEAD
AD_IDL(///
/// This interface is used with an object representing a SourceMob
/// containing some form of AAFEssenceDescriptor\, either an
/// AAFTapeDescriptor\, AAFFileDescriptor AAFFilmDescriptor\, or some
/// extended descriptor not in the v1 specification. Some methods
/// exist here which exist only for one kind of AAFEssenceDescriptor. 
///
///      - AppendTimecodeClip -- Works only on tape AAFSourceMobs
///      - ValidateTimecodeRange -- Works only on tape AAFSourceMobs
///      - AppendEdgecodeClip -- Works only on film AAFSourceMobs
///
/// These will return an error if the wrong descriptor is present.
/// 
/// If an AAFSourceMob points to another AAFSourceMob at the same rate
/// [or non-picture]\, then AppendPhysMobRef is used to create the
/// relationship.
///
/// If an AAFSourceMob points to picture on another AAFSourceMob at a different
/// sample rate\, then AddPulldownRef is used to create the relationship\, and the
/// AAFPulldown which describes how to map between the two rates.
///
/// In an AAFSourceMob is the end of the derivation chain for a particular track\, then
/// AddNilReference should be called for that slot\, to say that that slot does exist
/// on the SourceMob.  For example\, a video file mob with no derivation would have
/// a single slot or type video\, with a NIL reference to show that video exist\, and was
/// not derived from anything else on record.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFEssenceDescriptor)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFFindSourceInfo)
AD_FORWARD_DECLARATION(AAFComponent)
AD_FORWARD_DECLARATION(AAFSegment)
AD_CLASS_UUID(B1A2137D, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A2137C, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
#c AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_COM_EXT_CLASS_BEGIN(public IAAFSearchSource)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty IAAFSourceMob-supporting
  /// object.  This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(GetEssenceDescriptor,
			[out],
			objOut,
			AAFEssenceDescriptor,
			ppEssence,
			Returned Essence Descriptor object,
			Places the Essence Descriptor object attached to this Mob into the
  /// *ppEssence argument.  If none exists yet\, NULL is placed into the
  /// *ppEssence argument.
  ///
  /// The returned essence descriptor object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppEssence pointer is valid.
  /// - A valid essence descriptor exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEssence is null.
  ///
  /// AAFRESULT_NO_ESSENCE_DESC
  ///   - There is no essence descriptor.  There has to be one of some
  ///     kind for this to be a valid Mob.)


AD_XMETHOD1(SetEssenceDescriptor,
			[in],
			objIn,
			AAFEssenceDescriptor,
			pEssence,
			Essence Descriptor object,
			Sets the Essence Descriptor of this Mob to be the given one.
  ///
  /// Succeeds if all of the following are true:
  /// - the pEssence pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssence is null.)


AD_XMETHOD4(AddNilReference,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  SlotID to be assigned to the new slot,
			[in],
			  objPass,
			  aafLength_t,
			  length,
			  Duration of the Source Clip to be added to the new slot,
			[in],
			  objIn,
			  AAFDataDef,
			  pDataDef,
			  Data definition of the new slot,
			[in],
			  objPass,
			  aafRational_t,
			  editRate,
			  Edit rate of the new slot,
			This function adds a slot containing a NIL [sourceID 0.0....]
  /// Source Clip.  This special SourceID indicates that the mob chain
  /// ends here\, which indicates that no record exists of what the
  /// essence was derived from.  Some AAFSourceClip is still required
  /// on the track to indicate that the track exists\, and may be
  /// referenced from other Mobs.
  ///
  /// Examples of Source Mobs that are not derived from a previous
  /// source of essence are\: Tape Source Mobs that were not created
  /// from film\; File Source Mobs whose digital essence data was
  /// originally generated by computer and was not digitized from
  /// videotape.
  ///
  /// Succeeds if all of the following are true:
  /// - The pDataDef parameter is valid.
  /// - editRate is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - the pDataDef parameter is NULL.
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_BADRATE
  ///   - the editRate is not valid.)


AD_XMETHOD4(AppendTimecodeSlot,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate of Timecode slot,
			[in],
			  objPass,
			  aafInt32,
			  slotID,
			  SlotID of Timecode slot,
		    [in],
			  objPass,
			  aafTimecode_t,
			  startTC,
			  Starting time code,
			[in],
			  objPass,
			  aafFrameLength_t,
			  length32,
			  Duration of Timecode.,
			This function adds a Timecode slot to a specified tape Mob or
  /// film Mob\, with a specified starting timecode\, length\, and edit
  /// rate.  Your must also call SpecifyValidCodeRange to add the
  /// Filler to the other essence slots to indicate that the Timecode
  /// is valid for that channel.
  /// 
  /// Note: The startTC parameter is expressed in frames since
  /// midnight.
  /// 
  /// The length32 parameter can be the value FULL_RANGE\, in which
  /// case the length is 24 hours.
  ///
  /// Succeeds if all of the following are true:
  /// - The specified slot ID is not yet used.
  /// - This source mob references an AAFTapeDescriptor as an essence
  ///   descriptor.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_SLOT_EXISTS
  ///   - The specified slotID already exists.
  ///
  /// AAFRESULT_TAPEDESC_ONLY
  ///   - Valid only for AAFSourceMob referencing an AAFTapeDescriptor
  ///     as EssenceDescriptor.)


AD_XMETHOD7(AppendEdgecodeSlot,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate of the Edgecode slot,
			[in],
			  objPass,
			  aafInt32,
			  slotID,
			  SlotID to assign to the new Edgecode slot,
			[in],
			  objPass,
			  aafFrameOffset_t,
			  startEC,
			  Starting Edgecode,
			[in],
			  objPass,
			  aafFrameLength_t,
			  length32,
			  Length of the Edgecode component in the slot,
			[in],
			  enumIn,
			  aafFilmType_t,
			  filmKind,
			The film kind.
  /// Can be one of:
  /// - kFtNull
  /// - kFt35MM
  /// - kFt16MM
  /// - kFt8MM
  /// - kFt65MM,
			[in],
			  enumIn,
			  aafEdgeType_t,
			  codeFormat,
			  The code format.
  /// Can be one of:
  /// - kEtNull
  /// - kEtKeycode
  /// - kEtEdgenum4
  /// - kEtEdgenum5,
			[in],
			  objPass,
			  aafEdgecodeHeader_t,
			  header,
			  The Edgecode\'s 8-byte header,
			Adds an Edgecode slot to a specified film Mob\, with a specified
  /// starting edgecode\, length\, and edit rate. You must add a essence
  /// slot with SpecifyValidCodeRange to make the edgecode slot valid.
  ///
  /// Succeeds if all of the following are true:
  /// - The specified slot ID is not yet used.
  /// - This source mob references an AAFFilmDescriptor as an essence
  ///   descriptor.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_SLOT_EXISTS
  ///   - The specified slotID already exists.
  ///
  /// AAFRESULT_FILMDESC_ONLY
  ///   - Valid only for AAFSourceMob referencing an AAFFilmDescriptor
  ///     as EssenceDescriptor.)


AD_XMETHOD5(SpecifyValidCodeRange,
			[in],
			  objIn,
			  AAFDataDef,
			  pEssenceKind,
			  Data kind for the slot to be added,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  SlotID for the slot to be added,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate for the slot to be added,
			[in],
			  objPass,
			  aafFrameOffset_t,
			  startOffset,
			  Start offset for the slot to be added,
			[in],
			  objPass,
			  aafFrameLength_t,
			  length32,
			  Duration of the Source Clip in the slot,
			Adds slot containing Source Clips to a Source Mob to indicate
  /// that the Timecode or Edgecode is valid for that channel.
  ///
  /// Note: The pEssenceKind parameter requires a data kind valid for a
  /// essence stream.  Valid data kinds are:
  /// - Picture
  /// - Sound
  ///
  /// Succeeds if all of the following are true:
  /// - the pEssenceKind pointer is valid.
  /// - The specified slot ID is not yet used.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pEssenceKind is null.
  ///
  /// AAFRESULT_SLOT_EXISTS
  ///   - The specified slotID already exists.)


AD_XMETHOD5(AppendPhysSourceRef,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate of slot to contain reference,
			[in],
			  objPass,
			  aafSlotID_t,
			  aMobSlot,
			  SlotID of slot to contain reference,
			[in],
			  objIn,
			  AAFDataDef,
			  pEssenceKind,
			Data kind of slot to contain reference.  Requires a data kind
  /// valid for a essence stream.  Valid data kinds are:
  /// - Picture
  /// - Sound,
			[in],
			  objPass,
			  aafSourceRef_t,
			  ref,
			  Reference to a Physical Source Mob,
			[in],
			  objPass,
			  aafLength_t,
			  srcRefLength,
			  Length of the Source Clip,
			Connects this Source Mob with the physical Source Mob that
  /// describes the previous generation of essence\, appending it to
  /// existing Mob data.  If a physical Source Mob\, such as a File
  /// Source Mob or tape Source Mob\, references another physical
  /// Source Mob as its ancestor\, with no pulldown\, then this
  /// function makes the connection between the two.
  ///
  /// Functionally\, this is a helper function to create a slot with an
  /// AAFSourceClip referencing a particular piece of media.  This
  /// function takes many parameters because the components of an
  /// aafSourceRef_t have been broken out as separate parameters.
  ///
  /// The ancestor of an AAFSourceMob with an AAFFileDescriptor is often an
  /// AAFTapeDescriptor or NIL.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSourceRefObj pointer is valid.
  /// - the pEssenceKind pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSourceRefObj or pEssenceKind is null.)


AD_XMETHOD5(NewPhysSourceRef,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate of slot to contain reference,
			[in],
			  objPass,
			  aafSlotID_t,
			  aMobSlot,
			  SlotID of slot to contain reference,
			[in],
			  objIn,
			  AAFDataDef,
			  pEssenceKind,
			  Data kind of slot to contain reference.  Requires a data kind
  /// valid for a essence stream.  Valid data kinds are:
  /// - Picture
  /// - Sound,
			[in],
			  objPass,
			  aafSourceRef_t,
			  ref,
			  Reference to a Physical Source Mob,
			[in],
			  objPass,
			  aafLength_t,
			  srcRefLength,
			  Length of the Source Clip,
			Connects this Source Mob with the physical Source Mob that
  /// describes the previous generation of essence\, replacing any
  /// existing Mob data.  If a physical Source Mob\, such as a File
  /// Source Mob or tape Source Mob\, references another physical
  /// Source Mob as its ancestor\, with no pulldown\, then this
  /// function makes the connection between the two.
  ///
  /// Functionally\, this is a helper function to create a slot with an
  /// AAFSourceClip referencing a particular piece of media.  This
  /// function takes many parameters because the components of an
  /// aafSourceRef_t have been broken out as separate parameters.
  ///
  /// The ancestor of an AAFSourceMob with an AAFFileDescriptor is often an
  /// AAFTapeDescriptor or NIL.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSourceRefObj pointer is valid.
  /// - the pEssenceKind pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSourceRefObj or pEssenceKind is null.)


AD_XMETHOD9(AddPulldownRef,
			[in],
			  enumIn,
			  aafAppendOption_t,
			  addType,
			  Tells whether to overwrite an existing slot segment\, or create
  /// a sequence and append,
			[in],
			  objPass,
			  aafRational_t,
			  editrate,
			  Edit rate of slot to contain reference,
			[in],
			  objPass,
			  aafSlotID_t,
			  aMobSlot,
			  SlotID of slot to contain reference,
			[in],
			  objIn,
			  AAFDataDef,
			  pEssenceKind,
			  Data kind of slot to contain reference.  Requires a data kind
  /// valid for a essence stream.  Valid data kinds are:
  /// - Picture
  /// - Sound,
			[in],
			  objPass,
			  aafSourceRef_t,
			  ref,
			  Reference to a Physical Source Mob,
			[in],
			  objPass,
			  aafLength_t,
			  srcRefLength,
			  Length of the Source Clip in the Source Mob,
			[in],
			  enumIn,
			  aafPulldownKind_t,
			  pulldownKind,
			  Method of conversion.  Possible values are:
  /// - kAAFTwoThreePD	    -- Normal NTSC-20fps pulldown
  /// - kAAFPALPD
  /// - kAAFOneToOneNTSC   -- NTSC recorded as 1 frame == 1 film frame.
  /// - kAAFOneToOnePAL    -- PAL recorded as 1 frame == 1 film frame.,
			[in],
			  objPass,
			  aafPhaseFrame_t,
			  phaseFrame,
			  phase of first frame,
			[in],
			  enumIn,
			  aafPulldownDir_t,
			  direction,
			  Direction of the pulldown conversion. Possible values are:
  ///
  ///  - kAAFTapeToFilmSpeed -- Used to link a file descriptor with a
  ///							 tape descriptor.
  ///  - kAAFFilmToTapeSpeed -- Used to link a tape descriptor with a
  ///							 film descriptor.,

			Connects the specified Source Mob with the physical Source Mob
  /// that describes the previous generation of essence\, with an
  /// additional AAFPulldown as part of the reference to indicate a non
  /// 1-1 relationship Between the two. 
  ///
  /// Functionally\, this is a helper function to create a slot with an
  /// AAFPulldown object which references an AAFSourceClip\, which
  /// references a particular piece of media.  This function takes many
  /// parameters because the components of an aafSourceRef_t and the
  /// AAFPulldown object have been broken out as separate parameters.
  ///
  /// The ancestor of an AAFSourceMob with an AAFTapeDescriptor is
  /// often an AAFFilmDescriptor or NIL.
  ///
  /// Succeeds if all of the following are true:
  /// - the pSourceRefObj pointer is valid.
  /// - the pEssenceKind pointer is valid.
  /// - a valid pulldown direction was specified.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSourceRefObj or pEssenceKind is null.
  ///
  /// AAFRESULT_PULLDOWN_DIRECTION
  ///   - an invalid pulldown direction was specified.)
AD_COM_METH(.method-SearchSource)
#c AD_XCLASS_END(Concrete, StoredObject)
AD_COM_EXT_CLASS_END(AAFSearchSource)

