#c *********************************************************************
#c
#c $Id: AAFTapeDescriptor.dod,v 1.19 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTapeDescriptor\
#endm
#c
#startm .parent-module 0
AAFEssenceDescriptor\
#endm
#c
#c #import ./AAFEssenceDescriptor.exp
AD_HEAD
AD_INCLUDE(AAFTypes)
AD_IDL(///
/// The IAAFTapeDescriptor interface is implemented by objects which
/// describe audio tape or videotape media.  A TapeDescriptor object
/// shall be the EssenceDescription of a  physical Source Mob.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(e58a856a, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(e58a8569, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  /// IAAFTapeDescriptor-supporting object.  This method must be called
  /// after allocation\, and before any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(TapeManufacturer,
     the Tape Manufacturer string property.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(TapeModel,
     the Tape Model string property.)


AD_XMETHOD1(SetTapeFormFactor,
			[in],
			enumIn,
			aafTapeCaseType_t,
			formFactor,
		    ex: kVHSVideoTape\, kDATCartridge ,

			Sets the form factor [case size] of the tape.
  /// 
  /// This method succeeds if all of the following are true:
  /// - formFactor represents a valid format.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_BAD_TYPE
  ///	- formFactor is invalid.)


AD_XMETHOD1(GetTapeFormFactor,
			[out],
			objPass,
			aafTapeCaseType_t *,
			formFactor,
		    ex: kVHSVideoTape\, kDATCartridge,
			Gets the form factor [case size] of the tape.
  /// 
  /// This method succeeds if all of the following are true:
  /// - the pFormFactor pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFormFactor arg is NULL.)


AD_XMETHOD1(SetSignalType,
			[in],
			enumIn,
			aafVideoSignalType_t,
			videoSignal,
		    ex: kNTSCSignal,

			Sets the signal standard recorded on the tape.
  /// 
  /// This method succeeds if all of the following are true:
  ///	videoSignal represents a valid video signal type.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_BAD_TYPE
  ///	- videoSignal is invalid.)


AD_XMETHOD1(GetSignalType,
			[out],
			objPass,
			aafVideoSignalType_t *,
			pVideoSignal,
		    ex: kNTSCSignal,

			Gets the signal standard recorded on the tape.
  /// 
  /// This method succeeds if all of the following are true:
  /// - the pVideoSignal pointer is valid.
  ///
  /// If this method fails nothing will be written to *pVideoSignal.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pVideoSignal arg is NULL.)


AD_XMETHOD1(SetTapeFormat,
			[in],
			enumIn,
			aafTapeFormatType_t,
			tapeFormat,
		    ex: kBetacamFormat\, kBetacamSPFormat,

			Sets the recording method of the tape.
  /// 
  /// This method succeeds if all of the following are true:
  /// - tapeFormat represents a valid tape format type.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_BAD_TYPE
  ///	- tapeFormat is invalid.)


AD_XMETHOD1(GetTapeFormat,
			[out],
			objPass,
			aafTapeFormatType_t *,
			pTapeFormat,
		    ex: kBetacamFormat\, kBetacamSPFormat,

			Gets the recording method of the tape.
  ///
  /// Succeeds if all of the following are true:
  /// - the pTapeFormat pointer is valid.
  /// 
  /// This method succeeds if all of the following are true:
  /// - the pTapeFormat pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTapeFormat arg is NULL.)


AD_XMETHOD1(SetTapeLength,
			[in],
			objPass,
			aafUInt32,
			tapeLength,
			The length of the tape in minutes.,
			Sets the length of the tape in minutes.
  /// 
  /// This method succeeds if all of the following are true:
  /// - tapeLength is a positive number.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_BAD_LENGTH
  ///	- tapeLength is negative.)


AD_XMETHOD1(GetTapeLength,
			[out],
			objPass,
			aafUInt32 *,
			pTapeLength,
			The length of the tape in minutes.,

			Gets the length of the tape in minutes.
  ///
  /// This method succeeds if all of the following are true:
  /// - the pTapeLength pointer is valid.
  /// 
  /// If this method fails nothing will be written to *pTapeLength.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTapeLength arg is NULL.)
AD_XCLASS_END(Concrete, StoredObject)
