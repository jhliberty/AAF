#c *********************************************************************
#c
#c $Id: AAFNestedScope.dod,v 1.19 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFNestedScope\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is used with an object which contains an ordered set
/// of AAFSegments and produces the value specified by the last
/// AAFSegement in the ordered seta reference to a segment.
/// AAFNestedScopes are used to encapsulate intermediate results which
/// may be referenced from more than one place\, in a manner much like
/// common subexpressions in mathmatical expressions.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_INCLUDE(AAFTypes)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(EnumAAFSegments)
AD_CLASS_UUID(e44be452, 2099, 11d2, bf, 98, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(e44be451, 2099, 11d2, bf, 98, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(AppendSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment, 
			Pointer to segment to be added,
     Append another input segment to the list of source segments.  The
  /// last segment added will be used as the output of the nested
  /// scope\, and usually contains operations whose inputs are scope
  /// references.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment is null.)


AD_XMETHOD1(PrependSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment, 
			Pointer to segment to be added,
     Prepend another input segment to the list of source segments.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment is null.)


AD_XMETHOD2(InsertSegmentAt,

			[in],
			objPass,
			aafUInt32,
			index, 
			index where segment is to be inserted,

			[in],
			objIn,
			AAFSegment,
			pSegment, 
			Pointer to segment to be added,

     Insert an input segment to the list of source segments at the
  /// given index.  Segments already existing at the given and higher
  /// indices will be moved up one index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// - index is less than or equal to the value returned by
  ///   CountSegments\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountSegments\(\).)


AD_XMETHOD1(RemoveSegmentAt,
			[in],
			objPass,
			aafUInt32,
			index, 
			index of segment to be removed,

     Removes the indexed segment.  Segments already existing at
  /// indices greater than the given index will be moved down by one
  /// index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSegment pointer is valid.
  /// - index is less than the value returned by CountSegments\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSegment is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountSegments\(\).)


AD_XMETHOD1(CountSegments,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult, 
			number of segments contained,

     Returns the number of source segments currently contained.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails no value will be written to *pResult.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD2(GetSegmentAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of segment to retrieve,

			[out\, retval],
			objOut,
			AAFSegment,
			ppSegment,
			retrieved segment,

     Retrieves the indexed segment.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// - index is less than the value returned by CountSegments\(\).
  /// 
  /// If this method fails nothing will be written to *ppSegment.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountSegments\(\).)


AD_XMETHOD1(GetSegments,
			[out\, retval],
			objOut,
			EnumAAFSegments,
			ppEnum,
			Slots - segment list  enumeration,
     Return an enumerator for the ordered list of AAFSegments which
  /// make up the nested scope.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)
AD_XCLASS_END(Concrete, StoredObject)
