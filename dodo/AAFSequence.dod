#c *********************************************************************
#c
#c $Id: AAFSequence.dod,v 1.29 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSequence\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#import ./AAFSegment.exp
AD_HEAD
AD_IDL(///
/// This interface provides access to the list of Segment and
/// Transition objects maintained by a Sequence object.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFTimecode)
AD_FORWARD_DECLARATION(AAFComponent)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(EnumAAFComponents)
AD_CLASS_UUID(66e855f1, 2bc2, 11d2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(66e855f0, 2bc2, 11d2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(Initialize,
			[in],
			objIn,
			AAFDataDef,
			pDataDef,
			DataDef of this object,
     This function sets the properties on a newly created sequence
  /// object with the given property values. The length of the sequence
  /// is initially set to 0.  When components are appended to the
  /// sequence with the AppendComponent\(\) call\, the length of the
  /// appended component is added to the length of the sequence.  The
  /// given DataDef specifies the kind of data which all components to
  /// be contained in this sequence must share.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has not yet been initialized.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pDataDef is null.
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(AppendComponent,
			[in],
			objIn,
			AAFComponent,
			pComponent,
			Component to append to the sequence,
     This function appends the input component to the given sequence\,
  /// enforcing bottom up creation of mobs.  The length of the sequence
  /// is incremented by the size of the component\, unless the
  /// component is a transition.  If the component is a transition\, it
  /// verifies that it is not the first object in a transition\, and
  /// that it is not neighboring another transition.  It also verifies
  /// that there is enough source material on either side of the
  /// transition.  The function also verifies that the datadefs are
  /// compatible.
  ///
  /// This method will AddRef\(\) the component if it succeeds.
  ///
  /// If the component is successfully appended to the sequence\, the
  /// reference count of the component is incremented.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pComponent pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComponent is null.
  ///
  /// AAFRESULT_INVALID_DATADEF
  ///   - The data kind of the component is not compatible with the 
  ///     data def of the sequence.
  ///
  /// AAFRESULT_LEADING_TRAN
  ///   - Attempted to append a transition as the first component of
  ///     a sequence.  A sequence can not start with a transition. 
  ///
  /// AAFRESULT_ADJACENT_TRAN
  ///   - Attempted to append a transition next to a transition.  A
  ///     sequence can not contain back to back transitions.
  ///
  /// AAFRESULT_INSUFF_TRAN_MATERIAL
  ///   - There is not enough source material to add this component.)


AD_XMETHOD1(PrependComponent,
			[in],
			objIn,
			AAFComponent,
			pComponent,
			Component to prepend to the sequence,
     This function prepends the input component to the given
  /// sequence\, enforcing bottom up creation of mobs.  The length of
  /// the sequence is incremented by the size of the component\, unless
  /// the component is a transition.  If the component is a
  /// transition\, it verifies that it is not the first object in a
  /// transition\, and that it is not neighboring another transition.
  /// It also verifies that there is enough source material on either
  /// side of the transition.  The function also verifies that the
  /// datadefs are compatible.
  ///
  /// This method will AddRef\(\) the component if it succeeds.
  ///
  /// If the component is successfully appended to the sequence\, the
  /// reference count of the component is incremented.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pComponent pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComponent is null.
  ///
  /// AAFRESULT_INVALID_DATADEF
  ///   - The data kind of the component is not compatible with the 
  ///     data def of the sequence.
  ///
  /// AAFRESULT_LEADING_TRAN
  ///   - Attempted to append a transition as the first component of
  ///     a sequence.  A sequence can not start with a transition. 
  ///
  /// AAFRESULT_ADJACENT_TRAN
  ///   - Attempted to append a transition next to a transition.  A
  ///     sequence can not contain back to back transitions.
  ///
  /// AAFRESULT_INSUFF_TRAN_MATERIAL
  ///   - There is not enough source material to add this component.)


AD_XMETHOD2(InsertComponentAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index to insert component,

			[in],
			objIn,
			AAFComponent,
			pComponent,
			Component to insert into the sequence,
     This function inserts the input component into the given sequence
  /// at the given index\, enforcing bottom up creation of mobs.  The
  /// length of the sequence is incremented by the size of the
  /// component\, unless the component is a transition.  If the
  /// component is a transition\, it verifies that it is not the first
  /// object in a transition\, and that it is not neighboring another
  /// transition.  It also verifies that there is enough source
  /// material on either side of the transition.  The function also
  /// verifies that the datadefs are compatible.
  ///
  /// This method will AddRef\(\) the component if it succeeds.
  ///
  /// If the component is successfully appended to the sequence\, the
  /// reference count of the component is incremented.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pComponent pointer is valid.
  /// - index is less than or equal to the value returned by
  ///   CountComponents\(\).
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComponent is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountComponents\(\).
  ///
  /// AAFRESULT_INVALID_DATADEF
  ///   - The data kind of the component is not compatible with the 
  ///     data def of the sequence.
  ///
  /// AAFRESULT_LEADING_TRAN
  ///   - Attempted to append a transition as the first component of
  ///     a sequence.  A sequence can not start with a transition. 
  ///
  /// AAFRESULT_ADJACENT_TRAN
  ///   - Attempted to append a transition next to a transition.  A
  ///     sequence can not contain back to back transitions.
  ///
  /// AAFRESULT_INSUFF_TRAN_MATERIAL
  ///   - There is not enough source material to add this component.)


AD_XMETHOD2(GetComponentAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of component to retrieve,

			[out\, retval],
			objOut,
			AAFComponent,
			ppComponent,
			Retrieved component,
     This function retrieves the input component at the given index in
  /// the given sequence.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppComponent pointer is valid.
  /// - index is less than the value returned by
  ///   CountComponents\(\).
  /// 
  /// If this method fails nothing will be written to *ppComponent.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pComponent is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountComponents\(\).)


AD_XMETHOD1(RemoveComponentAt,
			[in],
			objPass,
			aafUInt32,
			index,
			index of component to remove,
     This function removes the input component at the given index in
  /// the given sequence.  Components already existing at indices
  /// higher than the given index will be moved to the next lower index
  /// to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - index is less than the value returned by
  ///   CountComponents\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountComponents\(\).)


AD_XMETHOD1(CountComponents,
			[out],
			objPass,
			aafUInt32 *,
			pResult,
			Number of components,
			This function returns the number of components in the sequence.
  /// 
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the pResult pointer is valid.
  /// 
  /// If this method fails no state is changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pResult is null.)


AD_XMETHOD1(GetComponents,
			[out\, retval],
			objOut,
			EnumAAFComponents,
			ppEnum,
			Component Enumeration,
			Places an IEnumAAFComponents enumerator for the components
  /// contained in the sequence into the *ppEnum argument.
  /// 
  /// The returned enumerator is AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - this object has already been initialized.
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.
  ///
  /// E_FAIL
  ///   - Failed to create the enumerator.)


AD_OVERRIDE(.method-SegmentOffsetToTC)


AD_OVERRIDE(.method-SegmentTCToOffset)
AD_XCLASS_END(Concrete, StoredObject)
