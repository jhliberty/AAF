#c *********************************************************************
#c
#c $Id: AAFInterpolator.dod,v 1.8 2009/06/01 11:46:50 stuart_hc Exp $ $Name: V116 $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFInterpolator\
#endm
#c
#startm .parent-module 0
AAFPlugin\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD

AD_IDL(///
/// The AAFInterpolator interface describes the calls of a plugin
/// which handles interpolating between two IAAFControlPoints in an
/// IAAFVaryingValue.  There will be one InterpolatorDefinition for each
/// method of interpolation  \(ex: Step\, Linear\, Log\) supported\,
/// so that the SDK can call GetIndexedSupportedType\(\)
/// repeatedly in order to find out what types this interpolator suppports.
///
/// The AAFPluginManager keeps a copy of each interpolator in a table\, along
/// with cached copies of pertinant metadata about the interpolator.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_CLASS_UUID(75C6CDF1, 0D67, 11d3, 80, A9, 00, 60, 08, 14, 3e, 6f)

AD_DEFAULT_UUID(75C6CDF2, 0D67, 11d3, 80, A9, 00, 60, 08, 14, 3e, 6f)
AD_XCLASS_BEGIN(Abstract, Transient)

AD_IDL(///
	///**************
	/// Meta codec functions.  Called to plug a codec into the SDK\, but
	/// NOT for each instance of a codec.
	///)

AD_XMETHOD1(GetNumTypesSupported,
		   [out],
		   objPass,
		   aafUInt32*,
		   pCount,
		   Number of data types supported,
			 Each interpolator plugin will support a given number of interpolator
	/// types for a given number of data types.  This call returns the number of
	/// data types supported\, so that the SDK can call GetIndexedSupportedType\(\)
	/// repeatedly in order to find out what types this interpolator suppports.
	///
	/// An interpolator is expected to support all data types for each interpolation
	/// method which the interpolator supports.
	/// 
	/// This method should return only the following codes.  If more than one of
	/// the listed errors is in effect\, it should return the first one
	/// encountered in the order given below:
	/// 
	/// AAFRESULT_SUCCESS
	///   - succeeded.  \(This is the only code indicating success.\)
	///
	/// AAFRESULT_NULL_PARAM
	///   - pCount is null.)


AD_XMETHOD2(GetIndexedSupportedType,
		   [in],
		   objPass,
		   aafUInt32,
		   index,
		   Which flavour to get the ID for,
		   [out],
		   objOut,
		   AAFTypeDef,
		   ppType,
		   The returned type definition,
			 Each interpolator plugin will support a given number of interpolator
	/// types for a given number of data types.  This call returns one of the data
	/// types supported using an index.  The index value should be between 0 and
	/// one less than the value returned by GetNumTypesSupported\(\).
	/// The number of flavours is returned by GetNumTypesSupported\(\)\, and cached
	/// by the AAFPluginManager.
	///
	/// An interpolator is expected to support all data types for each interpolation
	/// method which the interpolator supports.
	/// 
	/// This method should return only the following codes.  If more than one of
	/// the listed errors is in effect\, it should return the first one
	/// encountered in the order given below:
	/// 
	/// AAFRESULT_SUCCESS
	///   - succeeded.  \(This is the only code indicating success.\)
	///
	/// AAFRESULT_NULL_PARAM
	///   - pVariant is null.
	///
	/// AAFRESULT_OUT_OF_RANGE
	///   - index must be \>\= 0 and \< the number of flavours returned in GetNumTypesSupported\(\). )

AD_XMETHOD1(GetTypeDefinition,
			[out],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			Returned data definition object,
			Places the data definition object attached to this interpolator into the
  /// *ppTypeDef argument.  If none exists yet\, NULL is placed into the
  /// *ppTypeDef argument.
  ///
  /// The returned data definition object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppTypeDef pointer is valid.
  /// - A valid data definition exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppTypeDef is null.)


AD_XMETHOD1(SetTypeDefinition,
			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Data definition object,
			Sets the data definition of this interpolator to be the given one.
  ///
  /// Succeeds if all of the following are true:
  /// - the pTypeDef pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pTypeDef is null.)


AD_XMETHOD1(GetParameter,
			[out],
			objOut,
			AAFParameter,
			ppParameter,
			Returned data definition object,
			Places the parameter object attached to this interpolator into the
  /// *ppParameter argument.  If none exists yet\, NULL is placed into the
  /// *ppParameter argument.
  ///
  /// The returned parameter object\, if it exists\, is
  /// AddRef\(\)ed before it is returned.
  ///
  /// Succeeds if all of the following are true:
  /// - the ppParameter pointer is valid.
  /// - A valid data definition exists.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppParameter is null.)


AD_XMETHOD1(SetParameter,
			[in],
			objIn,
			AAFParameter,
			pParameter,
			Parameter object,
			Sets the parmeter of this interpolator to be the given one.
  ///
  /// Succeeds if all of the following are true:
  /// - the pParameter pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pParameter is null.)


AD_XMETHOD4(InterpolateOne,
			[in],
			objPass,
			aafRational_t *,
			pInputValue,
			Input values are from 0 \(effect start\)\, to 1 \(effect end\) inclusive.,
			[in],
			objPass,
			aafUInt32,
			valueSize,
			Size of preallocated buffer,
			[out\, size_is\(valueSize\)\,length_is\(*bytesRead\)],
			objPass,
			aafDataBuffer_t,
			pValue,
			A generated control point,
			[out],
			objPass,
			aafUInt32*,
			bytesRead,
			The number of bytes actually transferred,
			Interpolates between known control points on the value\, and
	/// creates a new AAFControlPoint which which can be imagined to exist
	/// at the given inputValue.
  ///
  /// Succeeds if all of the following are true:
  /// - the pInputValue pointer is valid.
  /// - the ppOutputValue pointer is valid.
  /// - The input value is between 0 \(effect start\)\, to 1 \(effect end\) inclusive.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_INPUT_RANGE
  ///   - The input value must be between 0 and 1\, inclusive.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputValue or ppOutputValue is null.)


AD_X2METHOD5(InterpolateMany,
			[in],
			objPass,
			aafRational_t *,
			pStartInputValue,
			Input values are from 0 \(effect start\)\, to 1 \(effect end\) inclusive.,
			xxx,
			xxx,

			[in],
			objPass,
			aafRational_t *,
			pInputStep,
			Amount to add to *pStartInputValue to get the next point to interpolate,
			xxx,
			xxx,

			[in],
			objPass,
			aafUInt32,
			generateCount,
			The number of points to interpolate,
			xxx,
			xxx,

			[out],
			objPass,
			aafMemPtr_t,
			pOutputValue,
			an array of generated control points,
			pGenerateCount,
			*pResultCount,

			[out],
			objPass,
			aafUInt32 *,
			pResultCount,
			The number of points actually generated,
			xxx,
			xxx,

			Interpolates between known control points on the value\, and
	/// creates an array of new AAFControlPoint which which can be imagined to exist
	/// at the given inputValue.  While InterpolateOne\(\) generates a single point\,
	/// this function starts at a given offset and generates interpolations until either
	/// generateCount is reached\, or the next result would have an input value
	/// of greater than one. 
  ///
  /// Succeeds if all of the following are true:
  /// - the pInputValue pointer is valid.
  /// - the pInputStep pointer is valid.
  /// - the ppOutputValue pointer is valid.
  /// - the pResultCount pointer is valid.
  /// - The input value is between 0 \(effect start\)\, to 1 \(effect end\) inclusive.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_INPUT_RANGE
  ///   - The input value must be between 0 and 1\, inclusive.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInputValue or ppOutputValue or pInputStep or pResultCount is null.)
AD_XCLASS_END(Abstract, Transient)
